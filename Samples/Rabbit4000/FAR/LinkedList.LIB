/*** Beginheader */
#ifndef _LINKEDLIST_LIB_
#define _LINKEDLIST_LIB_

#ifndef MAX_LIST_SIZE
#define MAX_LIST_SIZE 10
#endif

#define NOT_FOUND -1

#ifdef LL_DEBUG
#define _ll_debug debug
#else
#define _ll_debug nodebug
#endif
/*** Endheader */

/*****************************************************************************\
LIBRARY DESCRIPTION

	This library is meant to demonstrate the use of 'far' for creating a linked
	list in far dataspace.  Although embedded systems do not actually dynamically
	allocate data, this library demonstrates a method of memory management by
	reusing deleted nodes in the list.

	Data types:

	LinkedList		This is the handle for the linked list. This is the first
						thing passed into each linked list function.
	Iterator			An iterator handle for a linked list.

	Function:							Description:

	-- General functions --
	Create(ListHandle *, size_t, cmpfunc)			creates an empty list
	Clear(ListHandle *)									erase all elements in list
	Size(ListHandle *)									returns size of list
	Empty(ListHandle *)									returns true if list is empty
	Front(ListHandle *)									returns first element
	Back(ListHandle *)									returns last element
	Push_front(ListHandle *, const void *)			inserts in front of list
	Push_back(ListHandle *, const void *)			inserts in back of list
	Pop_front(ListHandle *)								removes element in front of list
	Pop_back(ListHandle *)								removes element in back of list
	Sort(ListHandle *, cmpfunc)						sorts list with cmpfunc
	Remove(ListHandle *, const void *)				removes all matching elements
   Reverse(ListHandle *, const void *)				revese elements in list

	-- Iterator functions --
	Begin(ListHandle *)					returns iterator pointing to beginning
	End(ListHandle *)						returns iterator pointing to end of list
	Next(iterator *)           		increments iterator position
	Prev(iterator *)						decrements iterator position
	Insert(const void *, iterator *)	inserts element before iterator position
	Delete(iterator *)					delete element at iterator
	Get(iterator *)						returns element pointed to by iterator

******************************************************************************/


/******************************************************************************
 Data structures:
******************************************************************************/

/*** Beginheader _listnode, ListHandle, Iterator */
struct _node_ {
	far void * data;
	int next;
	int prev;
};
typedef struct _node_ _listnode;

/*
 * head				Node number of first node in list.
 * tail				Node number of last node in list.
 * garbage			Node number of beginning of list of unused nodes.
 * node_start		Location in XMEM of the nodes.
 * data_size		Size of each element of user data.
 * cmpfunc			Pointer to comparison function used for sorting and finding.
 */

struct _linkedlist_ {
	int head;
	int tail;
	int garbage;
	far _listnode * node_start;
	size_t data_size;
	int (*cmpfunc)();
};
typedef struct _linkedlist_ ListHandle;

struct _iterator_ {
	int node;
	ListHandle * list;
};
typedef struct _iterator_ Iterator;
/*** EndHeader */

/*** Beginheader Create */
ListHandle * Create(ListHandle *, size_t, int (*)());
/*** Endheader */

/* START FUNCTION DESCRIPTION ********************************************
Create							<LINKEDLIST.LIB>

SYNTAX: ListHandle * Create(ListHandle *, size_t, int (*)());

PARAMETER1:		Pointer to the ListHandle
PARAMETER2:		The size (in bytes) of the data to be kept in the list.
PARAMETER3:		A pointer to a compare function used for sorting the list.
					Pass NULL if not sorting. The function should work similar to
					strcmp() as follows:

					The compare function must take two arguments, both of type
					const far [type] *.  If the first argument should be before the
					second argument,  the function returns a number less than 0.
					If the first arg should be after the second arg, the function
					should return a number greater than 0.  If they are equal, the
					function should return 0.  Example for comparing longs:

					int cmpfunc(const far long * lhs, const far long * rhs) {
						if( *lhs < *rhs ) return -1;
						if( *lhs > *rhs ) return 1;
						return 0;
					}

DESCRIPTION:	This function initializes the given ListHandle by allocating
					space in xmem and saving references to the user created compare
					function.

RETURN VALUE:	The same as parameter 1.
END DESCRIPTION **********************************************************/

_ll_debug
ListHandle * Create(ListHandle * list, size_t n, int (*cmp)())
{
	int i;
	far _listnode * nodes;
	void far * data_start;

	if(list == NULL) {
		return NULL;
	}

	data_start = (void far *)xalloc(n * MAX_LIST_SIZE);
	list->node_start = (_listnode far *)xalloc(sizeof(_listnode) * MAX_LIST_SIZE);
	list->head = list->tail = NOT_FOUND;
	list->garbage = 0;
	list->cmpfunc = cmp;

	nodes = list->node_start;
	for(i = 0; i < MAX_LIST_SIZE; i++) {
		nodes[i].next = i + 1;
		nodes[i].data = (char far *)data_start + i * n;
	}
	nodes[0].prev = NOT_FOUND;
	nodes[MAX_LIST_SIZE - 1].next = NOT_FOUND;

	list->data_size = n;
	return list;
}

/*** Beginheader Clear */
void Clear(ListHandle *);
/*** Endheader */

/* START FUNCTION DESCRIPTION ********************************************
Clear								<LINKEDLIST.LIB>

SYNTAX: void Clear(ListHandle *);

PARAMETER1:		Pointer to the ListHandle

DESCRIPTION:	This function clears the list.

RETURN VALUE:	None
END DESCRIPTION **********************************************************/

_ll_debug
void Clear(ListHandle * list)
{
	if(list == NULL || list->head == NOT_FOUND) {
		return;
	}

	list->node_start[list->tail].next = list->garbage;
	list->tail = list->head = NOT_FOUND;
}

/*** Beginheader Size */
int Size(ListHandle *);
/*** Endheader */

/* START FUNCTION DESCRIPTION ********************************************
Size								<LINKEDLIST.LIB>

SYNTAX: int Size(ListHandle *);

PARAMETER1:		Pointer to the ListHandle

DESCRIPTION:	This function returns the size of the list or 0 for a NULL
					pointer.  This function takes O(N) time and should not be
					assumed to be fast.  For testing for an empty list, as in
					if(Size(&list) == 0) ... use Empty(&list) instead.

RETURN VALUE:	Size of the list.
END DESCRIPTION **********************************************************/

_ll_debug
int Size(ListHandle * list)
{
	int i, j;

	if(list == NULL || list->head == NOT_FOUND) {
		return 0;
	}

	for(j = 0, i = list->head; i != NOT_FOUND; i = list->node_start[i].next, j++)
		;

	return j;
}

/*** Beginheader Empty */
int Empty(ListHandle *);
/*** Endheader */

/* START FUNCTION DESCRIPTION ********************************************
Empty								<LINKEDLIST.LIB>

SYNTAX: int Empty(ListHandle *);

PARAMETER1:		Pointer to the ListHandle

DESCRIPTION:	This function returns 1 if the list is empty or if a NULL
					pointer has been passed.  Otherwise it returns 0.

RETURN VALUE:	1 if Empty, 0 if not.
END DESCRIPTION **********************************************************/

_ll_debug
int Empty(ListHandle * list)
{
	if(list == NULL || list->head == NOT_FOUND) {
		return 1;
	}

	return 0;
}

/*** Beginheader Push_front */
void Push_front(ListHandle *, far void *);
/*** Endheader */

/* START FUNCTION DESCRIPTION ********************************************
Push_front						<LINKEDLIST.LIB>

SYNTAX: void Push_front(ListHandle *, far void *);

PARAMETER1:		Pointer to the ListHandle
PARAMETER2:		Pointer to element to insert.

DESCRIPTION:	This function copies the element into preallocated space for
					the list. The new node becomes the first in the list.

RETURN VALUE:	none
END DESCRIPTION **********************************************************/

_ll_debug
void Push_front(ListHandle * list, far void * ins)
{
	if(list == NULL || ins == (far void *)NULL) {
		return;
	}

	_insert_node(list, list->head, ins);
}

/*** Beginheader Push_back */
void Push_back(ListHandle *, far void *);
/*** Endheader */

/* START FUNCTION DESCRIPTION ********************************************
Push_back						<LINKEDLIST.LIB>

SYNTAX: void Push_back(ListHandle *, far void *);

PARAMETER1:		Pointer to the ListHandle
PARAMETER2:		Pointer to element to insert.

DESCRIPTION:	This function copies the element into preallocated space for
					the list. The new node becomes the last in the list.

RETURN VALUE:	none
END DESCRIPTION **********************************************************/

_ll_debug
void Push_back(ListHandle * list, far void * ins)
{
	if(list == NULL || ins == (far void *)NULL) {
		return;
	}

	_insert_node(list, NOT_FOUND, ins);
}

/*** Beginheader Pop_front */
void Pop_front(ListHandle *);
/*** Endheader */

/* START FUNCTION DESCRIPTION ********************************************
Pop_front						<LINKEDLIST.LIB>

SYNTAX: void Pop_front(ListHandle *);

PARAMETER1:		Pointer to the ListHandle

DESCRIPTION:	This function removes the first element (if it exists) from
					the list.

RETURN VALUE:	Size of the list.
END DESCRIPTION **********************************************************/

_ll_debug
void Pop_front(ListHandle * list)
{
	if(list == NULL || list->head == NOT_FOUND) {
		return;
	}

	_delete_node(list, list->head);
}

/*** Beginheader Pop_back */
void Pop_back(ListHandle *);
/*** Endheader */

/* START FUNCTION DESCRIPTION ********************************************
Pop_back							<LINKEDLIST.LIB>

SYNTAX: void Pop_back(ListHandle *);

PARAMETER1:		Pointer to the ListHandle

DESCRIPTION:	This function removes the last element (if it exists) from
					the list.

RETURN VALUE:	Size of the list.
END DESCRIPTION **********************************************************/

_ll_debug
void Pop_back(ListHandle * list)
{
	if(list == NULL || list->tail == NOT_FOUND) {
		return;
	}

	_delete_node(list, list->tail);
}

/*** Beginheader Front */
far void * Front(ListHandle *);
/*** Endheader */

/* START FUNCTION DESCRIPTION ********************************************
Front								<LINKEDLIST.LIB>

SYNTAX: far void * Front(ListHandle *);

PARAMETER1:		Pointer to the ListHandle

DESCRIPTION:	This function returns a far pointer to the data contained
					in the first element of the list.

RETURN VALUE:	pointer to far data.
END DESCRIPTION **********************************************************/

_ll_debug
far void * Front(ListHandle * list)
{
	if(list == NULL || list->head == NOT_FOUND)
		return NULL;

	return (list->node_start)[list->head].data;
}

/*** Beginheader Back */
far void * Back(ListHandle *);
/*** Endheader */

/* START FUNCTION DESCRIPTION ********************************************
Back								<LINKEDLIST.LIB>

SYNTAX: far void * Back(ListHandle *);

PARAMETER1:		Pointer to the ListHandle

DESCRIPTION:	This function returns a far pointer to the data contained
					in the last element of the list.

RETURN VALUE:	pointer to far data.
END DESCRIPTION **********************************************************/

_ll_debug
far void * Back(ListHandle * list)
{
	if(list == NULL || list->tail == NOT_FOUND)
		return NULL;

	return (list->node_start)[list->tail].data;
}

/*** Beginheader Sort */
void Sort(ListHandle *);
/*** Endheader */

/* START FUNCTION DESCRIPTION ********************************************
Sort								<LINKEDLIST.LIB>

SYNTAX: void Sort(ListHandle *);

PARAMETER1:		Pointer to the ListHandle

DESCRIPTION:	This function sorts the list according to the compare function
					supplied during creation of the list.  If no function was
					supplied, the list remains the same.

					The compare function must take two arguments, both of type
					const far [type] *.  If the first argument should be before the
					second argument,  the function returns a number less than 0.
					If the first arg should be after the second arg, the function
					should return a number greater than 0.  If they are equal, the
					function should return 0.  Example for comparing longs:

					int cmpfunc(const far long * lhs, const far long * rhs) {
						if( *lhs < *rhs ) return -1;
						if( *lhs > *rhs ) return 1;
						return 0;
					}

RETURN VALUE:	pointer to far data.
END DESCRIPTION **********************************************************/

_ll_debug
void Sort(ListHandle * list)
{
	int lhs, rhs;
	far _listnode * nodes;

	if(list == NULL || list->head == NOT_FOUND || list->cmpfunc == NULL)
		return;

	lhs = list->head;
	nodes = list->node_start;

	do {
		rhs = nodes[lhs].next;
		if(rhs == NOT_FOUND)
			break;

		// if (lhs > rhs) we need to swap
		if(list->cmpfunc(nodes[lhs].data, nodes[rhs].data) > 0) {
			if(list->head == lhs) {
				list->head = rhs;
			}
			if(list->tail == rhs) {
				list->tail = lhs;
			}

			// swap lhs and rhs
			nodes[rhs].prev = nodes[lhs].prev;
			nodes[lhs].next = nodes[rhs].next;
			nodes[nodes[rhs].prev].next = rhs;
			nodes[nodes[lhs].next].prev = lhs;

			nodes[rhs].next = lhs;
			nodes[lhs].prev = rhs;

			if(nodes[rhs].prev != NOT_FOUND) {
				lhs = nodes[rhs].prev;
			}
		}
		else {
			lhs = nodes[lhs].next;
		}
	} while(lhs != NOT_FOUND);
}

/*** Beginheader Reverse */
void Reverse(ListHandle *);
/*** Endheader */

/* START FUNCTION DESCRIPTION ********************************************
Reverse							<LINKEDLIST.LIB>

SYNTAX: void Reverse(ListHandle *);

PARAMETER1:		Pointer to the ListHandle

DESCRIPTION:	This function reverses the order of the list.

RETURN VALUE:	none
END DESCRIPTION **********************************************************/

_ll_debug
void Reverse(ListHandle * list)
{
	int curr, next;
	_listnode far * nodes;

	if(list == NULL || list->head == NOT_FOUND) {
		return;
	}

	nodes = list->node_start;
	for(curr = list->head; curr != NOT_FOUND; curr = next) {
		next = nodes[curr].next;
		nodes[curr].next = nodes[curr].prev;
		nodes[curr].prev = next;
	}

	next = list->head;
	list->head = list->tail;
	list->tail = next;
}

/*** Beginheader Remove */
void Remove(ListHandle *, void far *);
/*** Endheader */

/* START FUNCTION DESCRIPTION ********************************************
Remove							<LINKEDLIST.LIB>

SYNTAX: void Remove(ListHandle *, void far *);

PARAMETER1:		Pointer to the ListHandle
PARAMETER2:		Element to remove

DESCRIPTION:	This function removes all elements in the list that match
					the supplied element in parameter 2.  The compare function
					is used.

					The compare function must take two arguments, both of type
					const far [type] *.  If the first argument should be before the
					second argument,  the function returns a number less than 0.
					If the first arg should be after the second arg, the function
					should return a number greater than 0.  If they are equal, the
					function should return 0.  Example for comparing longs:

					int cmpfunc(const far long * lhs, const far long * rhs) {
						if( *lhs < *rhs ) return -1;
						if( *lhs > *rhs ) return 1;
						return 0;
					}

RETURN VALUE:	none
END DESCRIPTION **********************************************************/

_ll_debug
void Remove(ListHandle * list, void far * del)
{
	int i, delnode;
	far _listnode * nodes;

	if(list == NULL || list->head == NOT_FOUND || list->cmpfunc == NULL) {
		return;
	}

	nodes = list->node_start;
	for(i = list->head; i != NOT_FOUND; ) {
		// if (lhs == rhs)
		if(list->cmpfunc(del, nodes[i].data) == 0) {
			i = _delete_node(list, i);
		}
		else {
			i = nodes[i].next;
		}
	}
}

/*** Beginheader Begin */
Iterator * Begin(ListHandle *, Iterator *);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
Begin								<LINKEDLIST.LIB>

SYNTAX: Iterator * Begin(ListHandle *, Iterator *);

PARAMETER1:		Pointer to the ListHandle
PARAMETER2:		Pointer to the Iterator

DESCRIPTION:	This function initializes an Iterator to the first element
					in a given list.

RETURN VALUE:	Pointer to Iterator (parameter 2)
END DESCRIPTION **********************************************************/

_ll_debug
Iterator * Begin(ListHandle * list, Iterator * it)
{
	if(list == NULL || it == NULL) {
		return NULL;
	}

	it->node = list->head;
	it->list = list;
	return it;
}

/*** Beginheader End */
Iterator * End(ListHandle *, Iterator *);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
End								<LINKEDLIST.LIB>

SYNTAX: Iterator * End(ListHandle *, Iterator *);

PARAMETER1:		Pointer to the ListHandle
PARAMETER2:		Pointer to the Iterator

DESCRIPTION:	This function initializes an Iterator to the last element
					in a given list.

RETURN VALUE:	Pointer to Iterator (parameter 2)
END DESCRIPTION **********************************************************/

_ll_debug
Iterator * End(ListHandle * list, Iterator * it)
{
	if(list == NULL || it == NULL) {
		return NULL;
	}

	it->node = list->tail;
	it->list = list;
	return it;
}

/*** Beginheader Next */
Iterator * Next(Iterator *);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
Next								<LINKEDLIST.LIB>

SYNTAX: Iterator * Next(Iterator *);

PARAMETER1:		Pointer to the Iterator

DESCRIPTION:	This function moves the iterator to the next element in the
					list.

RETURN VALUE:	Pointer to Iterator (parameter 1)
END DESCRIPTION **********************************************************/

_ll_debug
Iterator * Next(Iterator * it)
{
	if(it == NULL || it->list == NULL) {
		return NULL;
	}

	if(it->node == NOT_FOUND) {
		return it;
	}

	it->node = (it->list->node_start)[it->node].next;
	return it;
}

/*** Beginheader Prev */
Iterator * Prev(Iterator *);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
Prev								<LINKEDLIST.LIB>

SYNTAX: Iterator * Prev(Iterator *);

PARAMETER1:		Pointer to the Iterator

DESCRIPTION:	This function moves the iterator to the previous element in
					the list.

RETURN VALUE:	Pointer to Iterator (parameter 1)
END DESCRIPTION **********************************************************/

_ll_debug
Iterator * Prev(Iterator * it)
{
	if(it == NULL || it->list == NULL) {
		return NULL;
	}

	if(it->node == NOT_FOUND) {
		return it;
	}

	it->node = (it->list->node_start)[it->node].prev;
	return it;
}

/*** Beginheader Insert */
Iterator * Insert(Iterator *, const far void *);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
Insert							<LINKEDLIST.LIB>

SYNTAX: Iterator * Insert(Iterator *, const far void *);

PARAMETER1:		Pointer to the Iterator

DESCRIPTION:	This function inserts an element BEFORE the element pointed
					to by the iterator.  It then points itself to the new element.

RETURN VALUE:	Pointer to Iterator (parameter 1)
END DESCRIPTION **********************************************************/

_ll_debug
Iterator * Insert(Iterator * it, const far void * ins)
{
	if(it == NULL || it->list == NULL) {
		return NULL;
	}
	if(ins == NULL) {
		return it;
	}

	it->node = _insert_node(it->list, it->node, ins);
}

/*** Beginheader Get */
far void * Get(Iterator *);
/*** Endheader */

/* START FUNCTION DESCRIPTION ********************************************
Get								<LINKEDLIST.LIB>

SYNTAX: far void * Get(Iterator *);

PARAMETER1:		Pointer to the Iterator

DESCRIPTION:	This function returns the data pointed to by the supplied
					iterator or NULL if no data is found.

RETURN VALUE:	Pointer to Iterator (parameter 1)
END DESCRIPTION **********************************************************/

_ll_debug
far void * Get(Iterator * it)
{
	if(it == NULL || it->list == NULL || it->node == NOT_FOUND) {
		return (far void *)NULL;
	}

	return (it->list->node_start)[it->node].data;
}

/*** Beginheader Delete */
Iterator * Delete(Iterator *);
/*** Endheader */

/* START FUNCTION DESCRIPTION ********************************************
Delete							<LINKEDLIST.LIB>

SYNTAX: Iterator *Delete(Iterator *);

PARAMETER1:		Pointer to the Iterator

DESCRIPTION:	This function deletes the node pointed to by the iterator.
					The iterator is set to the next element in the list.

RETURN VALUE:	Pointer to Iterator (parameter 1)
END DESCRIPTION **********************************************************/

_ll_debug
Iterator * Delete(Iterator * it)
{
	if(it == NULL || it->list == NULL || it->node == NOT_FOUND) {
		return;
	}

	it->node = _delete_node(it->list, it->node);
	return it;
}


/*** Beginheader _insert_node */
int _insert_node(ListHandle *, int , far void * );
/*** Endheader */

_ll_debug
int _insert_node(ListHandle * list, int next, far void * ins)
{
	int prev, which;
	_listnode far * nodes;

	if(list->garbage == NOT_FOUND)
		return NOT_FOUND;	// No space left!

	nodes = list->node_start;
	which = list->garbage;
	list->garbage = nodes[which].next;
	if(next == NOT_FOUND)
		prev = list->tail;
	else
		prev = nodes[next].prev;

	// insert which between prev and next
	nodes[which].prev = prev;
	nodes[which].next = next;

	if(prev == NOT_FOUND)
		list->head = which;
	else
		nodes[prev].next = which;

	if(next == NOT_FOUND)
		list->tail = which;
	else
		nodes[next].prev = which;

	// insert node
	_f_memcpy(nodes[which].data, ins, list->data_size);

	return which;
}

/*** Beginheader _delete_node */
int _delete_node(ListHandle *, int );
/*** Endheader */

_ll_debug
int _delete_node(ListHandle * list, int which)
{
	int prev, next;
	_listnode far * nodes;
	nodes = list->node_start;

	prev = nodes[which].prev;
	next = nodes[which].next;

	if(prev == NOT_FOUND) {
		list->head = next;
	}
	else {
		nodes[prev].next = next;
	}

	if(next == NOT_FOUND) {
		list->tail = prev;
	}
	else {
		nodes[next].prev = prev;
	}

	nodes[which].next = list->garbage;
	list->garbage = which;

	return next;
}

/*** Beginheader */
#endif
/*** Endheader */

