/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*
 *    WIFI_COMMON.lib
 *
 *    Common functions for the Rabbit WiFi devices.  This includes
 *		register definitions, register accessors, radio accessors,
 *		debugging functions, and some hardware initialization.
 *
 *
 */

/*** BeginHeader */
#ifndef __WIFI_COMMON_LIB
#define __WIFI_COMMON_LIB


// Register addresses for 802.11 WiFi interface
#define	NCV0R    	0x0000   // Version (reduced from 4 to 2 registers)
#define	NCV1R    	0x0001
#define	NCGC0R   	0x0004   // General Control
#define	NCGC1R   	0x0005
#define	NCGC2R   	0x0006
#define	NCGC3R   	0x0007
#define  NCGS0R   	0x0008   // General Status
#define	NCGS1R   	0x0009
#define	NCGS2R   	0x000a
#define	NCGS3R   	0x000b
#define	NCRSSI0R 	0x000c   // RSSI
#define	NCRSSI1R 	0x000d
#define	NCRSSI2R 	0x000e
#define	NCRSSI3R 	0x000f
#define	NCIMR    	0x0010   // Interrupt Mask (reduced from 4 to 1 register)
#define	NCISR    	0x0014   // Interrupt Status (reduced from 4 to 1 register)
#define	NCSPID0R  	0x0018   // SPI Data (communication with radio)
#define	NCSPID1R  	0x0019
#define	NCSPID2R  	0x001a
#define	NCSPID3R  	0x001b
#define	NCSPICR		0x001c	// SPI Control (communication with radio)
										// (reduced from 4 to 1 register)
#define	NCDFR   		0x0020   // Data FIFO (reduced from 4 to 1 register)
#define	NCC1R0		0x0028	// Configuration-1
#define	NCC1R1		0x0029
#define	NCC1R2		0x002a
#define	NCC1R3		0x002b
#define	NCC2R0		0x002c	// Configuration-2
#define	NCC2R1		0x002d
#define	NCC2R2		0x002e
#define	NCC2R3		0x002f
#define	NCAFR			0x0030	// AES FIFO (reduced from 4 to 1 register)
#define	NCAMR			0x003b	// AES Mode (reduced from 4 to 1 register)
#define	NCOCR0		0x003c	// Output Control
#define	NCOCR1		0x003d
#define	NCOCR2		0x003e
#define	NCOCR3		0x003f
#define	NCSTAID0R	0x0040	// Station (STA) Identification
#define	NCSTAID1R	0x0041
#define	NCSTAID2R	0x0042
#define	NCSTAID3R	0x0043
#define	NCSTAID4R	0x0044
#define	NCSTAID5R	0x0045
#define	NCBSSID0R   0x0048   // BSS Identification
#define	NCBSSID1R   0x0049
#define	NCBSSID2R   0x004a
#define	NCBSSID3R   0x004b
#define	NCBSSID4R   0x004c
#define	NCBSSID5R   0x004d
#define	NCOFDMBRSR	0x0050	// OFDM Basic Rate Set
#define	NCPSKBRSR	0x0051	// PSK Basic Rate Set
#if _WIFI_SILKEN_DAC
	#define NCPSKBRSR_SET	0x03		// PSK-only
#else
	#define NCPSKBRSR_SET	0x0F		// PSK and CCK allowed
#endif
#define  NCTXINTR    0x0052
#define	NCSSIDLR		0x0053	// SSID Length
#define	NCBO0R		0x0056	// Backoff
#define	NCBO1R		0x0057
#define	NCDTIMPR		0x0058	// DTIM Period
#define	NCCFPPR		0x0059	// CFP Period
#define	NCLI0R		0x005a	// Listen Interval
#define	NCLI1R		0x005b
#define	NCBI0R		0x005c	// Beacon Interval
#define	NCBI1R		0x005d
#define	NCCFPMD0R	0x005e	// CFP MaxDuration / ATIM Period
#define	NCCFPMD1R	0x005f
#define	NCMACSR		0x0063	// MAC Status
#define	NCMACCR 		0x0067	// MAC Control
#define	NCRBO0R		0x006a	// Remaining Backoff
#define	NCRBO1R		0x006b
#define	NCBFR			0x006d	// Beacon Filter
#define	NCBBO0R		0x006e	// Beacon Backoff
#define	NCBBO1R		0x006f
#define	NCSSIDR		0x0080	// SSID Registers (64 bytes starting at this
							  			// address)

// Rabbit 6000-specific registers
#define	NCCC0R		0x0400	// Clock Control
#define	NCCC1R		0x0401
#define	NCSTAR		0x0404	// Search Threshhold A
#define	NCLTAR		0x0405	//	Loss Threshold A
#define	NCSTBR		0x0406	// Search Threshhold B
#define	NCCEAR		0x0407	//	CE Threshold
#define	NCCTTR		0x0408	// CCA Trigger Threshold
#define	NCCHTR		0x0408	// Hold Threshold
#define	NCCCACR		0x040A	// CCA Control
#define	NCTOC0R		0x040C	 // Tx OFDM Gain
#define	NCTOC1R		0x040C
#define	NCTPCR		0x040E	// Tx PSK Gain
#define	NCTER			0x040F	// Tx Gain Enable
#define	NCTXAR		0x0410	// Tx Advance
#define	NCTXDR		0x0411	// Tx Delay
#define	NCPAAR		0x0412	//	PA Advance
#define	NCPADR		0x0413	//	PA Delay


#define WIFI_FPGA_TIMEOUT 2	// Number of seconds to wait for FPGA
										// initialization
/*** EndHeader */

/*** BeginHeader _wc_write32, _wc_and32, _wc_or32, _wc_write16, _wc_write8,
					_wc_or8, _wc_and8, _wc_read32, _wc_read16, _wc_read8,
					_wc_locklevel */
// global defines
#ifdef WIFI_COMMON_DEBUG
   #define _wifi_common_debug __debug
#else
   #define _wifi_common_debug __nodebug
#endif

// Used for debugging purposes with captures in DINI tool
#ifdef WIFI_MARKERS
	#define MARK7F2(val) asm ld a,val $ ioi ld (0x7F2),a;
#else
	#define MARK7F2(val)
#endif

#ifndef WIFIG_NET_IP
   // Interrupt priority for network port C.
   #define WIFIG_NET_IP   1
#endif

// Set I/O access parameters depending on board type
#ifdef RABBIT_EARS
	#define _wifi_iop_		ioe
	#define _wifi_iobase_	0xC0
#else
	#define _wifi_iop_		ioi
	#define _wifi_iobase_	0x0A
#endif


// Enable Network Port Register initialization value
#define	_WIFI_ENPR_ENAB			(0x80|WIFIG_NET_IP)
#define	_WIFI_ENPR_DISAB			0x80

// General control register bits
#define	_WIFI_GEN_RXEN				0x00000001		// Receive enable
#define	_WIFI_GEN_ANTDIV			0x00000002		// Antenna diversity
#define	_WIFI_GEN_ANTSEL			0x00000004		// Antenna select
#define	_WIFI_GEN_5GEN				0x00000008		// 5 GHz band enable
#define	_WIFI_GEN_SHPRE			0x00000010		// Transmit short preamble
#define	_WIFI_GEN_RXFIFORST		0x00000020		// Receive FIFO reset
#define	_WIFI_GEN_TXFIFORST		0x00000040		// Transmit FIFO reset
#define	_WIFI_GEN_TXHOLD			0x00000080		// Transmit FIFO hold
#define	_WIFI_GEN_BEACEN			0x00000100		// Beacon enable
#define	_WIFI_GEN_MACEN			0x00000200		// MAC load enable
#define	_WIFI_GEN_DSPEN			0x00000400		// DSP load enable
#define	_WIFI_GEN_LOADEN			0x00000800		// Assist load enable
#define	_WIFI_GEN_TXFIFOEMPTY	0x00004000		// Transmit FIFO empty
#define	_WIFI_GEN_TXFIFOFULL		0x00008000		// Transmit FIFO full

#define	_WIFI_GEN_RESET		0x527f0000		// Reset state
#define	_WIFI_GEN_INIT			0x13700000		// Initial state

// General status register bits
#define 	_WIFI_STAT_LOCK		0x00000008		// LOCK signal
#define	_WIFI_STAT_RXFE		0x00000010		// Receive FIFO empty

// AES status register bits
#define	_WIFI_AES_EMPTY		0x00010000		// AES receive FIFO empty
#define	_WIFI_AES_FULL			0x00020000		// AES transmit FIFO full
#define	_WIFI_AES_BUSY			0x00040000		// AES engine busy
#define	_WIFI_AES_MIC			0x00080000		// AES MIC correct

// Interrupt mask and status register bits
#define	_WIFI_INTR_RXFIFO		0x01		// Receive FIFO not empty
#define	_WIFI_INTR_TXEND		0x02		// Transmit complete
#define	_WIFI_INTR_TIMEOUT	0x04		// CTS/ACK receive timeout
#define	_WIFI_INTR_ABORT		0x08		// CTS transmit abort
#define	_WIFI_INTR_TBTT		0x10		// Beacon transmission time
#define	_WIFI_INTR_ATIM		0x20		// ATIM interval end
#define	_WIFI_INTR_RXOVERRUN	0x40		// Receive FIFO overrun
#define  _WIFI_INTR_PKTARRIVED 0x80		// Complete packet arrived

// Use the RX FIFO not empty interrupt as the receive interrupt
#define  _WIFI_INTR_RX		_WIFI_INTR_RXFIFO

// SPI Control bits
#define	_WIFI_SPI_CTRL_CLKINV	0x20			// SPI clock invert
#define	_WIFI_SPI_CTRL_ENINV		0x40 			// SPI enable invert
// SPI command length
#define	_WIFI_SPI_CTRL_LEN      24

// MAC control register bits
#define	_WIFI_CTRL_TXREQ		0x01		// Transmit request
#define	_WIFI_CTRL_AUTOTXDIS	0x02		// Auto-transmit disable
#define	_WIFI_CTRL_BEACONTX	0x04		// Beacon transmit enable
#define	_WIFI_CTRL_PROMISC	0x08		// Promiscuous mode
#define	_WIFI_CTRL_IBSS		0x10		// IBBS mode


#ifndef _WIFI_RX_TEST_PACKET_SIZE
#define _WIFI_RX_TEST_PACKET_SIZE 1025
#endif

// Following functions are assembler and must not be called by C code (unless
// otherwise noted) owing to non-standard register conventions.
__root long _wc_write32(int reg, long value);	//<- this one OK to call from C
															// (wrapper for next)
__root word _wc_write16(int reg, word value);	//<- this one OK to call from C
															// (wrapper for next)
__root word _wc_write8(int reg, word value);	//<- this one OK to call from C
															// (wrapper for next)
__root void _wc_modreg_set_L(void);
__root void _wc_modreg_set_IY(void);
__root long _wc_or32(int reg, long value);	//<- this one OK to call from C
														// (wrapper for next)
__root word _wc_or8(int reg, word value);	//<- this one OK to call from C
														// (wrapper for next)
__root void _wc_modreg_or_L(void);
__root void _wc_modreg_or_IY(void);
__root long _wc_and32(int reg, long value);	//<- this one OK to call from C
														// (wrapper for next)
__root word _wc_and8(int reg, word value);	//<- this one OK to call from C
														// (wrapper for next)
__root void _wc_modreg_and_L(void);
__root void _wc_modreg_and_IY(void);
__root void _wc_modreg_L(void);
__root void _wc_modreg_iy(void);

__root long _wc_read32(int reg);	//<- this one OK to call from C or asm
											// (asm callers put reg parm in L)
__root word _wc_read16(int reg);	//<- this one OK to call from C or asm
											// (asm callers put reg parm in L)
__root word _wc_read8(int reg);		//<- this one OK to call from C or asm
											// (asm callers put reg parm in L)
__root long _wc_read32_swap(int reg);	//<- this one OK to call from C or asm
												// (asm callers put reg parm in L)
												// It swaps the endianness of the return
												// value.

int _wc_locklevel;

/*** EndHeader */

#ifdef WIFIG_LOG
char __wlog_data[6];
#asm __root __nodebug
__wlog_wr8_iy_L::
	ld (__wlog_data),iy
	ld (__wlog_data+2),hl
	push	jkhl
	ld	hl,3
	jr	.dolog
__wlog_wr8_iy_a::
	ld (__wlog_data),iy
	ld (__wlog_data+2),a
	push	jkhl
	ld	hl,3
	jr	.dolog
__wlog_wr16_iy_hl::
	ld (__wlog_data),iy
	ld (__wlog_data+2),hl
	push	jkhl
	ld	hl,4
	jr	.dolog
__wlog_wr32_iy_bcde::
	ld (__wlog_data),iy
	ld (__wlog_data+2),bcde
	push	jkhl
	ld	hl,6
.dolog:
	push	bcde
	push	iy
	push	af
	push	px
	push	py
	push	pz
	ldl	px,__wlog_data
	push	px
	push	hl ; length
	ld		hl,_WIFI_LOG_WREG
	push	hl
	lcall	__wlog
	add	sp,8
	pop	pz
	pop	py
	pop	px
	pop	af
	pop	iy
	pop	bcde
	pop	jkhl
	ret

#endasm
#endif

#asm __root _wifi_common_debug
; Either store, OR in or AND in the value in BCDE with the 32-bit wifi I/O
; register at (IY) or 0x0A00 + L depending on the entry point.
; For the entries without 'set', 'and' or 'or' in their name,
;    A bit 7 is set to OR in the data, else A bit 6 is set to AND in the data,
;    else just stores.
; On return, BCDE contains the new register value, and IY is the register
; address.
;
_wc_write8::
   ld	 h, _wifi_iobase_
   ld	 iy, hl
   ld	 hl,(sp+4)
_wc_modreg_set8_IY::
  	#ifdef WIFIG_LOG
   call	__wlog_wr8_iy_L
  	#endif
	_wifi_iop_	ld (iy),L
	ret
_wc_or8::
   ld	 h, _wifi_iobase_
   ld	 iy, hl
   ld	 hl,(sp+4)
   push  ip
   ipset WIFIG_NET_IP
	_wifi_iop_	ld a,(iy)
	or		L
.updte:
	pop ip
	_wifi_iop_	ld (iy),a
  	#ifdef WIFIG_LOG
   call	__wlog_wr8_iy_a
  	#endif
	ld		L,a
	ld		h,0
	ret
_wc_and8::
   ld	 h, _wifi_iobase_
   ld	 iy, hl
   ld	 hl,(sp+4)
   push  ip
   ipset WIFIG_NET_IP
	_wifi_iop_	ld a,(iy)
	and	L
	jr		.updte
_wc_write16::
	ld  bcde,(sp+4)	; only use DE out of this, but faster than 2-byte load
   ld	 h, _wifi_iobase_
   ld	 iy, hl
_wc_modreg_set16_IY::
	ex		de,hl
  	#ifdef WIFIG_LOG
   call	__wlog_wr16_iy_hl
  	#endif
	_wifi_iop_	ld (iy),hl
	ret
_wc_write32::
	ld  bcde,(sp+4)
_wc_modreg_set_L::
   ld	 h, _wifi_iobase_
   ld	 iy, hl
_wc_modreg_set_IY::
  	#ifdef WIFIG_LOG
   call	__wlog_wr32_iy_bcde
  	#endif
	_wifi_iop_	ld (iy),bcde
	ret
_wc_or32::
	ld  bcde,(sp+4)
_wc_modreg_or_L::
   ld	 h, _wifi_iobase_
   ld	 iy, hl
	jr  _wc_modreg_or_IY
_wc_and32::
	ld  bcde,(sp+4)
_wc_modreg_and_L::
   ld	 h, _wifi_iobase_
   ld	 iy, hl
	jr  _wc_modreg_and_IY
_wc_modreg_L::
	; Prime IY with I/O address
   ld	 h, _wifi_iobase_
   ld	 iy, hl
_wc_modreg_iy::
	rra
	jr		c,_wc_modreg_or_IY
	rra
	jr		nc,.do_splat
_wc_modreg_and_IY::
	push  ip
	ipset WIFIG_NET_IP
	_wifi_iop_	ld jkhl,(iy)
	and	jkhl,bcde
	ex		jkhl,bcde
	pop	ip
	_wifi_iop_	ld (iy),bcde
  	#ifdef WIFIG_LOG
   call	__wlog_wr32_iy_bcde
  	#endif
	ret
_wc_modreg_or_IY::
	push	ip
	ipset WIFIG_NET_IP
	_wifi_iop_	ld jkhl,(iy)
	or		jkhl,bcde
	ex		jkhl,bcde
	pop	ip
.do_splat:
  	#ifdef WIFIG_LOG
   call	__wlog_wr32_iy_bcde
  	#endif
	_wifi_iop_	ld (iy),bcde
	ret

_wc_read32::
   ld	 h, _wifi_iobase_
   _wifi_iop_   ld bcde,(hl)
   ret
_wc_read16::
   ld	 h, _wifi_iobase_
   _wifi_iop_   ld hl,(hl)
   ret
_wc_read8::
   ld	 h, _wifi_iobase_
   _wifi_iop_   ld a,(hl)
   clr	hl
   ld		L,a
   ret

_wc_read32_swap::
   ld	 h, _wifi_iobase_
   _wifi_iop_   ld bcde,(hl)
   ld		a,b
   ld		b,e
   ld		e,a
   ld		a,c
   ld		c,d
   ld		d,a
   ret

#endasm


/*** BeginHeader _wifi_WriteRF */
void _wifi_WriteRF (uint8 addr, uint32 data);
/*** EndHeader */

//
// Write data to an RF tranceiver register
// @param addr Register address (4 bits)
// @param data Data to write (20 bits, bit reversed)
//
_wifi_common_debug
void _wifi_WriteRF (uint8 addr, uint32 data)
{
#asm _wifi_common_debug
		ld		bcde,(sp+@sp+data)
	; Shift the address left 4 bits to OR it in with the first nibble of data
      or		a						; Clear carry flag
		ld		hl,(sp+@sp+addr)
      ld		a,l
      rla
      rla
      rla
      rla
      or		c
	; Load the SPI register and frighten miss Muffet away
      ld		c,a
      ld		L,NCSPID0R
      call	_wc_modreg_set_L	; BCDE -> reg L
#endasm

	_wifi_waitUS(10);
}

/*** BeginHeader _wc_InitHW_DSP */
void _wc_InitHW_DSP(void);
/*** EndHeader */

_wifi_common_debug
void _wc_InitHW_DSP(void)
{
	// Enable DSP code loading
   _wc_or32(NCGC0R, _WIFI_GEN_DSPEN);

	// Load the DSP code
   _wc_HWWriteFifo(_wifi_dsp_code, sizeof(_wifi_dsp_code));

   // Disable DSP code loading
   _wc_and32(NCGC0R, ~_WIFI_GEN_DSPEN);
}

/*** BeginHeader _wc_InitHW_MACassist */
void _wc_InitHW_MACassist(void);
/*** EndHeader */

_wifi_common_debug
void _wc_InitHW_MACassist(void)
{
	// Enable MAC Assist code loading
   _wc_or32(NCGC0R, _WIFI_GEN_MACEN);

	// Load the MAC Assist code
   _wc_HWWriteFifo(_wifi_macassist_ucode, sizeof(_wifi_macassist_ucode));

   // Disable MAC Assist code loading
   _wc_and32(NCGC0R, ~_WIFI_GEN_MACEN);
}

/*** BeginHeader _wifi_waitUS, _wifi_InitTimer */
/* SJH - _wifi_waitUS() changed to a macro, since all calls used a constant
   parameter.  The macro divides the parameter by 31 to get "ticks" of the
   32768Hz RTC.  The actual routine (now named with a double underscore)
   will wait for the first clock tick, then wait for the number of ticks
   requested.  Thus, the requested time delay will be rounded up to the
   next higher number of ticks, then there will be up to one more tick
   added because of the start time uncertainty.  This is OK for wifi driver
   use, since it is harmless to wait longer than the requested amount.
   These wait loops are only used in initialization and when changing channels.
   The advantage of changing to RTC ticks is that the timer does not need
   an initial calibration or knowledge of the current CPU speed.  It speeds up
   overall initialization time and lowers energy use.

	_wifi_InitTimer() is now a stub routine.
*/
#define _wifi_waitUS(usecs) __wifi_waitUS(((unsigned)(usecs)+30u)/31u)
__root void __wifi_waitUS (word ticks);
void _wifi_InitTimer (void);
/*** EndHeader */

word _wifi_timerLoops;	// Loops for 16 usec delay

//
// Delay for usec microseconds
//

#asm __root __nodebug
#if 1
__wifi_waitUS::
	ld		bc,hl		; BC (tick count) is at least 1
	call	.wait_tick
.loop:
	call	.wait_tick
	dwjnz	.loop
	ret
.wait_tick:
	; Note that we don't have to be concerned with asynch clock ripple
	; effects, since we are only reading the RTC to see when it changes.
	ioi	ld (RTC0R),a
	ioi	ld a,(RTC0R)
	ld		L,a		; Initial clock in L
.wtloop:
	ioi	ld (RTC0R),a
	ioi	ld a,(RTC0R)
	cp		L			; Exit loop when clock changes.
	jr		z,.wtloop
	ret
#else
	// Old code, for reference...
_wifi_waitUS::
	ld		de,hl
	ld		bc,(_wifi_timerLoops)
	mulu
	ex		jk,hl
	ld		hl,bc
	srl	4,jkhl
	ld		bcde,-1
.loop:
	add	jkhl,bcde
	jr		c,.loop		; will always carry until 0 -> -1.
	ret
#endif
#endasm

//
// Calibrate the spin loop in _wifi_waitUS()
//
_wifi_common_debug
void _wifi_InitTimer (void)
{
#if 0
	// Old code, for reference...
#ifdef WIFI_CAL_WAIT_US
	_wifi_timerLoops = WIFI_CAL_WAIT_US;
#else
	auto uint32 time;

	// Initial guess
	_wifi_timerLoops = 32;

	// Time 65ms delay using hardware timer
	time = MS_TIMER;
	_wifi_waitUS (65000u);
	time = MS_TIMER - time;

	// Calculate loops for 65ms delay:
	// (initial guess)*(expected time)/(actual time)
	// Round up, since want to err on longer side.
	if (time != 0)
		_wifi_timerLoops = (word)(32uL*65/time) + 1;

#ifdef WIFI_PRINT_CAL_WAIT_US
	printf("\ntime=%lu ms, loops=%u\n", time, _wifi_timerLoops);

	time = MS_TIMER;
	_wifi_waitUS (65000u);
	time = MS_TIMER - time;

	printf("time=%ld ms (should be 65-68)\n", time);
#endif
#endif
#endif
}


/*** BeginHeader _wc_lock, _wc_unlock */
__root int _wc_lock(void);
__root void _wc_unlock(int level);
/*** EndHeader */

#asm __root __nodebug
_wc_lock::
	ld		hl, (_wifi_isr_initialized)
	test	hl
	ret	z						; if WiFi not initialized then just exit . . .

	push	ip
	ipset	3

#ifdef RABBIT_EARS
	; disable WiFi (PE5, rising edge) external interrupt
	ld		a, (I1CRShadow)
	and	~0x03
	ld		(I1CRShadow), a
	ioi	ld (I1CR), a
#else
	; disable WiFi interrupt
	ioi	ld a, (ENPR)
	and	~0x03
	ioi	ld (ENPR), a
#endif

	ld		hl, (_wc_locklevel)
	inc	hl
	test	hl
	jr		z, ._wc_lock_keepOldLevel

	ld		(_wc_locklevel), hl
._wc_lock_keepOldLevel:
	pop	ip
	ret

_wc_unlock::
	push	hl						; save caller's unlock level
	ld		hl, (_wifi_isr_initialized)
	test	hl
	pop	hl						; recover caller's unlock level
	ret	z						; if WiFi not initialized then just exit . . .

	dec	hl						; caller passes incremented level, so dec it here
	push	ip
	ipset	3
	ld		(_wc_locklevel), hl
	test	hl
	jr		nz, ._wc_unlock_exit	; if still locked then don't enable WiFi interrupt

	ld		hl, (_wifi_isr_enabled)
	test	hl
	jr		z, ._wc_unlock_exit	; if disabled then don't enable WiFi interrupt yet

#ifdef RABBIT_EARS
	; enable WiFi (PE5, rising edge) external interrupt
	ld		a, (I1CRShadow)
	and	~0x03
	or		_cexpr(WIFIG_NET_IP)
	ld		(I1CRShadow), a
	ioi	ld (I1CR), a
#else
	; enable WiFi interrupt
	ioi	ld a, (ENPR)
	and	~0x03
	or		_cexpr(WIFIG_NET_IP)
	ioi	ld (ENPR), a
#endif

._wc_unlock_exit:
	pop	ip
	ret

#endasm

/*** BeginHeader __wlog, __wlog_dump, __do_wlog */
__xmem void __wlog(int type, word len, __far void * data);
void __wlog_dump(void);
extern int __do_wlog;		// Init to 0; app should set this to 1 to start
									// logging.
// Define WIFIG_LOG_SIZE to a longword amount of memory to allocate for log.
// If not defined, will allocate the maximum available amount of xmem.
//	#define WIFIG_LOG_SIZE 65536uL
#define _WIFI_LOG_RSSI  0		// RSSI indicator for following Rx packet (dB)
#define _WIFI_LOG_HEADER  1	// Initial Rx packet header read from fifo
#define _WIFI_LOG_DATA  2		// Remainder of rx packet read from fifo
#define _WIFI_LOG_WRITE  3		// Data written to tx fifo
#define _WIFI_LOG_WREG  4		// Data written to non-fifo reg (2 byte address
										// followed by 1,2 or 4 data bytes)
#define _WIFI_LOG_RREG  5		// Data read from non-fifo reg, similar to above.
												// - this is not implemented, since it would
												//   fill the log too quickly
/*** EndHeader */
int __do_wlog;
__far char * __wlog_ptr;
__far char * __wlog_base;
__far char * __wlog_end;

__nodebug void __wlog_reset(void)
{
	auto long xa;
	if (!__wlog_base) {
	#ifdef WIFIG_LOG_SIZE
		xa = WIFIG_LOG_SIZE;
	#else
		xa = xavail(NULL);
	#endif
		__wlog_base = (__far char *)xalloc(xa);
		__wlog_end = __wlog_base + xa;
	}
	__wlog_ptr = __wlog_base;
}

__nodebug __xmem void __wlog(int type, word len, __far void * data)
{
	#GLOBAL_INIT { __wlog_base = 0; __do_wlog = 0; }

	if (!__do_wlog)
		return;
	else if (__do_wlog == 1)
		__wlog_reset(), ++__do_wlog;

	if (__wlog_ptr + (6 + len) >= __wlog_end)
		return;
	*(__far word *)__wlog_ptr = len; __wlog_ptr += 2;
	*(__far int *)__wlog_ptr = type; __wlog_ptr += 2;
	*(__far word *)__wlog_ptr = (word)MS_TIMER; __wlog_ptr += 2;
	_f_memcpy(__wlog_ptr, data, len); __wlog_ptr += len;
}

__nodebug void __wlog_dump(void)
{
	auto __far char * c;
	auto word len;
	auto word x;
	auto int type;
	printf("--------   WLOG DUMP: -----------\n");
	for (c = __wlog_base; c < __wlog_ptr; c += len+6) {
		len = *(__far word *)c;
		type = *(__far word *)(c+2);
      printf("%5u:%s   len: %u\n",
         *(__far word *)(c+4),
         type == _WIFI_LOG_RSSI ? "RSSI" :
         type == _WIFI_LOG_HEADER ? "RX HDR" :
         type == _WIFI_LOG_WREG ?  " ~~~~~~~ WREG" :
         type == _WIFI_LOG_RREG ?  " @~@~@~@ RREG" :
         type == _WIFI_LOG_WRITE ? " ####### SEND" :
           "RX",
         len);
      if (type == _WIFI_LOG_WREG) {
			x = *(__far word *)(c+6);
			switch (len) {
			case 3:
				printf("Addr: %04X  Data: %02X\n", x, c[8]);
				break;
			case 4:
				printf("Addr: %04X  Data: %04X\n", x, *(__far word *)(c+8));
				break;
			case 6:
				printf("Addr: %04X  Data: %08lX\n", x, *(__far long *)(c+8));
				break;
			default:
				printf("Addr: %04X  Data:\n", x); xmem_dump((long)(c+8), len-2);
				break;
			}
      }
      else
      	xmem_dump((long)(c+6), len);
	}
	printf("---------- (remaining space %lu) -----------\n", __wlog_end - c);
}


/*** BeginHeader _wc_HWMemcpy */
void _wc_HWMemcpy (int dst, const char *src, int len);
/*** EndHeader */

//
// Copy memory to/from hardware using 8-bit operations
//
_wifi_common_debug
void _wc_HWMemcpy (int dst, const char *src, int len)
{
#ifdef WIFIG_LOG
	static word stuff[129];
	stuff[0] = dst;
	memcpy(stuff+1, src, len < 256 ? len : 256);
	__wlog(_WIFI_LOG_WREG, (len < 256 ? len : 256)+2, stuff);
#endif
#asm
		ld		hl,(sp+@sp+len)
      cp		hl,0
      jr		z,.done
      ld		bc,hl
      ld		hl,(sp+@sp+dst)
      ld		h,_wifi_iobase_
      ex		de,hl
      ld		hl,(sp+@sp+src)
//_wifi_iop_	ldir
_wifi_cpyloop:
      ld    a,(hl)
_wifi_iop_   ld    (de),a
      inc   hl
      inc   de
      dwjnz _wifi_cpyloop
.done:
#endasm
}

/*** BeginHeader _wc_HWReadFifo_f */
void _wc_HWReadFifo_f (__far void *dst_, int len);
/*** EndHeader */

//
// Copy from receive FIFO
//
_wifi_common_debug
void _wc_HWReadFifo_f (__far void *dst_, int len)
{
#asm
	ld		px,(sp+@sp+dst_)
	ld		hl,(sp+@sp+len)
	ld		bc,hl
	cp		hl,1
	jr		lt,.done
	dec	bc
	srl	2,bcde
	inc	bc				; BC now longword count
	ld		h,_wifi_iobase_
	ld		l,NCDFR
	ld		iy,hl
.loop:
	_wifi_iop_ ld jkhl,(iy)
	ld		(px),jkhl
	ld		px,px+4
	dwjnz	.loop
.done:
#endasm
}


/*** BeginHeader _wc_HWWriteFifo */
void _wc_HWWriteFifo (const __far void *src_, int len);
/*** EndHeader */

//
// Copy to transmit FIFO
//
_wifi_common_debug
void _wc_HWWriteFifo (const __far void *src_, int len)
{
   #ifdef WIFIG_LOG
   __wlog(_WIFI_LOG_WRITE, len, src_);
   #endif
#asm
	ld		px,(sp+@sp+src_)
	ld		hl,(sp+@sp+len)
	test	hl
	jr		z,.done
	ld		bc,hl
	dec	bc
	srl	2,bcde
	inc	bc				; BC now longword count
	ld		h,_wifi_iobase_
	ld		l,NCDFR
	ld		iy,hl
.loop:
	ld		jkhl,(px)
	_wifi_iop_ ld (iy),jkhl
	ld		px,px+4
	dwjnz	.loop
.done:
#endasm
}


/*** BeginHeader _wc_HWWriteFifoR */
__root void _wc_HWWriteFifoR (void * addr, word xpc_val, int len);
/*** EndHeader */

//
// Copy to transmit FIFO
//
_wifi_common_debug
__root void _wc_HWWriteFifoR (void * addr, word xpc_val, int len)
{
#asm
	ld		hl,lxpc
	push	hl
	ld		hl,(sp+@sp+2+xpc_val)
	ld		lxpc,hl
	ld		hl,(sp+@sp+2+len)
	test	hl
	jr		z,.done

	ld		de,3
	dec	hl
	or		hl,de
	ld		bc,hl
	inc	bc				; BC rounded up to multiple of 4

	ld		hl,(sp+@sp+2+addr)
	ld		de,NCDFR+(_wifi_iobase_<<8)
	;ipset 3
	_wifi_iop_	ldisr
	;ipres
.done:

	pop	hl
	ld		lxpc,hl
#endasm
}


/*** BeginHeader _wc_HWDiscardFifo */
void _wc_HWDiscardFifo (int len);
/*** EndHeader */

//
// Read from receive FIFO, and ignore data.  Used when dropping frame because of
// e.g. buffer shortage.
//
_wifi_common_debug
void _wc_HWDiscardFifo (int len)
{
#asm
	ld		hl,(sp+@sp+len)
	ld		bc,hl
	cp		hl,1
	jr		lt,.done
	dec	bc
	srl	2,bcde
	inc	bc				; BC now longword count
	ld		h,_wifi_iobase_
	ld		l,NCDFR
	ld		iy,hl
.loop:
	_wifi_iop_ ld jkhl,(iy)
	dwjnz	.loop
.done:
#endasm
}

/*** BeginHeader _wc_HWReadAES */
void _wc_HWReadAES (__far void *dst_, int len);
/*** EndHeader */

//
// Copy from AES read FIFO
//
_wifi_common_debug
void _wc_HWReadAES (__far void *dst_, int len)
{
	/*
	far uint32 *dst;

   dst = (far uint32 *) dst_;

	while (len > 0)
		if (!(_wc_read32(NCRSSI0R) & _WIFI_AES_EMPTY))
		{
         *dst++ = _wc_read32(NCAFR);
			len -= 4;
		}
	*/
#asm
	ld		px,(sp+@sp+dst_)
	ld		hl,(sp+@sp+len)
	test	hl
	jr		z,.done
	ld		bc,hl
	dec	bc
	srl	2,bcde
	inc	bc				; BC now longword count
	ld		h,_wifi_iobase_
	ld		l,NCAFR
	ld		iy,hl
	ld		d,_wifi_iobase_
	ld		e,NCRSSI2R
.loop:
	_wifi_iop_ ld a,(de)
	bit 0,a				; _WIFI_AES_EMPTY bit
	jr		nz,.loop
	_wifi_iop_ ld jkhl,(iy)
	ld		(px),jkhl
	ld		px,px+4
	dwjnz	.loop
.done:
#endasm
}

/*** BeginHeader _wc_HWWriteAES */
void _wc_HWWriteAES (__far void *src_, int len);
/*** EndHeader */

//
// Copy to AES write FIFO
//
_wifi_common_debug
void _wc_HWWriteAES (__far void *src_, int len)
{
	/*
	uint32 *src;

   src = (uint32 far *) src_;

	while (len > 0)
		if (!(_wc_read32(NCRSSI0R) & _WIFI_AES_FULL))
		{
         _wc_write32(NCAFR, *src++);
			len -= 4;
		}
	*/
#asm
	ld		px,(sp+@sp+src_)
	ld		hl,(sp+@sp+len)
	push	ix
	test	hl
	jr		z,.done
	ld		bc,hl
	dec	bc
	srl	2,bcde
	inc	bc				; BC now longword count
	ld		h,_wifi_iobase_
	ld		l,NCAFR
	ld		iy,hl
	ld		l,NCRSSI2R
	ld		ix,hl
.loop:
	_wifi_iop_ bit 1,(ix) ; _WIFI_AES_FULL bit
	jr		nz,.loop
	ld		jkhl,(px)
	_wifi_iop_ ld (iy),jkhl
	ld		px,px+4
	dwjnz	.loop
.done:
	pop	ix
#endasm
}

/*** BeginHeader _wc_HWWriteAES_R */
__root void _wc_HWWriteAES_R (void * addr, word xpc_val, int len);
/*** EndHeader */

//
// Copy to AES write FIFO
//
_wifi_common_debug
__root void _wc_HWWriteAES_R (void * addr, word xpc_val, int len)
{
	/*
	uint32 *src;

   src = (uint32 far *) addr;

	while (len > 0)
		if (!(_wc_read32(NCRSSI0R) & _WIFI_AES_FULL))
		{
         _wc_write32(NCAFR, *src++);
			len -= 4;
		}
	*/

#asm
	ld		hl,lxpc
   push  hl
	//push	ix
	ld		hl,(sp+@sp+2+xpc_val)
	ld		lxpc,hl
	ld		hl,(sp+@sp+2+len)
	test	hl
	jr		z,.done
	ld		bc,hl

	//dec	bc
	//srl	2,bcde
	//inc	bc				; BC now longword count
	ld		de,3
	dec	hl
	or		hl,de
	ld		bc,hl
	inc	bc          ; BC rounded up to multiple of 4

	ld		hl,(sp+@sp+2+addr)
	//ld		h,_wifi_iobase_
	//ld		l,NCAFR
	//ld		iy,hl
	//ld		l,NCRSSI2R
	//ld		ix,hl
	ld		de,NCAFR+(_wifi_iobase_<<8)
//.loop:
	//_wifi_iop_ bit 1,(ix) ; _WIFI_AES_FULL bit
	//jr		nz,.loop
	//ld		jkhl,(px)
	//_wifi_iop_ ld (iy),jkhl
	//ld		px,px+4
	//dwjnz	.loop
   _wifi_iop_  ldisr
.done:
	//pop	ix
   pop   hl
   ld    lxpc,hl
#endasm
}

/*** BeginHeader */
#endif /* __WIFI_COMMON_LIB */
/*** EndHeader */

