//
// Embedded 802.11b/g wireless network interface
//

/*** BeginHeader hmac_md5_vector */

#use "md5.lib"

#define MD5_MAC_LEN 16

// Use the existing Rabbit implementation
#define  MD5Context	md5_state_t
#define	MD5Init		md5_init
#define	MD5Update	md5_append
#define	MD5Final(a,b)		md5_finish(b,a)


void hmac_md5_vector(uint8 *key, size_t key_len, size_t num_elem,
		     uint8 *addr[], size_t *len, uint8 *mac);

/*** EndHeader */
/*
 * MD5 hash implementation and interface functions
 * Copyright (c) 2003-2004, Jouni Malinen <jkmaline@cc.hut.fi>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * Alternatively, this software may be distributed under the terms of BSD
 * license.
 *
 * See README and COPYING for more details.
 */

/* HMAC code is based on RFC 2104 */
_wifig_nodebug
void hmac_md5_vector(uint8 *key, size_t key_len, size_t num_elem,
		     uint8 *addr[], size_t *len, uint8 *mac)
{
	auto MD5Context context;
	auto uint8 k_ipad[65]; /* inner padding - key XORd with ipad */
	auto uint8 k_opad[65]; /* outer padding - key XORd with opad */
	auto uint8 tk[16];
	int i;

   /* if key is longer than 64 bytes reset it to key = MD5(key) */
   if (key_len > 64) {
		MD5Init(&context);
		MD5Update(&context, key, key_len);
		MD5Final(tk, &context);

		key = tk;
		key_len = 16;
	}

	/* the HMAC_MD5 transform looks like:
	 *
	 * MD5(K XOR opad, MD5(K XOR ipad, text))
	 *
	 * where K is an n byte key
	 * ipad is the byte 0x36 repeated 64 times
	 * opad is the byte 0x5c repeated 64 times
	 * and text is the data being protected */

	/* start out by storing key in pads */
	memset(k_ipad, 0, sizeof(k_ipad));
	memset(k_opad, 0, sizeof(k_opad));
	memcpy(k_ipad, key, key_len);
	memcpy(k_opad, key, key_len);

	/* XOR key with ipad and opad values */
	for (i = 0; i < 64; i++) {
		k_ipad[i] ^= 0x36;
		k_opad[i] ^= 0x5c;
	}

	/* perform inner MD5 */
	MD5Init(&context);                   /* init context for 1st pass */
	MD5Update(&context, k_ipad, 64);     /* start with inner pad */
	/* then text of datagram; all fragments */
	for (i = 0; i < num_elem; i++) {
		MD5Update(&context, addr[i], len[i]);
	}
	MD5Final(mac, &context);             /* finish up 1st pass */

	/* perform outer MD5 */
	MD5Init(&context);                   /* init context for 2nd pass */
	MD5Update(&context, k_opad, 64);     /* start with outer pad */
	MD5Update(&context, mac, 16);        /* then results of 1st hash */
	MD5Final(mac, &context);             /* finish up 2nd pass */
}




