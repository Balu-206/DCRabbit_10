//
// Embedded 802.11 wireless network interface
// MAC driver-specific API
// Copyright 2007 Rabbit Semiconductor
//
/*** BeginHeader */
#ifndef _WIFI_MAC_API_LIB
#define _WIFI_MAC_API_LIB
/*** EndHeader */

/*** BeginHeader */
#use "wifi_wln_api.lib"

//
// Operating statistics
//
// This is the full structure returned by wln_get_stats().
// This structure overlays wln_stats and contains additional counters.
//
typedef struct {
	// Standard counters matching wln_stats
	int txBytes;					// Bytes transmitted
	int txFrames;					// Directed frames transmitted
	int txBCFrames;				// Broadcast frames transmitted
	int rxBytes;					// Bytes received
	int rxFrames;					// Directed frames received
	int rxBCFrames;				// Broadcast frames received

	// Additional transmit counters
	int txRTS;						// RTS frames
	int txRetries;					// Retried frames
	int txDropRetry;				// Dropped, exceeded retry limit
	int txDropBC;					// Dropped, broadcast error
	int txDropAssoc;				// Dropped, not associated

	// Additional receive counters
	int rxRTS;						// RTS frames
	int rxRetries;					// Retried frames
	int rxDropSize;				// Dropped, too large
	int rxDropBuffer;				// Dropped, out of buffers
	int rxDropInvalid;			// Dropped, invalid frame
	int rxDropDup;					// Dropped, duplicate frame
	int rxDropAge;					// Dropped, lifetime limit
	int rxDropDecrypt;			// Dropped, decryption error
	int rxDropOverrun;			// Dropped, hardware overrun
	int rxDropReplay;				// Dropped, replay detected
	int rxDropMICFail;			// Dropped, MIC check failed

   // Manufacturing Rx Counter and Test Control
   int rxPktCounter;
   int rxTestCntrl;
} WiFiMacStats;

// Additional MAC events
enum {
	_WIFI_MAC_EVT_RX_INTR = 100,		// Receive interrupt
	_WIFI_MAC_EVT_TX_INTR,				// Transmit complete interrupt
};

// Function return codes
typedef enum {
	_WIFI_ERR_OK = 0,						// Success
	_WIFI_ERR_SIZE,						// Data size error
	_WIFI_ERR_MEMORY,						// Out of memory
	_WIFI_ERR_ASSOC,						// Not associated
	_WIFI_ERR_ENCRYPT,					// Encryption error
	_WIFI_ERR_LOAD,						// FPGA load error
   _WIFI_ERR_PLL,							// MAC PLL error
} WiFiMacReturn;

// Maximum allowed txpower settings
#define _WIFI_MAC_TXPOWER_MAX 15

// Normal txpower settings
#define _WIFI_MAC_TXPOWER_DEFAULT 8

// Maximum rxsignal strength we expect to see (this is in dB)
//#define _WIFI_MAC_RSSI_MAX 0x4f
// This is rather arbitrary, so make it a value which assures no underflow
// when using unsigned 8-bit math.  The max LNA/VGA gain is
// 3*15dB + 31*2dB = 45+62 = 107dB
#define _WIFI_MAC_RSSI_MAX 107


/*** EndHeader */

/*** BeginHeader */
#endif // _WIFI_MAC_API_LIB
/*** EndHeader */

