/*
 *    bsdname.lib
 *    Copyright (C) Rabbit Semiconductor, Inc. All rights reserved.
 *    Portions used with permission of Erick Engelke.
 *
 *    BSD-style socket info routines
 *
 *    These are not maintained.  Don't use for new programs until
 *    true BSD compatibility is announced.
 */

/*
 * provide some typical BSD UNIX functionality
 */

/*** BeginHeader _chk_socket */
int _chk_socket( sock_type *s );
/*** EndHeader */

/*
 * chk_socket - determine whether a real socket or not
 */
_net_nodebug
int _chk_socket( sock_type *s )
{
#ifndef DISABLE_TCP
   if (_IS_TCP_SOCK(s))
      return 2;
#endif
#ifndef DISABLE_UDP
   if (_IS_UDP_SOCK(s))
   	return 1;
#endif
#ifdef USING_SSL
   if (_IS_SSL_SOCK(s))
   	return 3;
#endif
   return 0;
}


/*** BeginHeader getpeername */

/* START FUNCTION DESCRIPTION ********************************************
getpeername                            <BSDNAME.LIB>

SYNTAX: int getpeername(  sock_type *s, void *dest, int *len );

KEYWORDS:		tcpip, bsd, socket, dns

DESCRIPTION: 	get the information for the other side of the socket

PARAMETER1: 	socket
PARAMETER2: 	sockaddr structure for the socket
PARAMETER3: 	max length of the sockaddr structure accepted

RETURN VALUE:  0 for success;
					-1 for failure.

SEE ALSO:      getsockname, setdomainname, gethostname, sethostname,
               getdomainname, bsd.c

END DESCRIPTION **********************************************************/

int getpeername( sock_type *s, void *dest, int *len );
/*** EndHeader */

__nodebug int getpeername( sock_type *s, void *dest, int *len )
{
   auto struct sockaddr temp;
   auto int ltemp;

   memset( &temp, 0, sizeof( struct sockaddr ));
   temp.s_ip = s->tcp.hisaddr;
   temp.s_port = s->tcp.hisport;

   if(!s->tcp.hisaddr || !s->tcp.hisport || ! _chk_socket( s )) {
      if(len) *len = 0;
      return( -1 );
   }

   /* how much do we move */
   ltemp = (len) ? *len : sizeof( struct sockaddr );
   if(ltemp > sizeof( struct sockaddr)) ltemp = sizeof( struct sockaddr );
   memcpy( dest, &temp, ltemp );

   if(len) *len = ltemp;
   return( 0 );
}

/*** BeginHeader getsockname */

/* START FUNCTION DESCRIPTION ********************************************
getsockname                            <BSDNAME.LIB>

SYNTAX: int getsockname(  sock_type *s, void *dest, int *len );

KEYWORDS:		tcpip, bsd, socket, dns

DESCRIPTION: 	get information for our side of the socket

PARAMETER1: 	socket
PARAMETER2: 	sockaddr structure for the socket
PARAMETER3: 	max length of the sockaddr structure accepted

RETURN VALUE:  0 for success;
					-1 for failure.

SEE ALSO:      getpeername, setdomainname, gethostname, sethostname,
               getdomainname, bsd.c

END DESCRIPTION **********************************************************/

int getsockname(  sock_type *s, void *dest, int *len );

/*** EndHeader */

__nodebug int getsockname(  sock_type *s, void *dest, int *len )
{
   auto struct sockaddr temp;
   auto int ltemp;
   auto word iface;

   memset( &temp, 0, sizeof( struct sockaddr ));
   arpcache_iface(s->tcp.sath, &iface);
	//temp.s_ip = s->tcp.myaddr;
	temp.s_ip = _if_tab[iface].ipaddr;
   temp.s_port = s->tcp.myport;

   if(!s->tcp.hisaddr || !s->tcp.hisport || ! _chk_socket( s )) {
      if(len) *len = 0;
      return( -1 );
   }

   /* how much do we move */
   ltemp = (len) ? *len : sizeof( struct sockaddr );
   if(ltemp > sizeof( struct sockaddr)) ltemp = sizeof( struct sockaddr );
   memcpy( dest, &temp, ltemp );

   if(len) *len = ltemp;
   return( 0 );
}

/*** BeginHeader getdomainname */

/* START FUNCTION DESCRIPTION ********************************************
getdomainname                          <BSDNAME.LIB>

SYNTAX: char *getdomainname( char *name, int length );

KEYWORDS:		tcpip, bsd, domain, dns

DESCRIPTION: 	get the domain portion of our name

PARAMETER1: 	buffer to place the domain name
PARAMETER2: 	max length of the domain name

RETURN VALUE:  If buffer is NULL or length is 0, returns the internal domain
					name buffer (do not modify!) or an empty string (not NULL) if
					the domain name has not been set.

					If the buffer is large enough to hold the domain name, it is
					copied into the buffer.  If not, the buffer is set to an empty
					string.  Paramter 1 (the buffer) is returned after being
					modified.

SEE ALSO:      setdomainname, gethostname, sethostname, getpeername,
               getsockname, bsd.c

END DESCRIPTION **********************************************************/

char *getdomainname( char *name, int length );
/*** EndHeader */

__nodebug char *getdomainname( char *name, int length )
{
   if( length && name )
   {
      if( ! def_domain || (length < strlen( def_domain ) + 1) )
         *name = 0;
      else
         strcpy( name, def_domain );
      return( name );
   }
   return( def_domain ? def_domain : "" );
}

/*** BeginHeader setdomainname */

/* START FUNCTION DESCRIPTION ********************************************
setdomainname                          <BSDNAME.LIB>

SYNTAX: char *setdomainname( char *name );

KEYWORDS:		tcpip, bsd, domain, dns

DESCRIPTION: 	set the domain portion of our name

PARAMETER1: 	the new domain name (expects unchanging static buffer)

RETURN VALUE:  name

SEE ALSO:      getdomainname, sethostname, gethostname, getpeername,
               getsockname, bsd.c

END DESCRIPTION **********************************************************/

char *setdomainname( char *string );
/*** EndHeader */

__nodebug char *setdomainname( char *string )
{
   return( def_domain = string );
}

/*** BeginHeader gethostname */

/* START FUNCTION DESCRIPTION ********************************************
gethostname                            <BSDNAME.LIB>

SYNTAX: char *gethostname( char *name, int len );

KEYWORDS:		tcpip, bsd, host, dns

DESCRIPTION: 	get the host portion of our name

PARAMETER1: 	buffer to place the host name
PARAMETER2: 	max length of the host name

RETURN VALUE:  If buffer is NULL or length is 0, returns the internal host
					name buffer (do not modify!) which contains an empty string
					if the host name has not been set.

					If the buffer is large enough to hold the host name, it is
					copied into the buffer.  If not, the buffer is set to an empty
					string.  Paramter 1 (the buffer) is returned after being
					modified.

SEE ALSO:      sethostname, getdomainname, getpeername, getsockname,
               setdomainname, bsd.c

END DESCRIPTION **********************************************************/

char *gethostname( char *name, int len );
/*** EndHeader */

__nodebug char *gethostname( char *name, int len )
{
   if( len && name )
   {
      if( len < (strlen( _hostname ) + 1) )
         *name = 0;
      else
         strcpy( name, _hostname );
      return( name );
   }
   return _hostname;
}

/*** BeginHeader sethostname */

/* START FUNCTION DESCRIPTION ********************************************
sethostname                            <BSDNAME.LIB>

SYNTAX: char *sethostname( char *name );

KEYWORDS:		tcpip, bsd, host, dns

DESCRIPTION: 	set the host portion of our name

PARAMETER1: 	the new host name

RETURN VALUE:  pointer to internal hostname buffer on success, or
               NULL on error (if hostname is too long)

SEE ALSO:      gethostname, setdomainname, getdomainname, getpeername,
               getsockname, bsd.c

END DESCRIPTION **********************************************************/

char *sethostname( char *name );
/*** EndHeader */

__nodebug char *sethostname( char *name )
{
	if (strlen(name) < MAX_STRING)
	{
		strcpy(_hostname, name);
		return (_hostname);
	}
	else
	{
		return ((char*)NULL);
	}
}

/*** BeginHeader psocket */

/* START FUNCTION DESCRIPTION ********************************************
psocket                                <BSDNAME.LIB>

SYNTAX: void psocket( void* s );

KEYWORDS:		tcpip, bsd, socket, tcpip debugging

DESCRIPTION: 	print out socket information to the stdio window

PARAMETER1: 	socket

RETURN VALUE:  none

END DESCRIPTION **********************************************************/
void psocket( sock_type *s );
/*** EndHeader */
__nodebug void psocket( sock_type *s )
{
   auto char buffer[16];

	printf( "[%s:%u]", inet_ntoa( buffer, s->tcp.hisaddr), s->tcp.hisport);
}