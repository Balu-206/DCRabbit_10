// RCI Descriptor metadata.  It's OK to include stuff which isn't implemented;
// it will be ignored if there is no corresponding #web variable.  This is the
// maximum supported set.  Note that '@' keys are array dimension placeholders.
// Reasonable defaults provided for type (t), min and max based on C variable
// RabbitWeb information.  t=string for char[], uint32 for unsigned int types,
// int32 for signed int (except for those with 'select' info, which will be
// t=enum).  t=float for float types.  Default min/max for strings is min:1,
// max:length of char array minus 1.

// Metadata keys:
//  d: field description
//  t: type (see above)
//  r: rename field.  This can be necessary when the desired name is not a
//     valid C identifier, like "static".
//  p: RCI permissions - string "ro", "wo", "rw", "none"
//  key: key field name if this array of struct is keyed (as opposed to indexed).
//  c: Conditional e.g. c:"e" indicates the field is visible only if condition
//     "e" holds.  The test for a condition holding is via a callback function
//     selected via the nearest "cond" metadata in the hierarchy.
//     Currently, this is limited to a single char.  If condition is FALSE,
//     then that level and all its children are invisible.  Hiding a field
//     does not hide it in the query_descriptor!
//  cond: Select a conditional test callback function.  Must be registered
//     at run-time.  See web_register_conditional() for details.
//  min, max: range (see above)
//  #: error group (see below)
//  $: default value in external rep (string) form.  Each type has a
//       default default, which corresponds to the binary zeros value.
//       This applies to the descriptor, but the run-time default may
//       be independent of this if there is no 'factory default object'.
//  shadow: default 0, but if non-zero then a shadow object is attached at
//       this level and all lower levels.
//  fd: default 0, but if non-zero then a 'factory default' object
//       is attached at this an all lower levels.  This is more versatile
//       than the $ key, since it is initialized at run-time and may have
//       different values for array members etc.
//  attr: default 0; if non-zero then this item is an attribute of the
//       enclosing element as opposed to a sub-element.  This only relevant
//       for XML representations.

// '#' keys are error descriptor groups, which can occur at any level.  Error
// groups extend the error groups visible in outer scope(s).  Error IDs are
// assigned consecutively, starting at 1 + 100*level.  Error groups coded as
// JSON array of strings.  Array elements are error text strings, which will
// be consecutively numbered.  Group names are automatically generated.

// Don't bloat this file; keep it under 32k since Rabbit stores it in program
// flash.  See RCI_json.pdf for details.  This file will not be required
// when there is full attribute support for RabbitWeb within the compiler.

{
.:[{d:"RCI top level"}]
,
_RCI_Settings:{
 .:[{d:"Modifiable settings for set_settings and query_settings commands",
     shadow:1,fd:1}]	// settings are shadowed to implement RCI "stored" settings
,interface:{
 .:[{cond:"iface_type",key:"name",d:"Network Interfaces"}],
 @:{
  // Conditions: see _rci_iface_type_conditional()
  name:[{d:"Interface name",p:"ro",c:"A"}]
 ,dhcp:[{t:"on_off",d:"Enable/disable DHCP",c:"a"}]
 ,ip:[{t:"ipv4",d:"Static IP address",c:"a"}]
 ,subnet:[{t:"ipv4",d:"Static subnet mask",c:"a",$:"255.255.255.0"}]
 ,gateway:[{t:"ipv4",d:"Static gateway IP address",c:"a",
 	#:["No route to gateway"]}]
 ,eth_speed:[{d:"Ethernet speed",c:"e"}]
 ,eth_duplex:[{d:"Ethernet duplex",c:"e"}]
 ,autoip:[{t:"on_off",d:"Zeroconf auto IP setting",c:"a"}]
 ,addp:[{t:"on_off",d:"Advanced Device Discovery Protocol",c:"a"}]
 ,Static:[{t:"on_off",d:"Static IP configuration",c:"a",r:"static"}]
 ,channel:[{d:"802.11 channel, 0 for auto",c:"w",min:0,max:14,
 	#:["Channel not available for country code"]}]
 ,protocol_mode:[{d:"802.11 protocol mode",c:"w"}]
 ,ssid:[{t:"string",d:"802.11 SSID.  Blank for any",c:"w"}]
 ,rts_threshold:[{d:"802.11 RTS threshold",c:"w",min:0,max:2347}]
 ,fragment_threshold:[{d:"802.11 fragmentation threshold",c:"w",min:256,max:2346}]
 ,max_txrate:[{d:"802.11 max transmit rate (MB/sec)",c:"w",min:1.0,max:54.0}]
 ,country_code:[{d:"802.11 country code",c:"w"}]
 ,authentication:[{t:"enum_multi",c:"w",
 	d:"802.11i authentication methods:One or more of open,wpa_psk,wpa_auth"}]
 ,encrypt:[{t:"enum_multi",c:"w",
 	d:"802.11i privacy methods:One or more of open,wep,tkip,ccmp"}]
 ,eap:[{t:"enum_multi",c:"V",
 	d:"802.11X EAP methods:Zero or more of tls,peap"}]
 ,options:[{t:"enum_multi",c:"w",
 	d:"802.11 miscellaneous options:Zero or more of shortpreamble,verifycert"}]
 ,wpa_username:[{t:"password",d:"802.11X WPA auth username",c:"V"}]
 ,wpa_password:[{t:"password",d:"802.11X WPA auth password",c:"V"}]
 ,wpa_psk:[{t:"password",c:"W",
 	d:"802.11i WPA PSK passphrase: text phrase, or exactly 64 hex digits"}]
 ,wepkey_index:[{d:"WEP transmit key",c:"U",min:1,max:4}]
 ,wepkey1:[{t:"password",d:"WEP encryption key 1:10 or 26 hex digits",c:"U"}]
 ,wepkey2:[{t:"password",d:"WEP encryption key 2:10 or 26 hex digits",c:"U"}]
 ,wepkey3:[{t:"password",d:"WEP encryption key 3:10 or 26 hex digits",c:"U"}]
 ,wepkey4:[{t:"password",d:"WEP encryption key 4:10 or 26 hex digits",c:"U"}]
 }}
,dns:{
 .:[{d:"DNS Server"}],
  dns1:[{t:"ipv4",d:"Static primary DNS server address"}]
 ,dns2:[{t:"ipv4",d:"Static secondary DNS server address"}]
 }
,system:{
 .:[{d:"System Information"}],
  contact:[{d:"Contact name"}]
 ,location:[{d:"Location"}]
 ,description:[{d:"Description"}]
 }
,mgmtglobal:{
 .:[{d:"Remote Management"}],
  deviceId:[{d:"Device ID",min:34,p:"ro"}],
  rciCompressionEnabled:[{t:"on_off",d:"Remote protocol compression enable",p:"ro"}],
  tcpNodelayEnabled:[{t:"on_off",d:"TCP no delay enable (ie. disable Nagle)"}],
  tcpKeepalivesEnabled:[{t:"on_off",d:"TCP keep alives enable"}],
  connIdleTimeout:[{d:"Connection idle timeout (seconds, 0 disbles)",max:43200}],
  dataServiceEnabled:[{t:"on_off",d:"Data service enabled"}],
  dataServicePort:[{d:"Data service port",$:"80"}],
  dataServiceSecurePort:[{d:"Data service secure (HTTPS) port",$:"443"}],
  dataServiceURL:[{d:"Data service URL suffix",$:"/ws/device"}],
  dataServiceToken:[{t:"password",d:"Data service password",$:"cwm_ds",p:"wo"}]
 }
,devicesecurity:{
 .:[{d:"iDigi Device Security"}],
  password:[{t:"password",d:"iDigi device connection password",p:"wo"}],
  identityVerificationForm:[{t:"enum",d:"Connection security type"}]
 }
,mgmtnetwork:{
 .:[{d:"Remote Management network"}],	// for now, most read-only
 @:{
  networkType:[{p:"ro",d:"Network type"}]
 ,connectMethod:[{d:"Firewall traversal method"}]
 ,mtRxKeepAlive:[{d:"MT device to server keepalive time (sec)",min:5}]
 ,mtTxKeepAlive:[{d:"MT server to device keepalive time (sec)",min:5}]
 ,mtWaitCount:[{d:"MT wait count",min:2,max:64}]
 ,sslValidatePeer:[{t:"on_off",d:"Require validation of server SSL cert"}]
 }}
,mgmtconnection:{
 .:[{p:"ro",d:"Remote Management connection"}],	// for now, most read-only
 @:{
  connectionType:[{t:"enum",d:"Connection type"}]
 ,connectionEnabled:[{t:"on_off",d:"Connection enabled"}]
 ,lastKnownAddressUpdateEnabled:[{t:"on_off",d:"Last known address update enabled"}]
 ,serverArray:{
   .:[{d:"iDigi Server(s)",p:"rw"}],
   @:{
   serverAddress:[{d:"Server address (IPV4 fully qualified domain name)"}],
   }}
 }}
,ppp:{
 // Following means hide if we don't have PPP.
 .:[{cond:"hide",c:"p",d:"PPP/Modem Interface"}],
 @:{
  .:[{cond:"hide",c:"p"}]
 ,enabled:[{p:"rw",t:"on_off",d:"PPP enabled"}]	// rci spec has "disabled|enabled"
 ,auth_method_local:[{p:"ro",d:"Local authentication method"}]
 ,passive:[{p:"ro",t:"on_off",d:"Passive or active"}]	// rci spec has "passive|active"
 ,address_remote:[{p:"ro",t:"ipv4",d:"Remote IP address"}]
 ,address_local:[{p:"ro",t:"ipv4",d:"Local IP address"}]
 ,address_mask:[{p:"ro",t:"ipv4",d:"Subnet mask"}]
 ,default_gateway:[{p:"ro",t:"on_off",d:"Default gateway"}]	// rci has yes|no
 ,compression_protocol:[{p:"ro",t:"on_off",d:"Protocol compression"}]
 ,compression_address:[{p:"ro",t:"on_off",d:"Address compression"}]
 ,asyncmap:[{p:"ro",t:"hex32",d:"Async control character map"}]
 ,mru:[{p:"ro",d:"Max receive unit",min:0,max:2048}]
 ,mtu:[{p:"ro",d:"Max transmit unit",min:0,max:2048}]
 ,dial_script:[{p:"rw",d:"Send/expect script to dial and login"}]
 ,chap_id:[{p:"ro",t:"password",d:"CHAP identifier",min:0,max:33}]
 ,chap_key:[{p:"ro",t:"password",d:"CHAP key",min:0,max:16}]
 ,pap_id:[{t:"password",d:"PAP identifier",min:0,max:33,p:"wo"}]
 ,pap_password:[{t:"password",d:"PAP password",min:0,max:16,p:"wo"}]
 ,redial_attempts:[{p:"ro",d:"Redial attepts (outbound only)"}]
 ,redial_delay:[{p:"ro",d:"Redial delay (sec)",min:0,max:64000}]
 ,idle_timer_rx:[{p:"ro",d:"Receive idle time (sec)",min:0,max:86400}]
 ,idle_timer_tx:[{p:"ro",d:"Transmit idle time (sec)",min:0,max:86400}]
 }}
,router:{
 // Following means hide if we don't have router/NAT functionality.
 .:[{cond:"hide",c:"r"}],
  ipForwardingEnabled:[{t:"on_off",d:"IP forwarding (router function) enabled"}]
 ,natEnabled:[{t:"on_off",d:"Network address translation enabled"}]
 ,protoXlateArray:{@:{
   protoXlateEnabled:[{t:"on_off",d:"Protocol translation enabled"}]
  ,protoXlateNumber:[{d:"Protocol number"}]
  ,protoXlateType:[{d:"Protocol type"}]		// not documented
  ,protoXlateIpAddress:[{t:"ipv4",d:"IP address"}]
  }}
 ,portXlateArray:{@:{
   portXlateEnabled:[{t:"on_off",d:"Port translation enabled"}]
  ,portXlateProto:[{d:"Port translation protocol"}]
  ,portXlateExternalPort:[{d:"External port"}]
  ,portXlateInternalPort:[{d:"Internal port"}]
  ,portXlateInternalIpAddress:[{t:"ipv4",d:"IP address"}]
  }}
 }
,tcpkeepalive:{
 // Following means hide if we don't have keepalive implemented.
  .:[{p:"ro",cond:"hide",c:"k"}]
 ,garbage_byte:[{t:"on_off",d:"Use garbage byte"}]
 ,override_dhcp:[{t:"on_off",d:"Override DHCP setting"}]
 ,probe_count:[{d:"Probe count",min:5,max:30}]
 ,probe_interval:[{d:"Probe interval",min:10,max:75}]
 ,idle:[{d:"Idle time (sec)",min:10,max:86400}]
 }
}	// _RCI_Settings

,
_RCI_State:{
 .:[{d:"Read-only settings for set_state and query_state commands",p:"ro"}]
,device_info:{
 .:[{d:"Device Information"}],
  mac:[{t:"mac_addr",d:"Primary MAC address"}]	// RCI doesn't allow for more than 1
 ,product:[{d:"Product name"}]
 ,company:[{d:"Manufacturer"}]
 ,vendorid:[{d:"Vendor ID"}]
 ,firmware:[{d:"Firmware version"}]
 }
,device_stats:{
 .:[{d:"Device Statistics"}],
  uptime:[{d:"Up-time (sec)"}]
 ,totalmem:[{d:"Total system memory"}]
 ,usedmem:[{d:"Used system memory: bytes, 0 if not available"}]
 ,freemem:[{d:"Free system memory: bytes, 0 if not available"}]
 ,hwmmem:[{d:"Most system memory used: bytes, 0 if not available"}]
 ,totalmemApp:[{d:"Total application memory"}]
 ,usedmemApp:[{d:"Used application memory: bytes, 0 if not available"}]
 ,freememApp:[{d:"Free application memory: bytes, 0 if not available"}]
 ,hwmmemApp:[{d:"Most application memory used: bytes, 0 if not available"}]
 ,configUsed:[{d:"Settings in use"}]
 }
,boot_stats:{
 .:[{d:"Ethernet Interface"}],
  dhcp:[{t:"on_off",d:"DHCP used"}]
 ,ip:[{t:"ipv4",d:"Current IP address"}]
 ,subnet:[{t:"ipv4",d:"Current subnet mask"}]
 ,gateway:[{t:"ipv4",d:"Current gateway"}]
 ,autoip:[{t:"on_off",d:"Auto IP used"}]
 ,Static:[{t:"on_off",d:"Static IP address used",r:"static"}]
 ,eth_speed:[{d:"Ethernet speed"}]
 ,eth_duplex:[{d:"Ethernet duplex"}]
 }
,wireless_stats:{
 .:[{d:"Wireless Interface"}],
  dhcp:[{t:"on_off",d:"DHCP used"}]
 ,ip:[{t:"ipv4",d:"Current IP address"}]
 ,subnet:[{t:"ipv4",d:"Current subnet mask"}]
 ,gateway:[{t:"ipv4",d:"Current gateway"}]
 ,autoip:[{t:"on_off",d:"Auto IP used"}]
 ,state:[{d:"802.11 state"}]
 ,ssid:[{d:"Associated SSID"}]
 ,bssid:[{t:"mac_addr",d:"Associated BSSID"}]
 ,tx_rate:[{d:"Moving average transmit rate (MB/sec)"}]
 ,rx_signal:[{d:"Moving average receive signal strength (dBm+100)"}]
 ,channel:[{d:"802.11 channel"}]
 ,protocol_mode:[{d:"802.11 protocol mode"}]
 }
,ppp_stats:{
 .:[{d:"PPP Interface"}],
  state:[{d:"PPP state"}]
 ,ip_address:[{t:"ipv4",d:"Local IP address"}]
 ,dns_address_primary:[{t:"ipv4",d:"Primary DNS address"}]
 ,dns_address_secondary:[{t:"ipv4",d:"Secondary DNS address"}]
 }
,device_registry:{
 .:[{d:"Device Capabilities"}],
  ethernet:[{t:"on_off",d:"Ethernet available"}]
 ,wireless:[{t:"on_off",d:"802.11 available"}]
 ,dhcp:[{t:"on_off",d:"DHCP client available"}]
 ,addp:[{t:"on_off",d:"ADDP available"}]
 ,autoip:[{t:"on_off",d:"Zeroconf IP assignment available"}]
 ,tls:[{t:"on_off",d:"TLS (SSL v3.1) available"}]
 ,ssl:[{t:"on_off",d:"SSL v3.0 available"}]
 ,http:[{t:"on_off",d:"HTTP server available"}]
 ,https:[{t:"on_off",d:"HTTPS server available"}]
 ,router:[{t:"on_off",d:"IP forwarding (router) available"}]
 ,router_ports:[{d:"Max number of NAT port translation entries"}]
 ,router_protocols:[{d:"Max number of NAT protocol translation entries"}]
 ,ppp:[{t:"on_off",d:"PPP (async serial) available"}]
 	// Always 1 for rabbit:
 ,serial_ports:[{d:"Number of serial ports (PPP) supported"}]
 ,tcp_keepalive:[{t:"on_off",d:"Send TCP keepalives"}]
 }
,zigbee_state:{
 .:[{d:"Gateway XBee",p:"ro",cond:"hide",c:"z"}],
  gateway_addr:[{t:"xbee_ext_addr",d:"XBee extended address"}]
 ,caps:[{t:"0x_hex32",d:"Gateway XBee capabilities"}]
 }
}	// _RCI_State

,
_RCI_Reboot:[{d:"Reboot command"}]
}