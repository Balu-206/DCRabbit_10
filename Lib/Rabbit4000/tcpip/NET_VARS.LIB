/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*
 *    net_vars.lib
 *
 * This library defines the common (kernel/user) data instances for networking.
 */

/*** BeginHeader _dhcp_info, _if_request, _if_prequest, _if_actual,
                 _if_dhcp, _if_dhcp_lease, sock_inactive, system_yield, dcrtcpd,
                 _hostname, sock_data_timeout, _eth_addr, debug_on, usr_init,
                 _survivebootp, _initialized, tcp_allsocs
                 ip_id, sock_delay, _if_tab, _llp_, _llg_
*******************************************************************************/

// The interface table.  Contains what used to be known as my_ip_addr and sin_mask,
// but one for each interface.
extern IFTEntry _if_tab[IF_MAX+VIRTUAL_ETH];
#ifdef USE_DHCP
	#ifndef NUM_DHCP_IF
   	#define NUM_DHCP_IF 1
   #endif
	extern DHCPInfo _dhcp_info[NUM_DHCP_IF];
#endif

// Variables containing mask of bits (1 bit per i/f)
extern word _if_request;		// Requested state (1 bit = requested up)
extern word _if_prequest;		// Previously requested state
extern word _if_actual;			// Actual current state (1 bit = up)
extern word _if_dhcp;			// Currently performing DHCP acquisition
extern word _if_dhcp_lease; 	// DHCP acquired OK, and lease is NOT permanent (hence need to keep checking)

extern void (*system_yield)();
extern void (*dcrtcpd)();

extern longword sock_data_timeout;  	// MilliSeconds until we give up (default 120,000)

extern word sock_delay;

/* user initialization file */
extern void (*usr_init)(char *name, char *value);

extern int _survivebootp;
extern char _initialized;
extern char _hostname[MAX_STRING+1];

extern int ip_id;        /* packet number */
extern tcp_Socket *tcp_allsocs;


extern word sock_inactive/* = 0*/;  /* defaults to forever */


extern ll_prefix * _llp_;	// Dummy for asm
extern ll_Gather * _llg_;	// Dummy for asm

extern word debug_on/* = 0*/;

/*** EndHeader */

// The interface table.  Contains what used to be known as my_ip_addr and sin_mask,
// but one for each interface.
IFTEntry _if_tab[IF_MAX+VIRTUAL_ETH];
#ifdef USE_DHCP
	#ifndef NUM_DHCP_IF
   	#define NUM_DHCP_IF 1
   #endif
	DHCPInfo _dhcp_info[NUM_DHCP_IF];
#endif

// Variables containing mask of bits (1 bit per i/f)
word _if_request;		// Requested state (1 bit = requested up)
word _if_prequest;		// Previously requested state
word _if_actual;			// Actual current state (1 bit = up)
word _if_dhcp;			// Currently performing DHCP acquisition
word _if_dhcp_lease; 	// DHCP acquired OK, and lease is NOT permanent (hence need to keep checking)


void (*system_yield)();
void (*dcrtcpd)();

char _hostname[MAX_STRING+1];

longword sock_data_timeout;  	// MilliSeconds until we give up (default 120,000)

/* user initialization file */
void (*usr_init)(char *name, char *value);

int _survivebootp;
char _initialized;

int ip_id;        /* packet number */
tcp_Socket *tcp_allsocs;

word sock_delay/* = 30*/;
word sock_inactive/* = 0*/;  /* defaults to forever */

ll_prefix * _llp_;	// Dummy for asm
ll_Gather * _llg_;	// Dummy for asm

word debug_on/* = 0*/;


/*** BeginHeader udp_allsocs, next_udp_port */
extern udp_Socket *udp_allsocs;
extern word next_udp_port;
/*** EndHeader */
udp_Socket *udp_allsocs/* = NULL*/;
word next_udp_port/* = 1024*/;


/*** BeginHeader _tcp_buffers, _tcp_buf_area, tcp_reserveports, tcp_pendingpool,
					  tcp_pendingbuffer, tcp_pendingbuffer_head,
                 tcp_pendingbuffer_tail, tcp_allpending, tcp_pendingtail,
                 tcp_pendingcount, tcp_pendingestab, retran_strat,
                 _arp_tick_strat, pkt_processed, next_tcp_port
 ***/


/*
 * Structures for buffer management
 */
#if (MAX_TCP_SOCKET_BUFFERS > 0)
	extern void* _tcp_buffers[MAX_TCP_SOCKET_BUFFERS];
	extern long _tcp_buf_area;
#endif

#ifdef USE_RESERVEDPORTS
   #ifndef MAX_RESERVEPORTS
      #define MAX_RESERVEPORTS 5
   #endif
	extern word tcp_reserveports[MAX_RESERVEPORTS];
#endif

#ifndef TCP_MAXPENDING
	#define TCP_MAXPENDING 20
#endif

extern __far tcp_Pending tcp_pendingpool[TCP_MAXPENDING];
extern __far tcp_Pending * __far tcp_pendingbuffer[TCP_MAXPENDING+1];
extern __far int tcp_pendingbuffer_head;
extern __far int tcp_pendingbuffer_tail;
extern __far tcp_Pending * __far tcp_allpending;
extern __far tcp_Pending * __far tcp_pendingtail;
extern __far int tcp_pendingcount;
extern __far int tcp_pendingestab;

extern word retran_strat;
extern word _arp_tick_strat;	// Also does IGMP and DHCP
#ifdef TCP_STATS
extern long pkt_processed;
#endif

extern word next_tcp_port;

/*** EndHeader */

#ifdef USE_RESERVEDPORTS
word tcp_reserveports[MAX_RESERVEPORTS];
#endif
word _arp_tick_strat;
word retran_strat;
#ifdef TCP_STATS
long pkt_processed;
#endif

__far tcp_Pending tcp_pendingpool[TCP_MAXPENDING];
__far tcp_Pending * __far tcp_pendingbuffer[TCP_MAXPENDING+1];
__far int tcp_pendingbuffer_head;
__far int tcp_pendingbuffer_tail;
__far tcp_Pending * __far tcp_allpending;
__far tcp_Pending * __far tcp_pendingtail;
__far int tcp_pendingcount;
__far int tcp_pendingestab;

#if (MAX_TCP_SOCKET_BUFFERS > 0)
	void* _tcp_buffers[MAX_TCP_SOCKET_BUFFERS];
	long _tcp_buf_area;
#endif

word next_tcp_port;


/*** BeginHeader my_eth_addr, _done_pkt_init */
// Backward compatibility macro
#define _eth_addr  (*my_eth_addr[IF_DEFAULT])

// Table of ethernet addresses.  These are pointers to ethernet addresses:
// may be NULL for ppp serial interfaces.  Maps interface number to eth addr.
extern eth_address * my_eth_addr[IF_MAX+VIRTUAL_ETH];
extern char _done_pkt_init;	// Set 1 when pkt_init() has been run.

/*** EndHeader */

eth_address * my_eth_addr[IF_MAX+VIRTUAL_ETH];	// Point to the hardware address (or NULL).
char _done_pkt_init;