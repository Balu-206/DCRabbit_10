/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*** BeginHeader */
#ifndef __WRITEIDBLOCK_BL4S1XX_LIB
#define __WRITEIDBLOCK_BL4S1XX_LIB
/*** EndHeader */

/* START LIBRARY DESCRIPTION ***************************************************
WriteIdBlock_BL4S1xx.LIB

DESCRIPTION:
	System ID block writing functions specific to the BL4S1xx board family.
	Used for engineering development and manufacturing tester.

API FUNCTIONS:
	wib_addBL4S100Info(.)
	wib_addBL4S110Info(.)
	wib_addBL4S150Info(.)
	wib_addBL4S160Info(.)

SUPPORT LIB'S:
END DESCRIPTION ***************************************************************/


/*** BeginHeader wib_addBL4S100Info */
void wib_addBL4S100Info(wib_sysIdBlockData far *build);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
wib_addBL4S100Info            <WriteIdBlock_BL4S1xx.LIB>

SYNTAX:
   void wib_addBL4S100Info(wib_sysIdBlockData far *build);

DESCRIPTION:
   Adds board specific constant information into the specified system ID
   block build data structure.

IMPORTANT NOTES FOR DEVELOPERS:
   Board specific information which varies from board to board of the same
   board type, such as a MAC address, serial number or product
   description, should be added into the system ID block build data
   structure by custom functionality, elsewhere. Doing these types of
   updates here will almost certainly cause unnecessary code duplication.

   In contrast, this function must not contain compile time conditional
   code or macros whose compile time value is dependent on, for example,
   _BOARD_TYPE_. Inclusion of such code or macros will prevent this
   function from being used in test fixture code where it may be desirable
   to have the ability to change at run time a board's ID block or
   persistent data content.

PARAMETER1:
   A pointer to the system ID block build data structure. If NULL, this
   function will cause a run time exception and exit.

RETURN VALUE:
   None.
END DESCRIPTION *********************************************************/

#ifndef XBEE_ID_VALUE
	#define XBEE_ID_VALUE 0xFFFFFFFFul
#endif	// XBEE_ID_VALUE

_wib_debug
void wib_addBL4S100Info(wib_sysIdBlockData far *build)
{
	auto MemDevSpec memspec;

	if (!build) {
		exception(-ERR_BADPARAMETER);
		exit(-ERR_BADPARAMETER);
	}

	build->idBlock.productID = BL4S100;

	// specify primary flash non-automatic values
	// modify Atmel serial flash size to be a power of 2
	build->idBlock.flashSize = 1024 / 4;

	// specify primary SRAM (fast)
	build->idBlock.ramID = 0;
	build->idBlock.ramSize = 512 / 4;
	build->idBlock.ramSpeed = 15;
	build->idBlock.idBlock2.ramMBC = 0xC0;

	// specify main oscillator actual clock frequency
	build->idBlock.crystalFreq = 20000000;

	// specify secondary SRAM (battery-backable)
	memset(&memspec, 0, sizeof memspec);
	memspec.ID = 0;
	memspec.type = 0;
	memspec.devSize = 512 / 4;
	memspec.sectorSize = 0;
	memspec.numSectors = 0;
	memspec.devSpeed = 55;
	memspec.MBC = 0x45;
	_wib_addDevice(build, &memspec);

	// add system macros
	wib_addMacro(build, "CLK_DBL", 1);
	wib_addMacro(build, "BRD_OPT0", 0x24);
	wib_addMacro(build, "DFLASH0", 0x14011F24);
	/*
		The _DC_XBEE_ID_ macro value is one of the following types:
		   0xFFFFFFFFul - query an installed XBee module for its HW:FW version.
		   0x00000000ul - no XBee module installed.
		   0xHWVNFWVNul - a specified HW version number (MSByte) and FW version
		                  number (LSByte).
	*/
#if 0xFFFFFFFFul == XBEE_ID_VALUE
	// query the installed XBee module for its HW:FW versions
	wib_addMacro(build, "XBEE_ID", _wib_xbeeGetID());
#else	// 0xFFFFFFFFul == XBEE_ID_VALUE
	// use the XBEE_ID_VALUE macro's literal value as the HW:FW versions
	wib_addMacro(build, "XBEE_ID", XBEE_ID_VALUE);
#endif	// 0xFFFFFFFFul == XBEE_ID_VALUE
}

/*** BeginHeader wib_addBL4S110Info */
void wib_addBL4S110Info(wib_sysIdBlockData far *build);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
wib_addBL4S110Info            <WriteIdBlock_BL4S1xx.LIB>

SYNTAX:
   void wib_addBL4S110Info(wib_sysIdBlockData far *build);

DESCRIPTION:
   Adds board specific constant information into the specified system ID
   block build data structure.

IMPORTANT NOTES FOR DEVELOPERS:
   Board specific information which varies from board to board of the same
   board type, such as a MAC address, serial number or product
   description, should be added into the system ID block build data
   structure by custom functionality, elsewhere. Doing these types of
   updates here will almost certainly cause unnecessary code duplication.

   In contrast, this function must not contain compile time conditional
   code or macros whose compile time value is dependent on, for example,
   _BOARD_TYPE_. Inclusion of such code or macros will prevent this
   function from being used in test fixture code where it may be desirable
   to have the ability to change at run time a board's ID block or
   persistent data content.

PARAMETER1:
   A pointer to the system ID block build data structure. If NULL, this
   function will cause a run time exception and exit.

RETURN VALUE:
   None.
END DESCRIPTION *********************************************************/

_wib_debug
void wib_addBL4S110Info(wib_sysIdBlockData far *build)
{
	auto MemDevSpec memspec;

	if (!build) {
		exception(-ERR_BADPARAMETER);
		exit(-ERR_BADPARAMETER);
	}

	build->idBlock.productID = BL4S110;

	// specify primary flash non-automatic values
	// modify Atmel serial flash size to be a power of 2
	build->idBlock.flashSize = 1024 / 4;

	// specify primary SRAM (fast)
	build->idBlock.ramID = 0;
	build->idBlock.ramSize = 512 / 4;
	build->idBlock.ramSpeed = 15;
	build->idBlock.idBlock2.ramMBC = 0xC0;

	// specify main oscillator actual clock frequency
	build->idBlock.crystalFreq = 20000000;

	// specify secondary SRAM (battery-backable)
	memset(&memspec, 0, sizeof memspec);
	memspec.ID = 0;
	memspec.type = 0;
	memspec.devSize = 512 / 4;
	memspec.sectorSize = 0;
	memspec.numSectors = 0;
	memspec.devSpeed = 55;
	memspec.MBC = 0x45;
	_wib_addDevice(build, &memspec);

	// add system macros
	wib_addMacro(build, "CLK_DBL", 1);
	wib_addMacro(build, "BRD_OPT0", 0x24);
	wib_addMacro(build, "DFLASH0", 0x14011F24);
	wib_addMacro(build, "XBEE_ID", 0);
}

/*** BeginHeader wib_addBL4S150Info */
void wib_addBL4S150Info(wib_sysIdBlockData far *build);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
wib_addBL4S150Info            <WriteIdBlock_BL4S1xx.LIB>

SYNTAX:
   void wib_addBL4S150Info(wib_sysIdBlockData far *build);

DESCRIPTION:
   Adds board specific constant information into the specified system ID
   block build data structure.

IMPORTANT NOTES FOR DEVELOPERS:
   Board specific information which varies from board to board of the same
   board type, such as a MAC address, serial number or product
   description, should be added into the system ID block build data
   structure by custom functionality, elsewhere. Doing these types of
   updates here will almost certainly cause unnecessary code duplication.

   In contrast, this function must not contain compile time conditional
   code or macros whose compile time value is dependent on, for example,
   _BOARD_TYPE_. Inclusion of such code or macros will prevent this
   function from being used in test fixture code where it may be desirable
   to have the ability to change at run time a board's ID block or
   persistent data content.

PARAMETER1:
   A pointer to the system ID block build data structure. If NULL, this
   function will cause a run time exception and exit.

RETURN VALUE:
   None.
END DESCRIPTION *********************************************************/

#ifndef XBEE_ID_VALUE
	#define XBEE_ID_VALUE 0xFFFFFFFFul
#endif	// XBEE_ID_VALUE

_wib_debug
void wib_addBL4S150Info(wib_sysIdBlockData far *build)
{
	auto MemDevSpec memspec;

	if (!build) {
		exception(-ERR_BADPARAMETER);
		exit(-ERR_BADPARAMETER);
	}

	build->idBlock.productID = BL4S150;

	// specify primary flash non-automatic values
	// modify Atmel serial flash size to be a power of 2
	build->idBlock.flashSize = 2048 / 4;

	// specify primary SRAM (fast)
	build->idBlock.ramID = 0;
	build->idBlock.ramSize = 512 / 4;
	build->idBlock.ramSpeed = 15;
	build->idBlock.idBlock2.ramMBC = 0xC0;

	// specify main oscillator actual clock frequency
	build->idBlock.crystalFreq = 20000000;

	// specify secondary SRAM (battery-backable)
	memset(&memspec, 0, sizeof memspec);
	memspec.ID = 0;
	memspec.type = 0;
	memspec.devSize = 512 / 4;
	memspec.sectorSize = 0;
	memspec.numSectors = 0;
	memspec.devSpeed = 55;
	memspec.MBC = 0x45;
	_wib_addDevice(build, &memspec);

	// specify additional primary (tertiary?) SRAM (fast)
	memset(&memspec, 0, sizeof memspec);
	memspec.ID = 0;
	memspec.type = 0;
	memspec.devSize = 512 / 4;
	memspec.sectorSize = 0;
	memspec.numSectors = 0;
	memspec.devSpeed = 15;
	memspec.MBC = 0xC6;
	_wib_addDevice(build, &memspec);

	// add system macros
	wib_addMacro(build, "CLK_DBL", 1);
	wib_addMacro(build, "BRD_OPT0", 0x24);
	wib_addMacro(build, "DFLASH0", 0x15011F2C);
	/*
		The _DC_XBEE_ID_ macro value is one of the following types:
		   0xFFFFFFFFul - query an installed XBee module for its HW:FW version.
		   0x00000000ul - no XBee module installed.
		   0xHWVNFWVNul - a specified HW version number (MSByte) and FW version
		                  number (LSByte).
	*/
#if 0xFFFFFFFFul == XBEE_ID_VALUE
	// query the installed XBee module for its HW:FW versions
	wib_addMacro(build, "XBEE_ID", _wib_xbeeGetID());
#else	// 0xFFFFFFFFul == XBEE_ID_VALUE
	// use the XBEE_ID_VALUE macro's literal value as the HW:FW versions
	wib_addMacro(build, "XBEE_ID", XBEE_ID_VALUE);
#endif	// 0xFFFFFFFFul == XBEE_ID_VALUE
}

/*** BeginHeader wib_addBL4S160Info */
void wib_addBL4S160Info(wib_sysIdBlockData far *build);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
wib_addBL4S160Info            <WriteIdBlock_BL4S1xx.LIB>

SYNTAX:
   void wib_addBL4S160Info(wib_sysIdBlockData far *build);

DESCRIPTION:
   Adds board specific constant information into the specified system ID
   block build data structure.

IMPORTANT NOTES FOR DEVELOPERS:
   Board specific information which varies from board to board of the same
   board type, such as a MAC address, serial number or product
   description, should be added into the system ID block build data
   structure by custom functionality, elsewhere. Doing these types of
   updates here will almost certainly cause unnecessary code duplication.

   In contrast, this function must not contain compile time conditional
   code or macros whose compile time value is dependent on, for example,
   _BOARD_TYPE_. Inclusion of such code or macros will prevent this
   function from being used in test fixture code where it may be desirable
   to have the ability to change at run time a board's ID block or
   persistent data content.

PARAMETER1:
   A pointer to the system ID block build data structure. If NULL, this
   function will cause a run time exception and exit.

RETURN VALUE:
   None.
END DESCRIPTION *********************************************************/

_wib_debug
void wib_addBL4S160Info(wib_sysIdBlockData far *build)
{
	auto MemDevSpec memspec;

	if (!build) {
		exception(-ERR_BADPARAMETER);
		exit(-ERR_BADPARAMETER);
	}

	build->idBlock.productID = BL4S160;

	// specify primary flash non-automatic values
	// modify Atmel serial flash size to be a power of 2
	build->idBlock.flashSize = 2048 / 4;

	// specify primary SRAM (fast)
	build->idBlock.ramID = 0;
	build->idBlock.ramSize = 512 / 4;
	build->idBlock.ramSpeed = 15;
	build->idBlock.idBlock2.ramMBC = 0xC0;

	// specify main oscillator actual clock frequency
	build->idBlock.crystalFreq = 20000000;

	// specify secondary SRAM (battery-backable)
	memset(&memspec, 0, sizeof memspec);
	memspec.ID = 0;
	memspec.type = 0;
	memspec.devSize = 512 / 4;
	memspec.sectorSize = 0;
	memspec.numSectors = 0;
	memspec.devSpeed = 55;
	memspec.MBC = 0x45;
	_wib_addDevice(build, &memspec);

	// specify additional primary (tertiary?) SRAM (fast)
	memset(&memspec, 0, sizeof memspec);
	memspec.ID = 0;
	memspec.type = 0;
	memspec.devSize = 512 / 4;
	memspec.sectorSize = 0;
	memspec.numSectors = 0;
	memspec.devSpeed = 15;
	memspec.MBC = 0xC6;
	_wib_addDevice(build, &memspec);

	// add system macros
	wib_addMacro(build, "CLK_DBL", 1);
	wib_addMacro(build, "BRD_OPT0", 0x24);
	wib_addMacro(build, "DFLASH0", 0x15011F2C);
	wib_addMacro(build, "XBEE_ID", 0);
}

/*** BeginHeader */
#endif	// __WRITEIDBLOCK_BL4S1XX_LIB
/*** EndHeader */