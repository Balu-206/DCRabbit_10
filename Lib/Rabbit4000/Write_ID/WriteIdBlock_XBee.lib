/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*** BeginHeader */
#ifndef __WRITEIDBLOCK_XBEE_LIB
#define __WRITEIDBLOCK_XBEE_LIB
/*** EndHeader */

/* START LIBRARY DESCRIPTION ***************************************************
WriteIdBlock_XBee.LIB

DESCRIPTION:
	Support function for writing an ID block onto XBee-enabled boards.
	Used for engineering development and manufacturing tester.

	Brings in necessary libraries to query the XBee and create the proper
	XBEE_ID macro for the system ID block.

API FUNCTIONS:
	None.

SUPPORT LIB'S:
	XBEE_API.LIB
	XBEE_BOOT.LIB
END DESCRIPTION ***************************************************************/


/*******************************************************************************
	Below this comment block are non-API functions.
*******************************************************************************/

/*** BeginHeader _wib_xbeeGetID */
#if 0x0A44 <= CC_VER
/*
	This XBee functionality only exists in Dynamic C versions 10.44 and later.
*/
unsigned long _wib_xbeeGetID(void);
#endif	// 0x0A44 <= CC_VER
/*** EndHeader */

/* START_FUNCTION DESCRIPTION ********************************************
_wib_xbeeGetID                <WriteIdBlock_XBee.LIB>

SYNTAX:
   unsigned long _wib_xbeeGetID(void);

DESCRIPTION:
   Retrieves the XBEE_ID value from the XBee module, if one is present.

RETURN VALUE:
   Success - The nonzero XBEE_ID (concatenated hardware:firmware versions)
      value from the connected XBee module.
   Error - 0 if an XBee module is either not present or non-functional.
END DESCRIPTION *********************************************************/

#if 0x0A44 <= CC_VER
/*
	This XBee functionality only exists in Dynamic C versions 10.44 and later.
*/
 #ifndef XBEE_ROLE
	/*
	   XBEE_ROLE isn't actually used, it's just defined to avoid a compiler
	   warning in xbee_api.lib.  We don't actually call xbee_init(), so it isn't
	   used by the XBee library.
	*/
	#define XBEE_ROLE NODE_TYPE_ROUTER
 #endif	// XBEE_ROLE
 #ifndef __XBEE_API_LIB
	#use "xbee_api.lib"
 #endif	// __XBEE_API_LIB
 #ifndef __XBEE_BOOT_LIB
	#use "xbee_boot.lib"		// for xbeeMacroUpdate() function
 #endif	// __XBEE_BOOT_LIB

_wib_debug
unsigned long _wib_xbeeGetID(void)
{
	auto int ret_code, vr, hv;
	auto unsigned long newid, t;
	auto _at_cmdresp_t atresp;

	// set up XBee I/O lines
	_xb_rts(0);
	xb_rts_init();

 #ifdef WIB_VERBOSE
	printf("_wib_xbeeGetID: Initializing the XBee library's buffer pool.\n");
 #endif
	xb_pool_init();

	ZB_OPEN(_XB_BD_TO_BAUD(_XB_BD));
 #ifdef ZB_FLOWON
	ZB_FLOWON();
 #endif

	// wait 500ms seconds for XBee to boot
	t = MS_TIMER;
	while (MS_TIMER - t < 500);

	if (ret_code = zb_API_ATCmdResponse(_VR, NULL, 0, &atresp)) {
 #ifdef WIB_VERBOSE
		printf("_wib_xbeeGetID: Can't read firmware version, trying 9600 bps.\n");
 #endif
		ZB_OPEN(9600);
	   if (ret_code = zb_API_ATCmdResponse(_VR, NULL, 0, &atresp)) {
 #ifdef WIB_VERBOSE
			printf("_wib_xbeeGetID: Still can't read firmware version.\n");
 #endif
			return 0ul;
		}
	}
	vr = ntohs(*(int *) atresp.data);
 #ifdef WIB_VERBOSE
	printf("_wib_xbeeGetID: Firmware version is 0x%04x.\n", vr);
 #endif

	if (ret_code = zb_API_ATCmdResponse(_HV, NULL, 0, &atresp)) {
 #ifdef WIB_VERBOSE
		printf("_wib_xbeeGetID: Can't read hardware version.\n");
 #endif
		return 0ul;
	}
	hv = ntohs(*(int *) atresp.data);
 #ifdef WIB_VERBOSE
		printf("_wib_xbeeGetID: Hardware version is 0x%04x.\n", hv);
 #endif

	newid = (((unsigned long) hv) << 16) | vr;
 #ifdef WIB_VERBOSE
		printf("_wib_xbeeGetID: The XBEE_ID is 0x%08lx.\n", newid);
 #endif

	return newid;
}
#endif	// 0x0A44 <= CC_VER

/*** BeginHeader */
#endif	// __WRITEIDBLOCK_XBEE_LIB
/*** EndHeader */