/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*** BeginHeader  **********************************/
#ifndef __XMEM
#define __XMEM

#ifndef _xmem_debug
#define _xmem_debug __nodebug
#endif

#include <xmem.h>

/*** EndHeader ***********************************************/


/*** BeginHeader _gen_lin2seg ********************************/
void _gen_lin2seg(long* laddr, char norm);
#define _lin2seg(laddr) _gen_lin2seg(laddr, 0xe)
/*** EndHeader ***********************************************/

_xmem_debug
void _gen_lin2seg(long* laddr, char norm) {
#asm __nodebug
	push ix

    	ld hl, (sp+@sp+2+norm)
      ld bc,hl
      ld	ix, (sp+@sp+2+laddr)
      ld	a,(ix+2)
      ld	hl, (ix)
		_GEN_LIN2SEG(c)
      ld (ix),hl
		ex jk,hl     ; segment in jk from _GEN_LIN2SEG
      ld (ix+2), hl

	pop	ix
#endasm
}


/* START LIBRARY DESCRIPTION *********************************************
XMEM.LIB

DESCRIPTION:
	Xtended memory support functions.

   Note: _xavail, xavail and xrelease moved into this library from
   lib\bioslib\stack.lib, since they are not needed by the BIOS.

FUNCTION DICTIONARY:
	root2xmem(,,)
	xmem2root(,,)
	xmem2xmem(,,)
   _xavail(,,)
   xavail()
   xrelease(,)
	WriteFlash(,,)
	WriteFlashArray(,,,,)
	WriteFlash2Array(,,,)
	paddr()
	paddrDS()
	paddrSS()
	xstrlen()
	xmemchr()
	xmemcmp()

Deprecated and replaced by macros that use far pointer casting:
	xgetint()
	xsetint(,)
	xgetlong()
	xsetlong(,)

END DESCRIPTION **********************************************************/

/*** BeginHeader root2xmem ***********************************/
int root2xmem(unsigned long dest, const void* rootSrc, unsigned len);
#define root2xmem(dest,src,len)	xmem2xmem(dest,paddr(src),len)
/*** EndHeader ***********************************************/

/* START FUNCTION DESCRIPTION ********************************************
root2xmem                     <XMEM.LIB>

SYNTAX: int root2xmem(unsigned long dest, const void *src, unsigned len);

PARAMETER1:		Physical address of destination.
PARAMETER2:		Logical address of source data.
PARAMETER3:		Length of source data in bytes.

DESCRIPTION:   Stores "len" characters from logical address "src" to
physical address "dest".

RETURN VALUE:	0 - success
				  -1 - attempt to write flash area, nothing written
				  -2 - source not all in in root

SEE ALSO:		xmem2xmem, xmem2root

END DESCRIPTION *********************************************************/
_xmem_debug __useix
int (root2xmem)(unsigned long dest, const void *src, unsigned len)
{
	return xmem2xmem(dest,paddr(src),len);
}


/*** BeginHeader xmem2root ***********************************/
//int xmem2root(unsigned long dest, void* rootSrc, unsigned len);
int xmem2root(void *dest, unsigned long src, unsigned len);
#define xmem2root(dest,src,len)		xmem2xmem(paddr(dest),src,len)
/*** EndHeader ***********************************************/

/* START FUNCTION DESCRIPTION ********************************************
xmem2root                     <XMEM.LIB>

SYNTAX: int xmem2root(void *dest, unsigned long src, unsigned len);

PARAMETER1:		Logical address of destination.
PARAMETER2:		Physical address of source data.
PARAMETER3:		Length of source data in bytes.

DESCRIPTION:   Stores "len" characters from physical address "src" to
logical address "dest".

RETURN VALUE:	0 - success
				  -1 - attempt to write flash area, nothing written
				  -2 - dest not all in in root

SEE ALSO:		xmem2xmem, root2xmem

END DESCRIPTION *********************************************************/
_xmem_debug __useix
int (xmem2root)(void *dest,unsigned long int src, unsigned int len)
{
	return xmem2xmem(paddr(dest),src,len);
}

/*** BeginHeader xmem2xmem ***/
int xmem2xmem(unsigned long dest, unsigned long src, unsigned int length);
/*** EndHeader ***********************************************/

/* START FUNCTION DESCRIPTION ********************************************
xmem2xmem                     <XMEM.LIB>

SYNTAX: int xmem2xmem(unsigned long dest, unsigned long src, unsigned len);

PARAMETER1:		Physical address of destination.
PARAMETER2:		Physical address of source data.
PARAMETER3:		Length of source data in bytes.

DESCRIPTION:   Stores "len" characters from physical address "src" to
physical address "dest".

RETURN VALUE:	0 - success
				  -1 - attempt to write flash area, nothing written

SEE ALSO:		xmem2root, root2xmem

END DESCRIPTION *********************************************************/

_xmem_debug
int xmem2xmem(unsigned long dest, unsigned long src, unsigned int len)
{
#if FAST_RAM_COMPILE && (_SERIAL_BOOT_FLASH_ == 0)
	#if defined RAM2_START && defined RAM2_SIZE
	// typical load-to-flash, run-in-RAM has flash mapped above the second RAM
	if (dest + len > ((unsigned long) (RAM2_START + RAM2_SIZE) << 12))
	{
		return -1;							// destination is in flash!
	}
	#else
	// atypical load-to-flash, run-in-RAM has flash mapped above the sole RAM
	if (dest + len > ORG_RAM_SIZE)
	{
		return -1;							// destination is in flash!
	}
	#endif
#elif FLASH_COMPILE
	// normal run-in-flash has flash mapped below RAM
	if (dest < ORG_FLASH_SIZE)
	{
		return -1;							// destination is in flash!
	}
#endif

	// _f_memcpy does the same job as xmem2xmem, only better.
	_f_memcpy((void __far *) dest, (void __far *) src, len);

   return 0;

}

/*** BeginHeader xavail */
long xavail(long * addr_ptr);
#define xavail(addr_ptr)	_xavail(addr_ptr, 1, XALLOC_MAYBBB)
/*** EndHeader */
/* START FUNCTION DESCRIPTION ********************************************
xavail                        <XMEM.LIB>

SYNTAX: long xavail(long * addr_ptr);

DESCRIPTION: Returns the maximum length of memory that may be successfully
obtained by an immediate call to xalloc(), and optionally allocates that
amount.

PARAMETER1: addr_ptr: Address of a longword, in root data memory, to store
the address of the block.  If this pointer is NULL, then the block is not
allocated.  Otherwise, the block is allocated as if by a call to xalloc().

RETURN VALUE: The size of the largest free block available.  If this is
zero, then *addr_ptr will not be changed.

KEYWORDS: xalloc

SEE ALSO: xalloc, _xalloc, _xavail, xrelease, xalloc_stats
END DESCRIPTION *********************************************************/

_xmem_debug
long (xavail)(long * addr_ptr)
{
	return _xavail(addr_ptr, 1, XALLOC_MAYBBB);
}

/*** BeginHeader WriteFlashArray, _f_WriteFlashArray */
int WriteFlashArray(int flashnum, unsigned long flashDst,
	                 const void * const src[],
                    const unsigned numbytes[],
                    int numsources);
int _f_WriteFlashArray(int flashnum, unsigned long flashDst,
	                 const void __far * const __far * src,
                    const unsigned __far * numbytes,
                    int numsources);
/*** EndHeader ***********************************************/

// This function is for parallel flash only. Use sbfWriteFlash
// to write to serial boot flash.

_xmem_debug
int WriteFlashArray(int flashnum, unsigned long flash_destination,
                    const void * const sources[],
                    const unsigned int numbytes[],
                    int numsources)
{
	#define _WFA_MAX_SOURCES 50
	const void __far * s[_WFA_MAX_SOURCES];
	word i;

	if (numsources > _WFA_MAX_SOURCES)
		return -1;
	// Expand out the sources to far pointers
	for (i = 0; i < numsources; ++i)
		s[i] = sources[i];
	return _f_WriteFlashArray(flashnum, flash_destination,
					s, numbytes, numsources);
}

_xmem_debug
int _f_WriteFlashArray(int flashnum, unsigned long flash_destination,
                    const void __far * const __far * source_buffer,
                    const unsigned __far * source_size,
                    int number_of_sources)
{
   unsigned long working_flash_address; // Used to write the buffer data.
   auto unsigned int total_bytes, previous_total_bytes; // For error checking.
   int i; // Index variable.
   char __far * buffer; // The working buffer pointer.
   unsigned int bytes_remaining; // For the erasure judgements
#ifdef _ENABLE_16BIT_FLASH_
   unsigned int actual_bytes_to_write; // Always write an even number
   auto unsigned int word_data; // The 2 bytes to write on either end.
#endif	// _ENABLE_16BIT_FLASH_

   if (flashnum != 1) {
   	// In this version, only one flash is supported.
   	return -1;
   }

	working_flash_address = flash_destination; // Save for later.

	// Calculate the total number of bytes to write
	for (i = 0, total_bytes = 0; i < number_of_sources; ++i) {
   	previous_total_bytes = total_bytes;
		total_bytes += source_size[i];
      if (total_bytes < previous_total_bytes) {
      	// The sum of the source buffer bytes is 64k or greater!
      	return -2;
      }
	}

   // Erase sectors only if necessary. Check each byte of data against its
   // intended flash destination. If an erase is necessary, erase the sector.
   // Subsequent checks within an erased sector should all not trigger another
   // erase.
   //    Flash data can only be written down, so going through the possibilities
   // we see that we can only fail to write when the flash bit is 0 and the data
   // bit is 1. This is exactly the condition expressed below using bitwise
   // logical operation.
   for (i = 0; i < number_of_sources; ++i) {
   	buffer = (char __far *) source_buffer[i];  // Current buffer
      for (bytes_remaining = source_size[i]; bytes_remaining > 0;
           --bytes_remaining)
      {
         if (*buffer++ & (~*(__far char *)flash_destination++) & 0x00FF) {
            _EraseFlashRange(flash_destination, flash_destination);
         }
      }
   }
#ifdef _ENABLE_16BIT_FLASH_
   // Word write flash is the lowest common denominator, so plan for it here.
   // Writing 0xFF to an unerased flash does nothing to the contents of the
   // flash since one can only write values down, and that is the trick that is
   // used here to simplify the logic.
   // The above strategy did not work for Spansion parts. The device becomes
   // unreadable after attempting to write a 0 bit to 1. (Thanks, Spansion!)
   // Instead we write exactly the data that's there.
   for (i = 0; i < number_of_sources; ++i) {
   	buffer = (char __far *)source_buffer[i];  // Current buffer
      bytes_remaining = source_size[i];   // Current byte count
      if (working_flash_address & 1) {             // If the offset is odd
         --working_flash_address;                  // Back up a byte (write a word)
         word_data = *buffer++ << 8 | *(__far char *)working_flash_address;  // Set up the word
         if (_ProgramFlashBlock(working_flash_address, (void __far *)&word_data, 2))
         	return -4;	// Write the word and return on error.
         --bytes_remaining; // One byte of the buffer was actually written.
         working_flash_address += 2; // Advance the flash offset and buffer (above).
      }
      actual_bytes_to_write = bytes_remaining & ~1u;	// Get even size.
      if (_ProgramFlashBlock(working_flash_address, buffer, actual_bytes_to_write))
			return -5; // Write the even aligned buffer an even size.
      buffer += actual_bytes_to_write;
      working_flash_address += actual_bytes_to_write;
      bytes_remaining -= actual_bytes_to_write;
      if (bytes_remaining) {	// Is there anything left?
      	// The word_data logic here is the mirror image of that above.
         word_data = *buffer | *((__far char *) working_flash_address + 1) << 8;
         if (_ProgramFlashBlock(working_flash_address, (void __far *)&word_data, 2))
         	return -6;
         working_flash_address += 2;
      }
   }
#else
	// Byte write flash has no alignment issues to be concerned about.
	for (i = 0; i < number_of_sources; ++i) {
		buffer = (char __far *) source_buffer[i];	// Current buffer
		bytes_remaining = source_size[i];	// Current byte count
		// Write the buffer, no matter its size or alignment.
		if (_ProgramFlashBlock(working_flash_address, buffer, bytes_remaining)) {
			return -5;
		}
		working_flash_address += bytes_remaining;
	}
#endif	// _ENABLE_16BIT_FLASH_

   return 0;
}

/*** BeginHeader WriteFlash ***********************************/
int WriteFlash(unsigned long flashDst, const void * src,
               unsigned int len);
/*** EndHeader ***********************************************/

/* START _FUNCTION DESCRIPTION ********************************************
WriteFlash                    <XMEM.LIB>

SYNTAX: int WriteFlash(unsigned long flashDst, const void* rootSrc, unsigned len);

DESCRIPTION: Write len bytes to physical address flashDst from rootSrc.
the source must be in root. It is OK to cross a 1k page boundary in flash.
This function is not reentrant.

NOTE 1: It is unwise to use this function and depend on flash sector sizes
not changing. Rabbit Semiconductor/Rabbit makes no guarantee that any
board will always have the same flash type. Some products may be released
with large sector flash which makes rewriting flash at run-time
impractical if there is not a lot of RAM available for for a transfer
buffer.

A better alternative for storing things in flash is to use the User ID
Block. The functions writeUserBlock() and readUserBlock() are available to
access the block. These function are and will continue to be machine code
and source code compatible with use on huge sector flash types.

NOTE 2:  This function is extremely dangerous when used with large-sector
flash.  Don't do it.

NOTE 3:  As of Dynamic C 7.25, the hardware watchdog timer is hit when
calling WriteFlash() since repeated writes to 4kb or larger sectors may
take too long for the virtual watchdog to successfully update it.  Keep
this in consideration when using WriteFlash().
(NOTE: "call hitwd" HAS BEEN COMMENTED OUT!)

NOTE 4: This function is for parallel flash only. Use sbfWriteFlash
to write to serial boot flash.

PARAMETER1:  the physical address of the flash destination
PARAMETER2:  pointer to the root source
PARAMETER3:  number of bytes to write

RETURN VALUE:	0 - success
				  -1 - attempt to write non-flash area, nothing written
				  -2 - rootSrc not in root
				  -3 - timeout while writing flash
				  -4 - attempt to write to ID block sector(s)

END DESCRIPTION *********************************************************/

_xmem_debug
int WriteFlash(unsigned long flashDst, const void * src, unsigned int len)
{
	return WriteFlashArray(1, flashDst, &src, &len, 1);
}

/*** BeginHeader paddr_far */

/* START FUNCTION DESCRIPTION ********************************************
paddr_far                         <XMEM.LIB>

SYNTAX:  void far * paddr_far(const void far *pointer)

DESCRIPTION:  Converts a far pointer generated by a normal C upcast from
			a near pointer, into a true physical address pointer.  Most
			programs do not require this function, however it is useful
			when using multitasking or co-processes which have different
			stacks.  In this case, upcast pointers to auto variables may
			not be valid in the other tasks' context.  Use of this function
			will adjust such pointers to values which can be used in any
			context.

			To understand the need for this function, consider the following:
			When your C program upcasts a pointer according to code like
			this:

			  auto int foo;
			  int far * bar;

			  bar = &foo;

			then the actual value stored in the 'bar' pointer is
			  0xFFFF0000 | (&foo)
			where '&foo' is the normal (16 bit) logical address of foo.  All use
			of the 'bar' pointer will thus access 'foo' as if it was at the
			original near address; but this is not valid in a different task's
			context or if the MMU settings are changed.  The 0xFFFF0000 value in
			the pointer is merely telling the CPU to use the current MMU settings
			when that pointer is used.  Any other value in the 16 MSBs of the
			32-bit pointer indicated a fixed physical address.

			This function converts the above "long logical" format into a true
			physical (linear) format, which will correctly address the target
			variable in any context.


PARAMETER1:  pointer to convert, in long logical format

RETURN VALUE:	same pointer, with all memory mapping performed according to
				the current MMU settings, as a true linear address.

SEE ALSO:  paddr
END DESCRIPTION *********************************************************/

void __far * paddr_far(const void __far *pointer);

/*** EndHeader */

_xmem_debug
void __far * paddr_far(const void __far *pointer)
{
#asm __nodebug
		ld		bcde,(sp+@sp+pointer)
      call  dkcLongLogicalToPhysical
      ld		px,bcde
#endasm
}



/*** BeginHeader paddr */

/* START FUNCTION DESCRIPTION ********************************************
paddr                         <XMEM.LIB>

SYNTAX:  unsigned long paddr(const void *pointer)

DESCRIPTION:  Converts a logical pointer into its physical address.  This
              function is compatible with both shared and separate I&D
              space compile modes.  Use caution when converting a pointer
              into the xmem window (0xE000 to 0xFFFF), as this function
              will return the physical address based on the XPC on entry.

PARAMETER1:  pointer to convert

RETURN VALUE:  The physical address of the logical address that is pointed
               to by pointer.
END DESCRIPTION *********************************************************/

unsigned long paddr(const void *pointer);

/*** EndHeader */

_xmem_debug
unsigned long paddr(const void *pointer)
{
#asm __nodebug
		xor 	a							; Checking for D space
		ld		c, 0						; default to no A16, A19 inversions in xor mask
		ld		hl, (sp+@SP+pointer)	; get logical address into HL
      call  dkcLogicalToPhysical
#endasm
}

/*** BeginHeader paddrDS */

/* START FUNCTION DESCRIPTION ********************************************
paddrDS                       <XMEM.LIB>

SYNTAX: unsigned long paddrDS(const void* pointer)

DESCRIPTION:  The paddrDS function is deprecated and has been replaced by
              a macro redefining it to simply paddr.  Refer to the paddr
              function help for usage information.

PARAMETER1:  pointer to convert

RETURN VALUE:  The physical address of the logical address that is pointed
               to by pointer.
END DESCRIPTION *********************************************************/

#define paddrDS paddr

/*** EndHeader */

/*** BeginHeader paddrSS */

/* START FUNCTION DESCRIPTION ********************************************
paddrSS                       <XMEM.LIB>

SYNTAX: unsigned long paddrSS(const void* pointer)

DESCRIPTION:  The paddrSS function is deprecated and has been replaced by
              a macro redefining it to simply paddr.  Refer to the paddr
              function help for usage information.

PARAMETER1:  pointer to convert

RETURN VALUE:  The physical address of the logical address that is pointed
               to by pointer.
END DESCRIPTION *********************************************************/

#define paddrSS paddr

/*** EndHeader */


/*** BeginHeader xstrlen */

/* START FUNCTION DESCRIPTION ********************************************
xstrlen                       <XMEM.LIB>

SYNTAX: unsigned int xstrlen(long src)

NOTE: This function has been deprecated; use strlen((char far *)src) instead.

END DESCRIPTION *********************************************************/

__xmem unsigned int xstrlen(long src);
#define xstrlen(src)		strlen((char __far *)(src))
/*** EndHeader */


_xmem_debug
__xmem unsigned int (xstrlen)(long src) {
 	return strlen((char __far *)src);
}

/*** BeginHeader xmemset */

/* START FUNCTION DESCRIPTION ********************************************
xmemset                       <XMEM.LIB>

SYNTAX: void xmemset(long dst, char c, unsigned len)

NOTE: This function has been deprecated; use
			_f_memset((void far *)(dst), c, len)

END DESCRIPTION *********************************************************/

__xmem void xmemset(long dst, char c, unsigned len);
#define xmemset(dst, c, len)		_f_memset((void __far *)(dst), c, len)
/*** EndHeader */


_xmem_debug
__xmem void (xmemset)(long dst, char c, unsigned len) {
	_f_memset((void __far *)dst, c, len);
}

/*** BeginHeader xmemchr */

/* START FUNCTION DESCRIPTION ********************************************
xmemchr                       <XMEM.LIB>

SYNTAX: long xmemchr(long src, char ch, unsigned short n)

NOTE: This function has been deprecated; use
			_f_memchr((void far *)(src), ch, n)
		and cast the result to "long" if the calling code cannot be modified
		to use far pointers.

END DESCRIPTION *********************************************************/

long xmemchr(long src, char ch, unsigned short n);
#define xmemchr( src, ch, n)		(long)_f_memchr((void __far *)(src), ch, n)
/*** EndHeader */


_xmem_debug
long (xmemchr)(long src, char ch, unsigned short n) {
	return (long)_f_memchr((void __far *)src, ch, n);
}

/*** BeginHeader xmemcmp */

/* START FUNCTION DESCRIPTION ********************************************
xmemcmp                       <XMEM.LIB>

SYNTAX: int xmemcmp(long xstr, const char * str, unsigned short n)

NOTE: This function has been deprecated; use
			memcmp((void far *)xstr, str, n)

END DESCRIPTION *********************************************************/

int xmemcmp(long xstr, const char * str, unsigned short n);
#define xmemcmp(xstr, str, n)		memcmp((__far char*)(xstr), str, n)
/*** EndHeader */


_xmem_debug
int (xmemcmp)(long xstr, const char * str, unsigned short n) {
   if (!n)
   	return 0;

   return memcmp((__far char*)xstr, (__far char*)str, n);
}

/*** BeginHeader _xgetint */

/* START FUNCTION DESCRIPTION ********************************************
xgetint                       <XMEM.LIB>

SYNTAX: int xgetint(long src)

DESCRIPTION: Return the integer pointed to by src.  This is the most
             efficient function for obtaining 2 bytes from xmem.

PARAMETER1:  xmem (linear) address of the integer value to retrieve.

RETURN VALUE:	Integer value (2-bytes) at src.

Note: As of Dynamic C 10.54, this function has been replaced by the following
		macro:

			#define xgetint(xaddr)        (*(int far *)(xaddr))

		If you need to use the function, it's still available as _xgetint.

END DESCRIPTION *********************************************************/
#define xgetint(xaddr)        (*(int __far *)(xaddr))
__root int _xgetint(long src);
/*** EndHeader */
// Note that this is a root function so that we can use ret cc instruction,
// and have slightly less call/return overhead.
#asm __root __nodebug
_xgetint::
	ld		pw,bcde
   ld		hl,(pw)  ; Get the value
	ret
#endasm

/*** BeginHeader _xsetint */

/* START FUNCTION DESCRIPTION ********************************************
xsetint                       <XMEM.LIB>

SYNTAX: void xsetint(long dst, int val)

DESCRIPTION: Set the integer pointed to by dst.  This is the most
             efficient function for writing 2 bytes to xmem.

PARAMETER1:  xmem (linear) address of the integer value to set.
PARAMETER2:  value to store into the above location.

Note: As of Dynamic C 10.54, this function has been replaced by the following
		macro:

			#define xsetint(xaddr,val)    (*(int far *)(xaddr)=(val))

		If you need to use the function, it's still available as _xsetint.

END DESCRIPTION *********************************************************/
#define xsetint(xaddr,val)    (*(int __far *)(xaddr)=(val))
__root void _xsetint(long dst, int val);
/*** EndHeader */
#asm __root __nodebug
_xsetint::
	ld		hl,(sp+6)		; HL = value
   ld		pw,bcde
   ld		(pw),hl
	ret
#endasm

/* START FUNCTION DESCRIPTION ********************************************
xgetlong                      <XMEM.LIB>

SYNTAX: long xgetlong(long src)

DESCRIPTION: Return the longword pointed to by src.  This is the most
             efficient function for obtaining 4 bytes from xmem.

PARAMETER1:  xmem (linear) address of the long value to retrieve.

RETURN VALUE:	Long integer value (4-bytes) at src.

Note: As of Dynamic C 10.54, this function has been replaced by the following
		macro:

			#define xgetlong(xaddr)       (*(long far *)(xaddr))

		If you need to use the function, it's still available as _xgetlong.

END DESCRIPTION *********************************************************/


/* START FUNCTION DESCRIPTION ********************************************
xgetfloat                     <XMEM.LIB>

SYNTAX: float xgetfloat(long src)

DESCRIPTION: Return the float pointed to by src.  This is the most
             efficient function for obtaining 4 bytes from xmem.

PARAMETER1:  xmem (linear) address of the long value to retrieve.

RETURN VALUE:	float value (4-bytes) at src.

Note: As of Dynamic C 10.54, this function has been replaced by the following
		macro:

			#define xgetfloat(xaddr)       (*(float far *)(xaddr))

		If you need to use the function, it's still available as _xgetfloat.

END DESCRIPTION *********************************************************/

/*** BeginHeader _xgetlong, _xgetfloat */
#define xgetlong(xaddr)       (*(long __far *)(xaddr))
#define xgetfloat(xaddr)       (*(float __far *)(xaddr))
__root float _xgetfloat(long src);
__root long _xgetlong(long src);
/*** EndHeader */

#asm __root __nodebug
_xgetlong::
_xgetfloat::      ; function is ignorant of data type so same code works
	ld pw, (sp + 2)
   ld bcde, (pw)
   ret
#endasm


/* START FUNCTION DESCRIPTION ********************************************
xsetlong                      <XMEM.LIB>

SYNTAX: void xsetlong(long dst, long val)

DESCRIPTION: Set the long integer pointed to by dst.  This is the most
             efficient function for writing 4 bytes to xmem.

PARAMETER1:  xmem (linear) address of the long integer value to set.
PARAMETER2:  value to store into the above location.

Note: As of Dynamic C 10.54, this function has been replaced by the following
		macro:

			#define xsetlong(xaddr,val)   (*(long far *)(xaddr)=(val))

		If you need to use the function, it's still available as _xsetlong.

END DESCRIPTION *********************************************************/

/* START FUNCTION DESCRIPTION ********************************************
xsetfloat                     <XMEM.LIB>

SYNTAX: void xsetfloat(long dst, float val)

DESCRIPTION: Set the float pointed to by dst.  This is the most
             efficient function for writing 4 bytes to xmem.

PARAMETER1:  xmem (linear) address of the float value to set.
PARAMETER2:  value to store into the above location.

Note: As of Dynamic C 10.54, this function has been replaced by the following
		macro:

			#define xsetfloat(xaddr,val)   (*(float far *)(xaddr)=(val))

		If you need to use the function, it's still available as _xsetfloat.

END DESCRIPTION *********************************************************/

/*** BeginHeader _xsetlong, _xsetfloat */
#define xsetlong(xaddr,val)   (*(long __far *)(xaddr)=(val))
#define xsetfloat(xaddr,val)   (*(float __far *)(xaddr)=(val))
__root void _xsetfloat(long dst, float val);
__root void _xsetlong(long dst, long val);
/*** EndHeader */

#asm __root __nodebug
_xsetlong::
_xsetfloat::   ; function is ignorant of data type so same code works
   ld		pw, bcde    ; Target address
	ld		bcde,(sp+6)		; BCDE = value
   ld		(pw),bcde
	ret
#endasm

/*** BeginHeader _xmem_gc */
/*=== Do NOT call this function from C! ===*/
__root int _xmem_gc(char * p);
/*** EndHeader */

#asm __root __nodebug
_xmem_gc::
   ex		jk',hl
   ex		jk,hl
   ld		lxpc,hl
   ex		jk',hl
	ld		l,(hl)
	ld		h,0				; HL contains source byte
	lret
#endasm

/*** BeginHeader _xmem_pc */
/*=== Do NOT call this function from C! ===*/
__root char * _xmem_pc(char * p, int val);
/*** EndHeader */

#asm __root __nodebug
_xmem_pc::
   ex		jk',hl
   ex		jk,hl
   ld		lxpc,hl
   ex		jk',hl
	ld		(hl),e
	lret
#endasm


/*** BeginHeader _xmem_mvc */
/*=== Do NOT call this function from C! ===*/
__root char * _xmem_mvc(char * p, char * q, word len);
/*** EndHeader */

#asm __root __nodebug
_xmem_mvc::
   ex		jk',hl
   ex		jk,hl
   ld		lxpc,hl
   ex		jk',hl
	ldir
	lret
#endasm

/*** BeginHeader _xmem_mvc_ioe2mem */
/*=== Do NOT call this function from C! ===*/
__root char * _xmem_mvc_ioe2mem(char * p, char * q, word len);
/*** EndHeader */

#ifdef _ENABLE_16BIT_FLASH_
 #ifdef __ALLOW_16BIT_AUXIO_DEFECT
	#warns "Defining __ALLOW_16BIT_AUXIO_DEFECT exposes an ioe bug in exchange"
	#warns " for improved memory performance.  See the Rabbit 4000 Users Manual"
	#warns " Appendix B (errata section) or TN255 for complete details."
	#warns "You may comment out these warning messages if you are certain your"
	#warns " application is not at risk and absolute top performance is required."
 #endif
#endif

#asm __root __nodebug
_xmem_mvc_ioe2mem::
   ex		jk',hl
   ex		jk,hl
   ld		lxpc,hl
   ex		jk',hl

.r3ka: ;R3000A or better...
	_IOELSIDR
.exit:
	lret
#endasm

/*** BeginHeader _xmem_mvc_ioi2mem */
/*=== Do NOT call this function from C! ===*/
__root char * _xmem_mvc_ioi2mem(char * p, char * q, word len);
/*** EndHeader */

#asm __root __nodebug
_xmem_mvc_ioi2mem::
   ex		jk',hl
   ex		jk,hl
   ld		lxpc,hl
   ex		jk',hl

.r3ka:  ;R3000A or better...
	_IOILSIDR
.exit:
	lret
#endasm

/*** BeginHeader _xmem_mvc_mem2ioe */
/*=== Do NOT call this function from C! ===*/
__root char * _xmem_mvc_mem2ioe(char * p, char * q, word len);
/*** EndHeader */

#ifdef _ENABLE_16BIT_FLASH_
 #ifdef __ALLOW_16BIT_AUXIO_DEFECT
	#warns "Defining __ALLOW_16BIT_AUXIO_DEFECT exposes an ioe bug in exchange"
	#warns " for improved memory performance.  See the Rabbit 4000 Users Manual"
	#warns " Appendix B (errata section) or TN255 for complete details."
	#warns "You may comment out these warning messages if you are certain your"
	#warns " application is not at risk and absolute top performance is required."
 #endif
#endif

#asm __root __nodebug
_xmem_mvc_mem2ioe::
   ex		jk',hl
   ex		jk,hl
   ld		lxpc,hl
   ex		jk',hl

.r3ka:  ;R3000A or better...
	_IOELDISR
.exit:
	lret
#endasm

/*** BeginHeader _xmem_mvc_mem2ioi */
/*=== Do NOT call this function from C! ===*/
__root char * _xmem_mvc_mem2ioi(char * p, char * q, word len);
/*** EndHeader */

#asm __root __nodebug
_xmem_mvc_mem2ioi::
   ex		jk',hl
   ex		jk,hl
   ld		lxpc,hl
   ex		jk',hl

.r3ka:  ;R3000A or better...
	_IOILDISR
.exit:
	lret
#endasm

/*** BeginHeader _xmem_clc */
/*=== Do NOT call this function from C! ===*/
__root char * _xmem_clc(char * p, char * q, word len);
/*** EndHeader */

#asm __root __nodebug
_xmem_clc::
   ex		jk',hl
   ex		jk,hl
   ld		lxpc,hl
   ex		jk',hl
.loop:
	ld		a,(de)
   inc	de
   sub	(hl)
   inc	hl
   jr		nz,.retn
	djnz	.loop
   dec	c
   jr		nz,.loop
.retn:
	lret
#endasm

/*** BeginHeader xGetQuadrant */
int xGetQuadrant(unsigned long PhyAddr);
/*** EndHeader */

_xmem_debug
int xGetQuadrant(unsigned long PhyAddr)
{
	auto unsigned long retval;

   retval = PhyAddr >> (MSB_BIT - 1);
   if (retval >= 4) {
      retval = -1;
   }

	return (int)retval;
}


/*** BeginHeader  ***********************************/
#endif
/*** EndHeader ***********************************************/