/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/* START LIBRARY DESCRIPTION *********************************************
RC4.LIB

DESCRIPTION: Implementation of the RC4 stream Cipher for SSL, WEP and TKIP.


API:

  Note that the naming convention is inconsistent for historical reasons.

  RC4Process()
  rc4_skip()
  RC4Skip()      <- recommended for new code

    These functions are used for applications which require a new RC4 state
    for each encryption/decryption, and do not re-use the state for later
    blocks of data.  This is the case for WEP and TKIP, since a different
    IV (key) is used for each packet.

    The key length must be a power of 2 for these functions!

    These functions transform the data in-place (encryption and decryption are
    the same, since the data is simply XOR'd with the pseudo-random stream).

    It is recommended to exclusively use RC4Skip(), since that is the most
    general function, and is also the most efficient since the other functions
    are just wrappers.

  RC4_init()
  RC4_xop()
  RC4Init()       <- recommended for new code
  RC4Transform()  <- recommended for new code

    These functions allow the same RC4 state (a RC4_state_t struct) to be used
    to allow stream encryption/decryption of one or more data packets.

    The data is transformed to a potentially different buffer, however the input
    and output buffers may in fact be the same area, thus transforming in-place.

    The key length is arbitrary, however only the first 256 bytes will be
    used.

    The RC4_init() function has some ignored parameters, since the function
    prototype is designed to be compatible with block cyphers which make a
    distinction between encryption and decryption, and have initialization
    vectors.  Since RC4 is a stream cypher, these parameters are irrelevant.

    It is recommended to use RC4Init() and RC4Transform(), since the other
    functions are wrappers which simply convert a near state struct to a
    far pointer.


- Algorithm taken from 'Applied Cryptography, 2nd Edition; Bruce Schneier'

END DESCRIPTION **********************************************************/

/*** BeginHeader ***/

#ifndef _RC4_H
#define _RC4_H

#ifdef RC4_DEBUG
	#define _rc4_debug __debug
#else
	#define _rc4_debug __nodebug
#endif


// State structure for RC4 encryption/decryption
typedef struct {
	unsigned char i;
	unsigned char j;
	unsigned char box[256];
} RC4_state_t;

/*** EndHeader ***/

/*** BeginHeader RC4Process */
void RC4Process (uint8 *key, word keyLen, __far uint8 *data, word dataLen);
/*** EndHeader */

__nodebug
void RC4Process (uint8 *key, word keyLen, __far uint8 *data, word dataLen)
{
	RC4Skip(key, keyLen, 0, data, dataLen);
}

/*** BeginHeader rc4_skip */
void rc4_skip(uint8 *key, word keyLen, word skip, __far uint8 *data, word dataLen);
/*** EndHeader */

__nodebug
void rc4_skip(uint8 *key, word keyLen, word skip, __far uint8 *data, word dataLen)
{
	RC4Skip(key, keyLen, skip, data, dataLen);
}

/*** BeginHeader RC4Skip */
void RC4Skip(__far uint8 *key, word keyLen, word skip,
					__far uint8 *data, word dataLen);
/*** EndHeader */

// This is a generalized form of RC4Process, which allows an initial 'skip'
// bytes to be processed but discarded.  Used by EAPOL key decryption.
_rc4_debug
void RC4Skip(__far uint8 *key, word keyLen, word skip,
					__far uint8 *data, word dataLen)
{
/*
   auto uint8 sbox[256];
	auto word i,j,m,index;
   auto uint8 temp;


   // Setup the key box, initialize the s-box
   for(i = 0; i < 256; ++i)
   	sbox[i] = i;

   // Generate permutation from key
   j = 0;
   m = keyLen-1;	// Modular mask, assumes power of 2 key length
   for(i = 0; i < 256; i++) {
    	j = (j + sbox[i] + key[i&m]) & 255;

      // Swap sbox[i], sbox[j]
		temp = sbox[i];
      sbox[i] = sbox[j];
      sbox[j] = temp;
   }

	j = 0;
   for(index = 0; index < dataLen; index++) {
   	// Calculate new i, j
		i = (i + 1) & 255;
      j = (j + sbox[i]) & 255;

      // Swap S[i] and S[j]
		temp = sbox[i];
      sbox[i] = sbox[j];
      sbox[j] = temp;

      // Encrypt/Decrypt to output
      *data ^= sbox[sbox[i] + sbox[j] & 255];
      ++data;
	}
*/
#asm
	ld		py,px				; py points to key
	ld		hl,(sp+@sp+keyLen)
	dec	hl
	ld		de,hl				; de is key length modular mask (assume power of 2 i.e.
								; 8 or 16 key len)
	ld		px,(sp+@sp+data)	; px points to data to encrypt/decrypt in place
	ld		hl,(sp+@sp+dataLen)
	test	hl
	jp		z,.exit
	ld		bc,hl				; bc is data length
	ld		hl,(sp+@sp+skip)
	ex		jk,hl				; jk is skip length
	ld		hl,-256
	add	hl,sp
	ld		sp,hl				; create sbox on stack
	push	pw
	ldl	pw,hl				; pw points to sbox base
	ld		hl,bc
	ex		jk,hl
	push	jkhl				; push data length and skip amount; skip lowest on stack

	; init sbox 00,01,02...FF
	ld		pz,pw
	exx
	ld		jk,0x0302
	ld		hl,0x0100
	ld		bc,0x0404
	ld		de,0x0404
.loop1:
	; we can unroll the loop to do 16 bytes at a time
	ld		(pz+0),jkhl
	add	jkhl,bcde
	ld		(pz+4),jkhl
	add	jkhl,bcde
	ld		(pz+8),jkhl
	add	jkhl,bcde
	ld		(pz+12),jkhl
	ld		pz,pz+16
	add	jkhl,bcde
	jr		nc,.loop1		; there will be a carry out only when table is filled
	exx

	; generate initial sbox permutation based on repeated key a-la...
   ; for(i = 0; i < 256; i++)
   ; 	  j = (j + sbox[i] + key[i&m]) & 255;
   ;    swap(sbox[i], sbox[j]);
	ld		pz,pw				; pz points to sbox[i] (i = 0..255)
	clr	hl					; i mod (DE+1) == i & m
	ld		bc,hl				; C used as j, B used as counter 255..0
.loop2:
	ld		a,(py+hl)		; get key[i&m]
	ld		de',hl			; preserve i&m.
	ld		hl,(pz)			; L = sbox[i]
	add	a,L
	add	a,c
	ld		c,a				; C = j = (j + sbox[i] + key[i&m]) & 255
	ld		a,L				; save sbox[i] in A.
	ld		hl,bc
	ld		h,0
	ld		a',(pw+hl)		; A' = sbox[j]
	ld		(pw+hl),a		; sbox[j] = sbox[i]
	ex		af,af'
	ld		(pz),a			; sbox[i] = (old)sbox[j]
	ex		de',hl
	inc	hl
	and	hl,de
	ld		pz,pz+1
	djnz	.loop2

	; Do initial skip part
	pop	hl
	test	hl
	jr		z,.do_datastream
	ld		bc,hl				; get skip-length
	ld		hl,1				; L used for i (H remains zero)
	ld		de,0				; E used for j (D used for temp)
.loop3skip:
	ld		a,(pw+hl)		; A = sbox[i]
	ld		d,a				; save in D
	ld		de',hl			; DE' = i
	add	a,e
	ld		l,a				; HL = j = j + sbox[i] (mod 256)
	ld		a',(pw+hl)		; A' = sbox[j]
	ld		a,d
	ld		(pw+hl),a		; sbox[j] = sbox[i]
	ex		de',hl			; HL = i, DE' = j
	ex		af,af'
	ld		(pw+hl),a		; sbox[i] = (old)sbox[j]
	exx
	ld		de',de			; restore j on other side
	exx
	inc	L					; i = i + 1 (mod 256)
	dwjnz	.loop3skip
	pop	bc
	jr		.loop3

.do_datastream:
	; XOR data with bitstream
	; j = 0, i = 0;
   ; for(index = 0; index < dataLen; index++) {
	;	 i = (i + 1) & 255;
   ;   j = (j + sbox[i]) & 255;
	;   Swap S[i] and S[j]
   ;   *data ^= sbox[sbox[i] + sbox[j] & 255];
	pop	bc					; get data length
	ld		hl,1				; L used for i (H remains zero)
	ld		de,0				; E used for j (D used for temp)
.loop3:
	ld		a,(pw+hl)		; A = sbox[i]
	ld		d,a				; save in D
	ld		de',hl			; DE' = i
	add	a,e
	ld		l,a				; HL = j = j + sbox[i] (mod 256)
	ld		a',(pw+hl)		; A' = sbox[j]
	ld		a,d
	ld		(pw+hl),a		; sbox[j] = sbox[i]
	ex		de',hl			; HL = i, DE' = j
	ex		af,af'
	ld		(pw+hl),a		; sbox[i] = (old)sbox[j]
	add	a,d				; A = sbox[i] + sbox[j] (mod 256)
	exx
	ld		de',de			; restore j on other side
	ld		b,0
	ld		c,a
	ld		hl,(pw+bc)		; get L = sbox[A]
	ld		a,(px)
	xor	L
	ld		(px),a
	exx

	ld		px,px+1			; next data
	inc	L					; i = i + 1 (mod 256)
	dwjnz	.loop3

	pop	pw
	ld		hl,256
	add	hl,sp
	ld		sp,hl
.exit:
#endasm
}

/*** BeginHeader RC4_init ***/
int RC4_init(RC4_state_t * state, int direction, char * key, int key_length,
             char * iv);
/*** EndHeader

/* START _FUNCTION DESCRIPTION ********************************************
RC4_init                               <RC4.LIB>

SYNTAX: int RC4_init(RC4_state_t* state, int direction,
                     char* key, int key_length, char * iv);

DESCRIPTION: Initialize the RC4 sbox from key

PARAMETER 1: An RC4 state structure
PARAMETER 2: Direction (ignored)
PARAMETER 3: The key, stored as a an array of bytes
PARAMETER 4: The length of the key, must be less than 256
PARAMETER 5: Initialization vector (ignored)

RETURN VALUE: 0 on success, non-zero on failure

END DESCRIPTION **********************************************************/

__nodebug
int RC4_init(RC4_state_t * state, int direction, char* key, int key_length,
              char* iv)
{
	return RC4Init(state, direction, key, key_length, iv);
}

/*** BeginHeader RC4Init ***/
int RC4Init(void /*RC4_state_t*/ __far * state, int direction,
				 char __far * key, int key_length,
             char __far * iv);
/*** EndHeader */


_rc4_debug
int RC4Init(void /*RC4_state_t*/ __far * state, int direction,
	          char __far * key, int key_length,
             char __far * iv)
{

	// Check for errors
	if(!state || !key || key_length == 0) {
		return 1;
   }


#asm
	ld		px,(sp+@sp+state)
	; init sbox 00,01,02...FF
	ld		pz,px+[RC4_state_t]+box		; pw points to sbox base
	ld		jk,0x0302
	ld		hl,0x0100
	ld		bc,0x0404
	ld		de,0x0404
.loop1:
	; we can unroll the loop to do 16 bytes at a time
	ld		(pz+0),jkhl
	add	jkhl,bcde
	ld		(pz+4),jkhl
	add	jkhl,bcde
	ld		(pz+8),jkhl
	add	jkhl,bcde
	ld		(pz+12),jkhl
	ld		pz,pz+16
	add	jkhl,bcde
	jr		nc,.loop1		; there will be a carry out only when table is filled

	ld		py,(sp+@sp+key)				; py points to key
	ld		hl,(sp+@sp+key_length)
	ld		de,hl				; de is key length (1..256)
	; generate initial sbox permutation based on repeated key a-la...
   ; for(i = 0; i < 256; i++)
   ; 	  j = (j + sbox[i] + key[i mod key_length]) & 255;
   ;    swap(sbox[i], sbox[j]);
	ld		pz,px+[RC4_state_t]+box				; pz points to sbox[i] (i = 0..255)
	clr	hl					; hl contains i mod key_length (starts at 0)
	ld		(px+[RC4_state_t]+i),hl	; clear out the state counters
	ld		bc,hl				; C used as j, B used as counter 255..0
	ld		px,pz				; px used as base for accessing sbox[j]
.loop2:
	ld		a,(py+hl)		; get key[i mod key_length]
	ld		de',hl			; preserve i mod key_length.
	ld		hl,(pz)			; L = sbox[i]
	add	a,L
	add	a,c
	ld		c,a				; C = j = (j + sbox[i] + key[i mod key_length]) & 255
	ld		a,L				; save sbox[i] in A.
	ld		hl,bc
	ld		h,0
	ld		a',(px+hl)		; A' = sbox[j]
	ld		(px+hl),a		; sbox[j] = sbox[i]
	ex		af,af'
	ld		(pz),a			; sbox[i] = (old)sbox[j]
	ex		de',hl
	inc	hl
	cp		hl,de
	jr		nz,.cont1
	clr	hl
.cont1:
	ld		pz,pz+1
	djnz	.loop2

#endasm
	// Success!
   return 0;
}


/*** BeginHeader RC4_xop */
int RC4_xop(RC4_state_t* state, long message,
            long output, unsigned int length);
/*** EndHeader */


/* START _FUNCTION DESCRIPTION ********************************************
RC4_xop                                <RC4.LIB>

SYNTAX: int RC4_xop(RC4_state_t* state, long message,
                     long output, unsigned int length);

DESCRIPTION: Perform an RC4 encryption/decryption operation (the
             algorithm is symmetric, both enryption and decryption
             do the same thing to the input text)

             The key is only used by the initialization function, to
             generate the secret s-box used by the encryption/decryption
             operation.

PARAMETER 1: An RC4 state structure, initialized by _RC4_init
PARAMETER 2: The message, may be plaintext for encryption, or ciphertext
             for decryption (an xmem buffer)
PARAMETER 3: The output buffer, for return of encrypted/decrypted text (in xmem)
PARAMETER 4: The length of the message (assumes that the output buffer
             is at least as large as the message)

RETURN VALUE: 0 on success, non-zero on failure

END DESCRIPTION **********************************************************/

__nodebug
int RC4_xop(RC4_state_t * state, long message,
             long output, unsigned int length)
{
	return RC4Transform(state, (char __far *)message, (char __far *)output, length);
}

/*** BeginHeader RC4Transform */
int RC4Transform(void /*RC4_state_t*/ __far * state, const char __far * message,
            char __far * output, unsigned int length);
/*** EndHeader */



_rc4_debug
int RC4Transform(void /*RC4_state_t*/ __far * state, const char __far * message,
            char __far * output, unsigned int length)
{
	// Check for errors
	if(!state || !message || !output)
		return 1;

   if(length == 0)
    	return 0;


#asm
	; XOR data with bitstream
   ; for(index = 0; index < dataLen; index++)
	;	 i = (i + 1) & 255;
   ;   j = (j + sbox[i]) & 255;
	;   Swap S[i] and S[j]
   ;   *out++ = *in++ ^ sbox[sbox[i] + sbox[j] & 255];
   ld		px,(sp+@sp+state)
   ld		py,px+[RC4_state_t]+box				; point to sbox
   ld		hl,(sp+@sp+length)
	ld		bc,hl				; get data length
	ld		hl,(px+[RC4_state_t]+i)				; L used for i (H has j)
	ld		e,h				; E used for j (D used for temp)
	ld		h,0				; H remains zero
	push	pw
	ld		pw,(sp+@sp+message+4)
	ld		pz,(sp+@sp+output+4)
.loop3:
	inc	L					; i = i + 1 (mod 256)
	ld		a,(py+hl)		; A = sbox[i]
	ld		d,a				; save in D
	ld		de',hl			; DE' = i
	add	a,e
	ld		l,a				; HL = j = j + sbox[i] (mod 256)
	ld		a',(py+hl)		; A' = sbox[j]
	ld		a,d
	ld		(py+hl),a		; sbox[j] = sbox[i]
	ex		de',hl			; HL = i, DE' = j
	ex		af,af'
	ld		(py+hl),a		; sbox[i] = (old)sbox[j]
	add	a,d				; A = sbox[i] + sbox[j] (mod 256)
	exx
	ld		de',de			; restore j on other side
	ld		b,0
	ld		c,a
	ld		hl,(py+bc)		; get L = sbox[A]
	ld		a,(pw)
	xor	L
	ld		(pz),a
	exx
	ld		pw,pw+1			; next input
	ld		pz,pz+1			; next output
	dwjnz	.loop3
	pop	pw
	ld		h,e				; put j in H
	ld		(px+[RC4_state_t]+i),hl				; save i, j for next time

#endasm
	// Success!
	return 0;
}

/*** BeginHeader ***/
#endif
/*** EndHeader ***/

