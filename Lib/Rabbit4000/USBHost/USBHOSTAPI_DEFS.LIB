/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*** BeginHeader  */

#ifndef __USBHOSTAPI_DEFS_H
#define __USBHOSTAPI_DEFS_H

#ifndef INT32
 #define INT32 long
#endif
#ifndef UINT32
 #define UINT32 unsigned long
#endif
//
// This is the data structure used to maintain linked lists.
//
// This struct definition is used inside the definition of LIST_ENTRY
// to declare self-referential pointers.
struct  _USB_LIST_ENTRY;

// This is the list processing structure for USB.  This data structure is used to maintain
// linked lists.
//
typedef struct _USB_LIST_ENTRY
{
    struct _USB_LIST_ENTRY  __far * next;
    struct _USB_LIST_ENTRY  __far * prev;
} USB_LIST_ENTRY;

#define LIST_HEAD_INIT(name) { &(name), &(name) }

#define LIST_HEAD(name) \
    USB_LIST_ENTRY name = LIST_HEAD_INIT(name)

#define INIT_LIST_HEAD(ptr) do { \
     (ptr)->next = (ptr); (ptr)->prev = (ptr); \
} while (0)

#define list_entry(ptr, type, member) \
     (( type __far *)((char __far *)(ptr)-(unsigned long)(&((type __far *)0)->member)))

// Standard USB device request
// Device request data structure,
typedef struct
{
  char  requesttype;
  char  request;
  unsigned short value;
  unsigned short index;
  unsigned short length;
} devrequest;

#ifndef min
#define min(a,b) ((a)<(b)?(a):(b))
#endif

#define USB_DEVICE_FULL_SPEED       0
#define USB_DEVICE_LOW_SPEED        1
#define USB_DEVICE_HIGH_SPEED       2

typedef struct _usb_descriptor_header
{
    char   bLength;
    char   bDescrType;
} usb_descriptor_header;

#define NEXT_USB_DESCRIPTOR(this_descr)     \
    (usb_descriptor_header __far *)(((unsigned char __far *)this_descr) + this_descr->bLength)

#define USB_DESCRIPTOR_LEN(buf)              \
    (((usb_descriptor_header __far *)(buf))->bLength)

#define USB_DESCRIPTOR_TYPE(buf)             \
    (((usb_descriptor_header __far *)(buf))->bDescrType)

#define USB_DESCRIPTOR_TOTAL_LEN(buf)        \
    (((usbConfigDescriptor __far *)(buf))->wTotalLength)


#define MAKE16(hi8,lo8)	( (unsigned) (((unsigned)(((char) (hi8) ) << 8 )) | ((char) (lo8)))  )

#define TO_LE16(x) (unsigned short)(x)

#define FORMAT_USB_DEVICE_REQUEST(devreq, req_type, req, val, indx, len)  \
        (devreq)->requesttype       = (char)req_type;                         \
        (devreq)->request           = (char)req;                              \
        (devreq)->value             = TO_LE16(val);                     \
        (devreq)->index             = TO_LE16(indx);                      \
        (devreq)->length            = TO_LE16(len);


//
// Class codes
//
#define USB_CLASS_HUB           9
#define USB_CLASS_HID           3

//
// Descriptor types
//
#define USB_DT_DEVICE           0x01
#define USB_DT_CONFIG           0x02
#define USB_DT_STRING           0x03
#define USB_DT_INTERFACE        0x04
#define USB_DT_ENDPOINT         0x05
#define USB_DT_QUALIFIER        0x06

#define USB_DT_HUB              0x29
#define USB_DT_HID              0x21

//
// Standard request defines
//
#define USB_REQ_GET_STATUS          0x00
#define USB_REQ_CLEAR_FEATURE       0x01
// 0x02 is reserved
#define USB_REQ_SET_FEATURE         0x03
// 0x04 is reserved
#define USB_REQ_SET_ADDRESS         0x05
#define USB_REQ_GET_DESCRIPTOR      0x06
#define USB_REQ_SET_DESCRIPTOR      0x07
#define USB_REQ_GET_CONFIGURATION   0x08
#define USB_REQ_SET_CONFIGURATION   0x09
#define USB_REQ_GET_INTERFACE       0x0A
#define USB_REQ_SET_INTERFACE       0x0B
#define USB_REQ_SYNCH_FRAME         0x0C

//Feature
#define USB_FEATURE_ENDPOINT_HALT 0
#define USB_FEATURE_DEVICE_REMOTE_WAKEUP 1
//
// HIDD requests
//
#define USB_REQ_GET_REPORT      0x01
#define USB_REQ_GET_IDLE        0x02
#define USB_REQ_GET_PROTOCOL    0x03
#define USB_REQ_SET_REPORT      0x09
#define USB_REQ_SET_IDLE        0x0A
#define USB_REQ_SET_PROTOCOL    0x0B

#define USB_TYPE_STANDARD       (0x00 << 5)
#define USB_TYPE_CLASS          (0x01 << 5)
#define USB_TYPE_VENDOR         (0x02 << 5)
#define USB_TYPE_RESERVED       (0x03 << 5)

#define USB_RECIP_DEVICE        0x00
#define USB_RECIP_INTERFACE     0x01
#define USB_RECIP_ENDPOINT      0x02
#define USB_RECIP_OTHER         0x03

//
// Request target types.
//
#define USB_RT_DEVICE           0x00
#define USB_RT_INTERFACE        0x01
#define USB_RT_ENDPOINT         0x02

#define USB_RT_HUB              (USB_TYPE_CLASS | USB_RECIP_DEVICE)
#define USB_RT_PORT             (USB_TYPE_CLASS | USB_RECIP_OTHER)
#define USB_RT_HIDD             (USB_TYPE_CLASS | USB_RECIP_INTERFACE)

#define USB_DEVICE_TO_HOST_REQ  0x80

// This is the USB device number allocation bitmap. There's one bitmap
// per USB tree.
//
struct usb_devmap
{
    unsigned long devicemap[128 / (8*sizeof(UINT32))];
};

#define USB_MAXCONFIG       1
#define USB_MAXINTERFACES   2
#define USB_MAXENDPOINTS    4

//
// This is a USB device descriptor.
//
// USB device information
//
// Make this MUCH dynamic, right now
// it contains enough information for
// a USB floppy controller, and nothing
// else.
//
// I'm not proud. I just want this dang
// thing to start working.
//

// The usbDeviceDescriptor is the structure that corresponds to the
// "standard device descriptor" described in section 9.6.1 of the
// "Universal Serial Bus Specification Revision 2.0"; for more details,
// see this document. The descriptor for a device is filled in when the
// device first attaches to the bus and is updated by calling the
// usbGetDeviceDescriptor routine.
//
// Binary-Coded Decimal (that is, 2.10 is 210H).
// This field identifies the release of the USB
// Specification with which the device and its
// descriptors are compliant.
//
// @param bDeviceClass Class code (assigned by the USB-IF).
// If this field is reset to zero, each interface
// within a configuration specifies its own
// class information and the various interfaces operate independently.
// If this field is set to a value between 1 and
// FEH, the device supports different class specifications on different
// interfaces and the interfaces may not operate
// independently. This value identifies the class definition used
// for the aggregate interfaces. If this field is set to FFH, the device class
// is vendor-specific.
//
// @param bDeviceSubClass Subclass code (assigned by the USB-IF).
// These codes are qualified by the value of the bDeviceClass field.
// If the bDeviceClass field is reset to zero, this field must also be
// reset to zero. If the bDeviceClass field is not set to FFH,
// all values are reserved for assignment by the USB-IF.
//
// @param bDeviceProtocol Protocol code (assigned by the USB-IF).
// These codes are qualified by the value of
// the bDeviceClass and the bDeviceSubClass fields. If a device
// supports class-specific protocols on a device basis as opposed to an interface
// basis, this code identifies the protocols that the device uses as defined by the
// specification of the device class. If this field is reset to zero, the device
// does not use class-specific protocols on a device basis. However, it may use class-specific
// protocols on an interface basis. If this field is set to FFH, the device uses a
// vendor-specific protocol on a device basis.
//
// @param bMaxPacketSize0 Maximum packet size for endpoint zero
// (only 8, 16, 32, or 64 are valid)
//
// @param idVendor Vendor ID
// @param idProduct Product ID
//
// @param bcdDevice Device release number
//
// @param iManufacturer Manufacturer string index
//
// @param iProduct Product string index
//
// @param iSerialNumber Serial string index
//
// @param bNumConfigurations Number of possible configurations
//
// @external
// @category USBH
// @since 6.1
// @see @link usb_get_device_descriptor
// @see @link usbDevice
typedef struct
{
    unsigned char  bLength;
    unsigned char  bDescriptorType;
    unsigned short bcdUSB;
    unsigned char  bDeviceClass;
    unsigned char  bDeviceSubClass;
    unsigned char  bDeviceProtocol;
    unsigned char  bMaxPacketSize0;
    unsigned short idVendor;
    unsigned short idProduct;
    unsigned short bcdDevice;
    unsigned char  iManufacturer;
    unsigned char  iProduct;
    unsigned char  iSerialNumber;
    unsigned char  bNumConfigurations;
} usbDeviceDescriptor;


// Due to packing issues...
#define SIZEOF_DEVICE_DESCRIPTOR 18

typedef struct
{
    unsigned char  bLength;
    unsigned char  bDescriptorType;
    unsigned char  bEndpointAddress;
    unsigned char  bmAttributes;
    unsigned short wMaxPacketSize;
    unsigned char  bInterval;
} usbEndpointDescriptor;

// The usb Interface Descriptor is the structure that corresponds to the
// "standard interface descriptor" described in section 9.6.5 of the
// "Universal Serial Bus Specification Revision 2.0"; for more details,
// see this document.
typedef struct
{
    unsigned char  bLength;
    unsigned char  bDescriptorType;
    unsigned char  bInterfaceNumber;
    unsigned char  bAlternateSetting;
    unsigned char  bNumEndpoints;
    unsigned char  bInterfaceClass;
    unsigned char  bInterfaceSubClass;
    unsigned char  bInterfaceProtocol;
    unsigned char  iInterface;

    usbEndpointDescriptor endpoint[USB_MAXENDPOINTS];
} usbInterfaceDescriptor;

// The usbConfigDescriptor is the structure that corresponds to the
// "standard configuration descriptor" described in section 9.6.3 of the
// "Universal Serial Bus Specification Revision 2.0"; for more details,
// see this document.
typedef struct
{
    unsigned char  bLength;
    unsigned char  bDescriptorType;
    unsigned short wTotalLength;
    unsigned char  bNumInterfaces;
    unsigned char  bConfigurationValue;
    unsigned char  iConfiguration;
    unsigned char  bmAttributes;
    unsigned char  MaxPower;

    usbInterfaceDescriptor interface[USB_MAXINTERFACES];
} usbConfigDescriptor;


// String descriptor
struct usb_string_descriptor
{
    unsigned char  bLength;
    unsigned char  bDescriptorType;
};

// Hub descriptor
typedef struct
{
    unsigned char  bLength;
    unsigned char  bDescriptorType;
    unsigned char  bNbrPorts;
    unsigned short wHubCharacteristics;
    unsigned char  bPwrOn2PwrGood;
    unsigned char  bHubContrCurrent;
    // DeviceRemovable and PortPwrCtrlMask want to be variable-length
    //   bitmaps that hold max 256 entries, but for now they're ignored
    unsigned char  filler;
} usbHubDescriptor;


// This is the data structure used to represent USB devices; for a complete
// description, see the usbDevice link below.
struct usbDevice_t;

// The usbProbeRoutine is called as devices are connected to the USB.
//typedef INT32 (* usbProbeRoutine)(struct usbDevice_t * dev);
typedef INT32 (* usbProbeRoutine)();


// The usbDisconnectRoutine is called as devices are disconnected from the USB.
//typedef void (* usbDisconnectRoutine)(struct usbDevice_t * dev);
typedef void (* usbDisconnectRoutine)();


// The usbDriver structure contains two function pointers and the name of the device.
//
// @param name Pointer to a NULL terminated sting containing the name of the USB device.
//
// @param probe This entry point is called whenever a new
// device is attached to the bus. Then the device driver has to create a new instance
// of its internal data structures for the new device.   This allows the printer driver
// to search for USB devices that it is interested in; for example, a printer driver
// would search for all printer devices on the USB and save the relevant information.
// Detailed examples of probe routines are provided with NET+OS.
// The dev argument specifies the device context, which contains pointers to all USB
// descriptors. The interface argument specifies the interface number. If a USB driver
// wants to bind itself to a particular device and interface, it has to return a pointer.
// This pointer normally references the device driver's context structure.
// Probing normally is done by checking the vendor and product identifications or the
// class and subclass definitions. If they match, the interface number is compared with
// the ones supported by the driver. When probing is done class-based, it might be necessary
// to parse some more USB descriptors because the device properties can differ in a wide
// range.
//
// @param disconnect This function is called whenever a device
// that was served by this driver is disconnected.  The dev argument specifies
// the device context and the driver_context returns a pointer to the previously
// registered driver_context of the probe function. After returning from the disconnect
// function, the USB framework completely deallocates all data structures
// that are associated with this device. The usbDevice structure must not be
// used any longer by the usb driver.
//
// @param  driver_list This contains a linked list of USB drivers to be added; if this
// field is NULL, only the specified device is added.
//typedef struct
//{
//    const char *name;                           // Name of the device
//    INT32  (*probe)(struct usbDevice_t *);        // The entry point of the probe function.
//    void (*disconnect)(struct usbDevice_t *);   // The entry point of the disconnect function.
//    USB_LIST_ENTRY driver_list;
//} usbDriver;

typedef struct
{
    char          *name;
    usbProbeRoutine      probe;
    usbDisconnectRoutine disconnect;
    USB_LIST_ENTRY       driver_list;
} usbDriver;

// This type is a pointer to a usbDeviceIrq function, which is passed to
// the usbRequestIrq function to request a callback when data arrives
// from a device on the USB.
// @param status USB status code.
//
// @param buffer Pointer to the buffer containing the data received.
//
// @param xferred The number of bytes that were received.
//
// @param device_id Pointer used by device driver.
//
// @param semaphore Semaphore used by the device driver.
//
//typedef int (* usbDeviceIrq)(INT32 status, void far * buffer, INT32 xferred,
//                             void far * device_id, void * semaphore);
typedef int (* usbDeviceIrq)();

// This type is a pointer to a routine used to set up an IRQ request.
//
// @param usb Pointer to the USB device.
//
// @param pipe Pipe to send data.
//
// @param handler Function pointer to call when IRQ data arrives.
//
// @param period Polling rate for device.
//
// @param dev_id Device ID.
//
// @param maxpacketsize Maximum packet size.
//
// @param buffer Buffer containing data to send.
//typedef INT32 (* usbRequestIrqType)(struct usbDevice_t * usb, UINT32 pipe, usbDeviceIrq handler, INT32 period, void * dev_id, word maxpacketsize, void * buffer);
//typedef INT32 (* usbRequestIrqType)();
#define USB_MAXCHILDREN (1) //BPM

//typedef INT32 (*USB_CALLBACK)(void *);
typedef INT32 (*USB_CALLBACK)();


// This type is a pointer to a routine used to send USB commands to OHCI.
//
// @param usb Pointer to the USB device.
//
// @param pipe Pipe to send data.
//
// @param cmd USB command to send.
//
// @param data Data to send (optional).
//
// @param len Number of bytes of data to send.
//
// @param xferred Pointer to an integer that is filled in with the number of bytes sent.
//
// @param timeout How long to wait for a response from the device.
//typedef INT32 (* usbQueueGeneralRequest)(struct usbDevice_t * usb, UINT32 pipe, void * cmd, void * data, INT32 len, INT32 * xferred, INT32 timeout, USB_CALLBACK, void *);
typedef INT32 (* usbQueueGeneralRequest)();


// This type is a pointer to a routine used to free memory for a USB device.
//
// @param dev Pointer to the data structure to free.
//typedef INT32 (* usbDeallocate)(struct usbDevice_t * dev);
typedef INT32 (* usbDeallocate)();

// This type is a pointer to a routine used to allocate memory for a USB device.
//
// @param parent Pointer to the parent data structure for the USB device.
//typedef void * (* usbAllocate)(struct usbDevice_t * parent);
typedef void * (* usbAllocate)();


// One of these structures are allocated per bus.
//
// @param root_hub Root hub.
//
// @param hcpriv Private data for the host controller.
typedef struct
{
    struct usbDevice_t    *root_hub;
    void *hcpriv;
} usbBus;
#define MAX_ENDPOINTS 128

// The NET+OS USB host library provides a set of APIs that enable you to
// create your own USB device drivers.  The NET+OS software package provides
// examples in the /netos/src/examples/usb_host directory.
// The starting point for the driver is to call usbRegister (see the
// usbRegister link below); after that, a pointer to the usbDevice structure
// is passed as a handle to most of the APIs in the USB
// host library.  The "probe" function (passed into usbRegister) is called as devices
// attach to the USB; a pointer to the usbDevice structure for the corresponding
// device is passed to the driver when the probe function is called.  The driver
// then needs to save the usbDevice structure for subsequent calls.  The usb host fills in
// the information in this structure when the device attaches to the bus.
// The usb driver may only write to the driverData parameter. By the time
// the "probe" function is called for your driver, all the descriptors
// have already been filled in.
//
// @param devnum Device number on the USB bus.
//
// @param speed A one indicates a low speed device; a zero indicates a full
// speed device, a two indicates a high speed device
//
// @param maxpacketsize The number of bytes that the device can accept in one
// transfer.
//
// @param bus Pointer to the usbBus structure.
//
// @param driver A pointer to the usbDriver structure that was passed to
// usbRegister.
//
// @param descriptor The device descriptor for this device.
//
// @param config  All the configuration structures for this device.
//
// @param parent Pointer to the next device on the bus.
//
// @param maxchild     Maximum number of child devices - these can be either new devices
// (if this is a hub device).
// Each instance needs its own set of data structures.
//
// @param children Pointers to the children for this device.
//
// @param hcpriv A pointer used by the host controller private area.
//
// @param hcEdData Private data for host controller.
//
// @param private_ptr Private data for USB stack.
//
// @param driverData Pointer to be used by the USB driver.
typedef struct usbDevice_t
{
    int	               devnum;
    word	               Speed;
    word                maxpacketsize;
    usbBus              __far *bus;
    usbDriver           __far *driver;
    usbDeviceDescriptor descriptor;
    usbConfigDescriptor config[USB_MAXCONFIG];
    struct usbDevice_t  __far *parent;
    int                 parent_port;
    INT32                maxchild;
    struct usbDevice_t  __far *children[USB_MAXCHILDREN];
    void                __far *hcpriv;
    void                __far *hcEdData;
    void                __far *private_ptr;
    void                __far *driverData;
    INT32               Endpoint_Opened[MAX_ENDPOINTS];
    INT32               FunctionAddress;  // Address of this endpoint
    void                __far *endpoint_pipe[MAX_ENDPOINTS];  // Pointer to EHCI pipe.
} usbDevice;

//
//  - device number (7 bits)
//  - endpoint number (4 bits)
//  - current Data0/1 state (1 bit)
//  - direction (1 bit)
//  - speed (1 bit)
//  - max packet size (2 bits: 8, 16, 32 or 64)
//  - pipe type (2 bits: control, interrupt, bulk, isochronous)
//
// We'll just encode it as a simple
// unsigned int. The encoding is:
//
//  - device:       bits 8-14
//  - endpoint:     bits 15-18
//  - Data0/1:      bit 19
//  - direction:    bit 7       (0 = Host-to-Device, 1 = Device-to-Host)
//  - speed:        bit 27-26      (0 = High, 1 = Low Speed, 2 = High Speed)
//  - max size:     bits 0-1    (00 = 8, 01 = 16, 10 = 32, 11 = 64)
//  - pipe type:    bits 30-31  (00 = isochronous, 01 = interrupt, 10 = control, 11 = bulk)

#define USB_MAXPACKET(pipe)     (8 << ((pipe) & 3))
#define USB_PACKETID(pipe)      (((pipe) & 0x80) ? 0x69 : 0xE1)

#define USB_PIPE_DEVICE(pipe)   (((pipe) >> 8) & 0x7f)
#define USB_PIPE_ENDPOINT(pipe) (((pipe) >> 15) & 0xf)
#define USB_PIPE_DATA(pipe)     (((pipe) >> 19) & 1)
#define USB_PIPE_OUT(pipe)      (((pipe) & 0x80UL) == 0UL)
#define USB_PIPE_SLOW(pipe)     (((pipe) >> 26) & 3)

#define USB_PIPE_TYPE(pipe)     (((pipe) >> 30) & 3)
#define USB_PIPE_ISOC(pipe)     (USB_PIPE_TYPE((pipe)) == 0)
#define USB_PIPE_INT(pipe)      (USB_PIPE_TYPE((pipe)) == 1)
#define USB_PIPE_CONTROL(pipe)  (USB_PIPE_TYPE((pipe)) == 2)
#define USB_PIPE_BULK(pipe)     (USB_PIPE_TYPE((pipe)) == 3)

#define USB_PIPE_ENDPDEV(pipe)  (((pipe) >> 8) & 0x7ff)

#define USB_PIPE_TYPE_ISOCHRONOS 0UL
#define USB_PIPE_TYPE_INTERRUPT  1UL
#define USB_PIPE_TYPE_CONTROL    2UL
#define USB_PIPE_TYPE_BULK       3UL

// Create control pipes..
#define CREATE_PIPE(dev,endpoint) \
    ((dev->devnum << 8) | (endpoint << 15) | ((unsigned long)dev->Speed << 26) | (unsigned long)dev->maxpacketsize)
#define USB_SEND_CTRL_PIPE(dev,endpoint)    ((USB_PIPE_TYPE_CONTROL << 30) | CREATE_PIPE(dev,endpoint))
#define USB_RECIEVE_CTRL_PIPE(dev,endpoint) ((USB_PIPE_TYPE_CONTROL << 30) | CREATE_PIPE(dev,endpoint) | 0x80)
#define DEFAULT_PIPE(dev)                   ((unsigned long)dev->Speed << 26)
#define USB_SEND_DEFAULT_CTRL(dev)          ((USB_PIPE_TYPE_CONTROL << 30) | DEFAULT_PIPE(dev))
#define USB_RECIEVE_DEFAULT_CTRL(dev)       ((USB_PIPE_TYPE_CONTROL << 30) | DEFAULT_PIPE(dev) | 0x80)

// Transfer status codes
#define USB_STATUS_NOERROR             0
#define USB_STATUS_CRC                 1
#define USB_STATUS_BITSTUFFING         2
#define USB_STATUS_DATATOGGLEMISMATCH  3
#define USB_STATUS_STALL               4
#define USB_STATUS_DEVICENOTRESPONDING 5
#define USB_STATUS_PIDCHECKFAILURE     6
#define USB_STATUS_UNEXPECTEDPID       7
#define USB_STATUS_DATAOVERRUN         8
#define USB_STATUS_DATAUNDERRUN        9
#define USB_STATUS_BUFFEROVERRUN       0xc
#define USB_STATUS_BUFFERUNDERRUN      0xd
#define USB_STATUS_NOTACCESSED         0xe
#define USB_STATUS_TIMEOUT             0x10

// Enumeration endpoint types
#define USB_CONTROL_ENDPOINT     0
#define USB_BULK_ENDPOINT        2
#define USB_INTERRUPT_ENDPOINT   3
#define USB_ISOCHRONOUS_ENDPOINT 4

#define MAX_USB_DEVICES          2

// Send and receive bulk transfers
//INT32 usb_bulk_transfer(usbDevice *device, INT32 output_io, INT32 endpoint, unsigned char *buffer, INT32 bytesToTransfer,
//INT32 *bytesTransferred, INT32 maxPacketSize, INT32 timeout, INT32 *errorCode);


// Send and receive bulk transfers without blocking
//INT32 usb_bulk_transfer_async(usbDevice *device, INT32 output_io, INT32 endpoint, unsigned char *buffer, INT32 bytesToTransfer,
//INT32 *bytesTransferred, INT32 maxPacketSize, INT32 timeout, INT32 *errorCode,
//USB_CALLBACK callback_function, void *context);


//
// USB Host API error return codes
//
#define USBH_SUCCESS                                  0

// The following are transfer error codes - DO NOT change
#define USBH_CRC_ERROR                                1
#define USBH_BITSTUFFING_ERROR                        2
#define USBH_DATATOGGLEMISMATCH                       3
#define USBH_STALL                                    4
#define USBH_DEVICENOTRESPONDING                      5
#define USBH_PIDCHECKFAILURE                          6
#define USBH_UNEXPECTEDPID                            7
#define USBH_DATAOVERRUN                              8
#define USBH_DATAUNDERRUN                             9
#define USBH_BUFFEROVERRUN                            12
#define USBH_BUFFERUNDERRUN                           13
#define USBH_NOTACCESSED                              14
#define USBH_TIMEOUT                                  16
#define USBH_NOT_DONE                                 19
#define USBH_CANCELING                                20
#define USBH_CANCELED                                 22

// The following are general errors codes
#define USBH_NULL_POINTER                             30
#define USBH_ENDPOINT_INCONSISTENT                    31
#define USBH_INVALID_PACKET_SIZE                      32
#define USBH_DEVICE_REQUEST_FAILED                    33
#define USBH_MALLOC_FAILED                            34
#define USBH_FREE_FAILED                              35
#define USBH_INVALID_CONFIGURATION_DATA               36
#define USBH_INVALID_PORT_NUMBER                      37
#define USBH_SEMAPHORE_ACCESS_FAILED                  38
#define USBH_INVALID_ENDPOINT_TYPE                    39
#define USBH_MAX_TD_COUNT_EXCEEDED                    40
#define USBH_ISOCHRONOUS_NOT_SUPPORTED                41
#define USBH_NO_TRANSFER_DESCRIPTORS                  42
#define USBH_NO_ENDPOINT_DESCRIPTORS                  43
#define USBH_ENDPOINT_REQUEST_MISMATCH                44
#define USBH_ENDPOINT_NOT_FOUND                       45
#define USBH_INVALID_FRAME_INTERVAL                   46
#define USBH_MUTEX_ACCESS_FAILED                      47
#define USBH_BLOCK_POOL_ACCESS_FAILED                 48
#define USBH_THREAD_ACCESS_FAILED                     49
#define USBH_ISR_INSTALL_FAILED                       50
#define USBH_ISR_ENABLE_FAILED                        51
#define USBH_INVALID_POWER_STABLE_DELAY               52
#define USBH_MAX_DEVICES                              53
#define USBH_INVALID_DEVICE_NUMBER                    54
#define USBH_DEVICE_NUMBER_NOT_USED                   55

//
// Macro to swap short endians
//
#define USB_SWAP16W(value)   (((value<<8) & 0xff00) | ((value>>8) & 0xff))

//
// Milliseconds to ticks macro (borrowed from NDS)
//
#define _USB_TICKS_PER_SECOND 1024
#if (_USB_TICKS_PER_SECOND == 1000)

#define NS_MILLISECONDS_TO_TICKS(t) (t)

#else

// rounds up to the nearest tick
#define NS_MILLISECONDS_TO_TICKS(t) (((_USB_TICKS_PER_SECOND * (t)) / 1000) + (((_USB_TICKS_PER_SECOND * (t)) % 1000) ? 1 : 0))

#endif

/*** EndHeader */

/*** BeginHeader InsertHeadList, InsertTailList,
                RemoveEntryList, CheckForEmptyList */

#ifndef  usb_util_debug
  #define usb_util_debug __nodebug
#endif

__root void InsertHeadList(USB_LIST_ENTRY __far *head, const USB_LIST_ENTRY __far *new);
__root void InsertTailList(USB_LIST_ENTRY __far *head, USB_LIST_ENTRY __far *new);

__root void RemoveEntryList(USB_LIST_ENTRY __far *entry);
__root int CheckForEmptyList(USB_LIST_ENTRY __far *head);





/*** EndHeader */


usb_util_debug
__root void InsertHeadList(USB_LIST_ENTRY __far *head, const USB_LIST_ENTRY __far *new)
{
    //__list_add(new, head, head->next);
	#asm
	ld		px,(sp+@sp+head)           ; px = head = prev
	ld		py,(sp+@sp+new)   ; py = new
	ipset 3
	ld		pz,(px)           ; pz = head->next = next
	ld		(pz+4),py         ; next->prev = new
	ld		(py),pz           ; new->next = next
	ld		(py+4),px			; new->prev = head
	ipres
	ld		(px),py				; prev->next = new
	#endasm
}

usb_util_debug
__root void InsertTailList(USB_LIST_ENTRY __far *head, USB_LIST_ENTRY __far *new)
{
    //__list_add(new, head->prev, head);
	#asm
	ld		pz,(sp+@sp+head)           ; pz = head = next
	ld		py,(sp+@sp+new)   ; py = new
	ipset 3
	ld		px,(pz+4)         ; px = head->prev = prev
	ld		(pz+4),py         ; next->prev = new
	ld		(py),pz           ; new->next = next
	ld		(py+4),px			; new->prev = head
	ipres
	ld		(px),py				; prev->next = new
	#endasm
}



//usb_util_debug
__nodebug
__root void RemoveEntryList(USB_LIST_ENTRY __far *entry)
{
	//__list_del(entry->prev, entry->next);
	#asm
	ld		px,(sp+@sp+entry)				; px = entry
	ipset 3
	ld		py,(px)				; py = next.  Squeeze out the one between these.
	ld		px,(px+4)			; px = prev
	ld		(py+4),px			; next->prev = prev
	ipres
	ld		(px),py				; prev->next = next
	#endasm
}

//usb_util_debug
__nodebug
__root int CheckForEmptyList(USB_LIST_ENTRY __far *head)
{
    //return (long)head->next == (long)head;
	#asm
	ld		px,(sp+@sp+head)
	ld		bcde,px
	ld		jkhl,(px)
	cp		jkhl,bcde
	flag	z,hl
	#endasm
}


/*** BeginHeader  */
#endif
/*** EndHeader */



