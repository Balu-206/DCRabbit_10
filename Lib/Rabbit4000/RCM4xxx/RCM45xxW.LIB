/*
   Copyright (c) 2015, Digi International Inc.

   Permission to use, copy, modify, and/or distribute this software for any
   purpose with or without fee is hereby granted, provided that the above
   copyright notice and this permission notice appear in all copies.

   THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
   WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
   MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
   ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
   ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
   OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/
/*** BeginHeader */
#ifndef __RCM4500W_LIB
#define __RCM4500W_LIB

#if !(RCM4500W_SERIES) || _DC_MB_TYPE_ != 0
	#fatal "RCM45XXW.LIB only supports RCM45XXW series boards."
#endif

/*** EndHeader */

/* START LIBRARY DESCRIPTION ************************************************
RCM4500W.LIB
DESCRIPTION:

Usage:
 #use "RCM45xxW.LIB"
 main()
 {
    BoardInit();
    ...
 }

SUPPORT LIBRARIES: none
END DESCRIPTION *************************************************************/

/*** BeginHeader */
#define DS2 		2
#define DS3 		3
#define S2_BIT  	4
#define S3_BIT  	5

#define ON  0		//state to turn on led
#define OFF 1		//state to turn off led

// ADC
#if _BOARD_TYPE_==RCM4500W
	#use "ADC_ADS7870.LIB"
#endif

/*** EndHeader */


/*** BeginHeader __brdinitflag */
extern int __brdinitflag;
/*** EndHeader */
int __brdinitflag;				//Board init function flag

/*** BeginHeader initPort*/
void initPort(void);
/*** EndHeader */
///////////////////////////////////////////////////////////
// Initializes the two pins used for DS2 and DS3
// See brdInit() for other port initializing
///////////////////////////////////////////////////////////
__nodebug
void initPort()
{
#asm
	ld		a, (PBDRShadow)
	res	DS2, a
	res	DS3, a
	ld		(PBDRShadow), a
	ioi	ld (PBDR), a
	ld		a, (PBDDRShadow)
	set	DS2, a
	set	DS3, a
	ld		(PBDDRShadow), a
	ioi	ld (PBDDR), a
#endasm
}

/*** BeginHeader DS2led*/
void DS2led(int state);
/*** EndHeader */
///////////////////////////////////////////////////////////
// DS2 led on protoboard is controlled by port B2
// turns on if state = 0
// turns off if state = 1
///////////////////////////////////////////////////////////
__nodebug
void DS2led(int state)
{
	if (state == ON)
	{
	#asm
		ld		a, (PBDRShadow)   ;read port to keep other bit values
		res	DS2, a				;clear bit
		ld		(PBDRShadow), a
		ioi	ld (PBDR), a		;write data to port
	#endasm
	}
	else
	{
	#asm
		ld		a, (PBDRShadow)      ;read port to keep other bit values
		set	DS2, a					;set bit
		ld		(PBDRShadow), a
		ioi	ld (PBDR), a			;write data to port
	#endasm
	}
}

/*** BeginHeader DS3led*/
void DS3led(int state);
/*** EndHeader */
///////////////////////////////////////////////////////////
// DS3 led on protoboard is controlled by port B3
// turns on if state = 0
// turns off if state = 1
///////////////////////////////////////////////////////////
__nodebug
void DS3led(int state)
{
	if (state == ON)
	{
	#asm
		ld		a, (PBDRShadow)   ;read port to keep other bit values
		res	DS3, a				;clear bit
		ld		(PBDRShadow), a
		ioi	ld (PBDR), a		;write data to port
	#endasm
	}
	else
	{
	#asm
		ld		a, (PBDRShadow)   ;read port to keep other bit values
		set	DS3, a			 	;set bit
		ld		(PBDRShadow), a
		ioi	ld (PBDR), a		;write data to port
	#endasm
	}
}


/*** BeginHeader  brdInit */
void brdInit();
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
brdInit														<RCM45xxW.LIB>

SYNTAX:			void brdInit (void);

DESCRIPTION:	This function initializes parallel ports A through E for
					RCM45xxW series core modules running on an RCM4xxx series
               prototyping board.

               Default I/O port configuration:
               -------------------------------
					The brdInit function is setup to a default I/O configuration
               based on the core module board type detected at compile time.
               which will be as follows:

               Note:
					-----
               This function is intended for demonstration purposes only
					and can be modified for your applications.

PARAMETER:    	None

RETURN VALUE:	None

-------------------------------------------------------------------------------
   General information and I/O initialization when using am RCM45xxW series
   core module on an RCM4xxx prototpying board
-------------------------------------------------------------------------------

	Summary of initialization
	-------------------------
   1. I/O port pins are configured for protoboard operation.
	2.	Unused configurable I/O are tied outputs set.
	3. RS232 on serial port B is set to Asynchronous, 115200, 8, n, 1
   4. LED's are off.
	5. Slave port disabled.

Pin   Port  Non-ADC Function              I/O      I/O State
====  ====  ===========================   ======   ============================
8     PA0   Not Used                      Output   Core High
9     PA1   Not Used                      Output   Core High
10    PA2   Not Used                      Output   Core High
11    PA3   Not Used                      Output   Core High
12    PA4   Not Used                      Output   Core High
13    PA5   Not Used                      Output   Core High
14    PA6   Not Used                      Output   Core High
15    PA7   Not Used                      Output   Core High

16    PB0   ADC SCLK                      Output   High
17    PB1   Programming port - CLKA       Output   High
18    PB2   LED DS2                       Output   High (off)
19    PB3   LED DS3                       Output   High (off)
20    PB4   S2                            Input    Pulled-up protoboard
21    PB5   S3                            Input    Pulled-up protoboard
22    PB6   Not Used                      Output   High
23    PB7   Not Used                      Output   High

24    PC0   Not Used                      Output   High
25    PC1   Not Used                      Output   High
26    PC2   Not Used                      Output   High
27    PC3   Not Used                      Output   High
28    PC4   TXB - ADC SDI/XBee Async      Output   High
29    PC5   RXB - ADC SDO/XBee Async      Input    Pulled-up core
30    PC6   TXA - Programming port        Output   High when not driven
31    PC7   RXA - Programming port        Input    Pulled-up on core

40    PD0   Not Used                      Output   High
41    PD1   Not Used                      Output   High
42    PD2   Not Used                      Output   High
43    PD3   Not Used                      Output   High
44    PD4   Not Used                      Output   High
45    PD5   Not Used                      Output   High
46    PD6   Not Used                      Output   High
47    PD7   Not used                      Output   High

32    PE0   Not used                      Output   High
33    PE1   Not used                      Output   High
34    PE2   External I/0 /RWE nflash		Output   High
35    PE3   External I/0 /RDY nflash      Output   High
36    PE4   Not used                      Output   High
37    PE5   Not used                      Output   High
38    PE6   Not used                      Output   High
39    PE7   Not used			               Output   High

	The following only initializes on boards with ADC capability.

Pin   Port  ADC Function                  I/O      I/O State
====  ====  ===========================   ======   ============================
16    PB0   SCLK                          Output   Serial clock
28    PC4   SDI                           Output   Serial data to ADC chip
29    PC5   SDO                           Input    Serial data from ADC chip
32    PE0   BUSY                          Input    Busy signal from ADC chip
40    LN0   ADC_IN0                       Input    Analog
41    LN1   ADC_IN1                       Input    Analog
42    LN2   ADC_IN2                       Input    Analog
43    LN3   ADC_IN3                       Input    Analog
44    LN4   ADC_IN4                       Input    Analog
45    LN5   ADC_IN5                       Input    Analog
46    LN6   ADC_IN6                       Input    Analog
47    LN7   ADC_IN7 (Resistor R3 req)     Input    Analog

END DESCRIPTION **********************************************************/

__nodebug
void brdInit()
{
	#GLOBAL_INIT {__brdinitflag  = FALSE;}

	__brdinitflag = TRUE;

   /////////////////////////////////////////////////////////////////////////
	// Configure Network pins as general I/O and disable the internal
   // ethernet engine.
   //
   // Pin TxDD- will be the nand flash CE.
   // Pin TxDD+ will be XBee Boot Mode
   // Pin TxD+  will be XBee /CS
   // Pin TxD-  will be XBee /RTS
   // Pin RxD+  will be XBee /CTS
   /////////////////////////////////////////////////////////////////////////

   // all setup taken care of in zigbee_init

	/////////////////////////////////////////////////////////////////////////
	// Configure Port A
   /////////////////////////////////////////////////////////////////////////
	WrPortI(PADR, &PADRShadow, 0x00);		//set to output all low
	WrPortI(SPCR, &SPCRShadow, 0x84);		//sets all bits to output

   /////////////////////////////////////////////////////////////////////////
	// Configure Port B
   // This pin will be setup in anaInConfig() below if ADC_ONBOARD
   // PB0   SCLK                          Output   Serial clock
   /////////////////////////////////////////////////////////////////////////
   WrPortI(PBDR,  &PBDRShadow,  0xCF);
   WrPortI(PBDDR, &PBDDRShadow, 0xCF);
	initPort();										// enable DS2 and DS3 (led's)

   /////////////////////////////////////////////////////////////////////////
   // Configure Port C
   // These two pins will be setup in XBee configuration.
   // PC4   SDI/XBee Async                Output   Serial data
   // PC5   SDO/XBee Async                Input    Serial data
   /////////////////////////////////////////////////////////////////////////
	WrPortI(PCFR,  &PCFRShadow,  (PCFRShadow  & 0xDF));
	WrPortI(PCDCR, &PCDCRShadow, (PCDCRShadow & 0x00));
	WrPortI(PCDR,  &PCDRShadow,  (PCDRShadow  & 0x15));
	WrPortI(PCDDR, &PCDDRShadow, (PCDDRShadow & 0x55));

   /////////////////////////////////////////////////////////////////////////
	// Configure Port D
   /////////////////////////////////////////////////////////////////////////
	WrPortI(PDCR,  &PDCRShadow,  0x00);	// clear all bits to pclk/2
	WrPortI(PDFR,  &PDFRShadow,  0x00);	// No special functions
	WrPortI(PDDCR, &PDDCRShadow, 0x00);	// clear all bits to drive high and low
	WrPortI(PDDR,  &PDDRShadow,  0xFF);	// set all bits high
	// if board has ADC, set port D to outputs
	#if _BOARD_TYPE_==RCM4500W
		WrPortI(PDDDR, &PDDDRShadow, 0xFF);	// set all bits to output
	#else
		WrPortI(PDDDR, &PDDDRShadow, 0x00);	// leave all bits as input
	#endif

   /////////////////////////////////////////////////////////////////////////
	// Configure Port E
   // This pin will be setup in anaInConfig() below if not polling the ADC
   // PE0   BUSY                          Input    Busy signal from ADC chip
   // Nand Flash initialization will set up pins PE2 and PE3
   /////////////////////////////////////////////////////////////////////////
	WrPortI(PECR,  &PECRShadow,  0x00);	// clear all bits to pclk/2
	WrPortI(PEFR,  &PEFRShadow,  0x00);	// No special functions
	WrPortI(PEDCR, &PEDCRShadow, 0x00);	// clear all bits to drive high and low
	WrPortI(PEDR,  &PEDRShadow,  0xFF);	// set all bits high
	WrPortI(PEDDR, &PEDDRShadow, 0xFF);	// set all bits to output


#if _BOARD_TYPE_==RCM4500W
	// clear table and read all calibration constants
	memset(_adcCalibS, 0, sizeof(_adcCalibS));
	memset(_adcCalibD, 0, sizeof(_adcCalibD));
	memset(_adcCalibM, 0, sizeof(_adcCalibM));
	anaInEERd(ALLCHAN, SINGLE, 0);
	anaInEERd(ALLCHAN, DIFF, 0);
	anaInEERd(ALLCHAN, mAMP, 0);

	// setup sclk
	anaInConfig(0x18, 0x81, ADC_SCLKBRATE); //reset adc device and sclk byte rate
#endif
}  //brdInit()

/*** BeginHeader */
#endif
/*** EndHeader */