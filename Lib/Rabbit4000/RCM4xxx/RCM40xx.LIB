/*
   Copyright (c) 2015, Digi International Inc.

   Permission to use, copy, modify, and/or distribute this software for any
   purpose with or without fee is hereby granted, provided that the above
   copyright notice and this permission notice appear in all copies.

   THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
   WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
   MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
   ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
   ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
   OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/
/*** Beginheader */
#ifndef __RCM40XX_LIB
#define __RCM40XX_LIB

#if !(RCM4000_SERIES) || _DC_MB_TYPE_ != 0
	#fatal "RCM40xx.LIB only supports RCM40xx series boards."
#endif

/*** endheader */

/* START LIBRARY DESCRIPTION *********************************************
RCM40xx.LIB

DESCRIPTION:	This is a sample library only.

					Use with RCM40xx series controllers and prototyping boards.
					Add or modify functions to suit your applications.

					RCM4000 Standard Setup:
						16 Bit Flash 512KB
						16 Bit SRAM  512KB
						12 Bit 8 Channel ADC
						32M Nand Flash
						10BASE-T Ethernet

					RCM4010 Standard Setup:
						16 Bit Flash 512KB
						16 Bit SRAM  256KB
						10BASE-T Ethernet

REVISION HISTORY:
21-Mar-2006 mas	Changed to RCM40xx.LIB; Updated comments and brdInit.
20-Mar-2006 mas	Updated ADC for 7870 (12-bit ADC)
27-Dec-2005	jac	Initial release.

END DESCRIPTION **********************************************************/


/*** BeginHeader */
#define DEVELOPMENT_BOARD  // Indicate development board LIB being used

#ifdef ADC_ONBOARD

	#use "ADC_ADS7870.LIB"
#endif

/*** EndHeader */

/*** Beginheader __brdinitflag, __digoutshadow */

extern int __brdinitflag;
extern int __digoutshadow;

/*** endheader */

// Function execution flags
int __brdinitflag;				//Board init function flag
int __digoutshadow;

/*** BeginHeader brdInit */

void brdInit();

/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
brdInit						<RCM40xx.LIB>

SYNTAX:			void brdInit (void);

DESCRIPTION:	This function initializes parallel ports A through E for
					RCM40xx series core modules running on an RCM40xx series
               prototyping board.

               Default I/O port configuration:
               -------------------------------
					The brdInit function is setup to a default I/O configuration
               based on the core module board type detected at compile time.
               which will be as follows:

               Note:
					-----
               This function is intended for demonstration purposes only
					and can be modified for your applications.

PARAMETER:    	None

RETURN VALUE:	None

-------------------------------------------------------------------------------
   General information and I/O initialization when using am RCM40xx series
   core module on an RCM40xx prototpying board
-------------------------------------------------------------------------------

	Summary of initialization
	-------------------------
   1. I/O port pins are configured for protoboard operation.
	2.	Unused configurable I/O are tied outputs set.
	3. RS232 is not enabled.
   4. LED's are off.
	5. Slave port disabled.

Pin   Port  Non-ADC Function              I/O      I/O State
====  ====  ===========================   ======   ============================
8     PA0   Data Bus                      Output   Core High
9     PA1   Data Bus                      Output   Core High
10    PA2   Data Bus                      Output   Core High
11    PA3   Data Bus                      Output   Core High
12    PA4   Data Bus                      Output   Core High
13    PA5   Data Bus                      Output   Core High
14    PA6   Data Bus                      Output   Core High
15    PA7   Data Bus                      Output   Core High

16    PB0   Not Used                      Output   High
17    PB1   Programming port - CLKA       Output   High
18    PB2   LED DS2                       Output   High (off)
19    PB3   LED DS3                       Output   High (off)
20    PB4   S2                            Input    Pulled-up protoboard
21    PB5   S3                            Input    Pulled-up protoboard
22    PB6   Not Used                      Output   High
23    PB7   Not Used                      Output   High

24    PC0   TXD - RS232                   Output   High
25    PC1   RXD - RS232                   Input    Pulled-up core
26    PC2   TXC - RS232                   Output   High
27    PC3   RXC - RS232                   Input    Pulled-up core
28    PC4   Not used                      Output   High
29    PC5   Not used                      Output   High
30    PC6   TXA - Programming port        Output   High when not driven
31    PC7   RXA - Programming port        Input    Pulled-up on core

40    PD0   Data bus D8
41    PD1   Data bus D9
42    PD2   Data bus D10
43    PD3   Data bus D11
44    PD4   Data bus D12
45    PD5   Data bus D13
46    PD6   Data bus D14
47    PD7   Data bus D15

32    PE0   Not used                      Output   High
33    PE1   Not used                      Output   High
34    PE2   Not used                      Output   High
35    PE3   Not used                      Output   High
36    PE4   * Used by SRAM *
37    PE5   Not used                      Output   High
38    PE6   Not used                      Output   High
39    PE7   Not used                      Output   High

	The following only initializes on boards with ADC capability.

Pin   Port  ADC Function                  I/O      I/O State
====  ====  ===========================   ======   ============================
16    PB0   SCLK                          Output   Serial clock
28    PC4   SDI                           Output   Serial data to ADC chip
29    PC5   SDO                           Input    Serial data from ADC chip
32    PE0   BUSY                          Input    Busy signal from ADC chip
40    LN0   ADC_IN0                       Input    Analog
41    LN1   ADC_IN1                       Input    Analog
42    LN2   ADC_IN2                       Input    Analog
43    LN3   ADC_IN3                       Input    Analog
44    LN4   ADC_IN4                       Input    Analog
45    LN5   ADC_IN5                       Input    Analog
46    LN6   ADC_IN6                       Input    Analog
47    LN7   ADC_IN7 (Resistor R3 req)     Input    Analog

END DESCRIPTION **********************************************************/

__nodebug
void brdInit()
{
	#GLOBAL_INIT {__brdinitflag  = FALSE;}
	#GLOBAL_INIT {__digoutshadow  = 0x90;}

	__brdinitflag = TRUE;

	/////////////////////////////////////////////////////////////////////////
	// Configure Port A
   /////////////////////////////////////////////////////////////////////////
	WrPortI(PADR, &PADRShadow, 0x00);		//set to output all low
	WrPortI(SPCR, &SPCRShadow, 0x84);		//sets all bits to output

   /////////////////////////////////////////////////////////////////////////
	// Configure Port B
   // This pin will be setup in anaInConfig() below if ADC_ONBOARD
   // PB0   SCLK                          Output   Serial clock
   /////////////////////////////////////////////////////////////////////////
   WrPortI(PBDR,  &PBDRShadow,  0xCF);
   WrPortI(PBDDR, &PBDDRShadow, 0xCF);

   /////////////////////////////////////////////////////////////////////////
   // Configure Port C
   // These two pins will be setup in anaInConfig() below if ADC_ONBOARD
   // PC4   SDI                           Output   Serial data to ADC chip
   // PC5   SDO                           Input    Serial data from ADC chip
   /////////////////////////////////////////////////////////////////////////
	WrPortI(PCFR,  &PCFRShadow,  (PCFRShadow  & 0xC5));
	WrPortI(PCDCR, &PCDCRShadow, (PCDCRShadow & 0xC0));
	WrPortI(PCDR,  &PCDRShadow,  (PCDRShadow  & 0xF5));
#ifdef ADC_ONBOARD
	WrPortI(PCDDR, &PCDDRShadow, (PCDDRShadow & 0xC0) | 0x15);
#else
	WrPortI(PCDDR, &PCDDRShadow, (PCDDRShadow & 0xC0) | 0x35);
#endif

   /////////////////////////////////////////////////////////////////////////
	// Configure Port D
   // Port D is used by the memory devices
   /////////////////////////////////////////////////////////////////////////

   /////////////////////////////////////////////////////////////////////////
   // Configure Port E
   // PE4	Used by SRAM
   // PE6	Used as clock input to Rabbit 4000 Ethernet
   // This pin will be setup in anaInConfig() below if not polling the ADC
   // PE0   BUSY                          Input    Busy signal from ADC chip
   /////////////////////////////////////////////////////////////////////////
	WrPortI(PECR, &PECRShadow, PECRShadow & 0x50);	// clear all bits to pclk/2
	WrPortI(PEFR, &PEFRShadow, PEFRShadow & 0x50);	// No special functions
	WrPortI(PEDCR, &PEDCRShadow, PEDCRShadow & 0x50); // drive high and low
	WrPortI(PEDR, &PEDRShadow, PEDRShadow | 0xAF);	   // set all bits high
	WrPortI(PEDDR, &PEDDRShadow, PEDDRShadow | 0xAF);	// set all bits to output

	//---------------------------------------------------------------------
	// set global power save control self-timed chip select
	//---------------------------------------------------------------------
//	WrPortI(GPSCR, &GPSCRShadow, GPSCRShadow|0xe0);		//set to 109 nsec

#ifdef ADC_ONBOARD
	// clear table and read all calibration constants
	memset(_adcCalibS, 0, sizeof(_adcCalibS));
	memset(_adcCalibD, 0, sizeof(_adcCalibD));
	memset(_adcCalibM, 0, sizeof(_adcCalibM));
	anaInEERd(ALLCHAN, SINGLE, 0);
	anaInEERd(ALLCHAN, DIFF, 0);
	anaInEERd(ALLCHAN, mAMP, 0);

	// setup sclk
	anaInConfig(0x18, 0x81, ADC_SCLKBRATE); //reset adc device and sclk byte rate
#endif
}

/*** Beginheader */
#endif
/*** endheader */