/*
   Copyright (c) 2015, Digi International Inc.

   Permission to use, copy, modify, and/or distribute this software for any
   purpose with or without fee is hereby granted, provided that the above
   copyright notice and this permission notice appear in all copies.

   THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
   WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
   MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
   ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
   ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
   OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/
/*** BeginHeader */
#ifndef __RCM44XXW_LIB
#define __RCM44XXW_LIB

#if !(RCM4400W_SERIES) || _DC_MB_TYPE_ != 0
	#fatal "RCM44XXW.LIB only supports RCM44XXW series boards."
#endif

/*** EndHeader */

/* START LIBRARY DESCRIPTION *********************************************
RCM44XXW.LIB

DESCRIPTION:	This is a sample library only.

					Use with RCM44XXW series controllers and prototyping boards.
					Add or modify functions to suit your applications.

					RCM4400W Standard Setup:
						8-Bit Flash (512KB)
						8-Bit Fast SRAM (512KB)
						8-Bit SRAM (512KB)
                  802.11b Wireless Ethernet

REVISION HISTORY:
27-Dec-2006 olm	Created RCM44XXW.LIB from RCM42XX.LIB.

END DESCRIPTION **********************************************************/

/*** BeginHeader __brdinitflag */
extern int __brdinitflag;
/*** EndHeader */

int __brdinitflag;				//Board init function flag

/*** BeginHeader brdInit */

void brdInit();

/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
brdInit						<RCM44XXW.LIB>

SYNTAX:			void brdInit (void);

DESCRIPTION:	This function initializes parallel ports A through E for
					RCM44XXW series core modules running on an RCM44XXW series
               prototyping board.

               Default I/O port configuration:
               -------------------------------
					The brdInit function is setup to a default I/O configuration
               for the RCM4400W and the standard prototyping board.

               Note:
					-----
               This function is intended for demonstration purposes only
					and can be modified for your applications.

PARAMETER:    	None

RETURN VALUE:	None

-------------------------------------------------------------------------------
   General information and I/O initialization when using an RCM44XXW series
   core module on an RCM44XXW prototpying board
-------------------------------------------------------------------------------

	Summary of initialization
	-------------------------
   1. I/O port pins are configured for protoboard operation.
	2.	Unused configurable I/O are tied outputs set.
	3. RS232 is not enabled.
   4. LED's are off.
	5. Slave port disabled.

Pin   Port  Function                      I/O      I/O State
====  ====  ===========================   ======   ============================
8     PA0   Not used                      Output   Low
9     PA1   Not used                      Output   Low
10    PA2   Not used                      Output   Low
11    PA3   Not used                      Output   Low
12    PA4   Not used                      Output   Low
13    PA5   Not used                      Output   Low
14    PA6   Not used                      Output   Low
15    PA7   Not used                      Output   Low

16    PB0   Not used after sock_init (*)  Input		(*)
17    PB1   CLKA - Programming Port       Output   High
18    PB2   LED DS2                       Output   High (off)
19    PB3   LED DS3                       Output   High (off)
20    PB4   S2                            Input    Pulled-up protoboard
21    PB5   S3                            Input    Pulled-up protoboard
22    PB6   Not Used                      Output   High
23    PB7   Not Used                      Output   High

24    PC0   TXD - RS232                   Output   High
25    PC1   RXD - RS232                   Input    Pulled-up protoboard
26    PC2   TXC - RS232                   Output   High
27    PC3   RXC - RS232                   Input    Pulled-up protoboard
28    PC4   Not used after sock_init (*)  Input    (*)
29    PC5   Not used after sock_init (*)  Input    (*)
30    PC6   TXA - Programming port        Output   High when not driven
31    PC7   RXA - Programming port        Input    Pulled-up on core

40    PD0   Not Used                      Output   High
41    PD1   Not Used                      Output   High
42    PD2   Not Used                      Output   High
43    PD3   Not Used                      Output   High
44    PD4   Not Used                      Output   High
45    PD5   Not Used                      Output   High
46    PD6   Not Used                      Output   High
47    PD7   Not used                      Output   High

32    PE0   Not used                      Output   High
33    PE1   Not used                      Output   High
34    PE2   Not used                      Output   High
35    PE3   Not used                      Output   High
36    PE4   Not used                      Output   High
37    PE5   Wireless interrupt            Input    Interrupt from FPGA
38    PE6   External I/O strobe, 802.11b  Output   High when not driven
39    PE7   Not used                      Output   High

(*) During sock_init(), PB0, PC4 and PC5 will show activity as the 802.11 MAC is
initialized from the serial flash.  After sock_init(), PB0, PC4 and PC5 are free
for other use.

END DESCRIPTION **********************************************************/

__nodebug
void brdInit()
{
	#GLOBAL_INIT {__brdinitflag  = FALSE;}

	__brdinitflag = TRUE;

	/////////////////////////////////////////////////////////////////////////
	// Configure Port A
   /////////////////////////////////////////////////////////////////////////
	WrPortI(PADR, &PADRShadow, 0x00);		//set to output all low
	WrPortI(SPCR, &SPCRShadow, 0x84);		//sets all bits to output

   /////////////////////////////////////////////////////////////////////////
	// Configure Port B -- Leave PB0 and PB1 untouched (used for other
   //                     purposes)
   /////////////////////////////////////////////////////////////////////////
   WrPortI(PBDR,  &PBDRShadow,  (PBDRShadow & 0xCF) | 0xCC); // set outputs
   																			 // to high
   WrPortI(PBDDR, &PBDDRShadow, (PBDDRShadow & 0xCF) | 0xCC);// set inputs and
   																			 // outputs

   /////////////////////////////////////////////////////////////////////////
   // Configure Port C -- Leave PC4-PC7 untouched (used for other purposes)
   /////////////////////////////////////////////////////////////////////////
	WrPortI(PCFR,  &PCFRShadow,  PCFRShadow  & 0xF0); // no special functions
	WrPortI(PCDCR, &PCDCRShadow, PCDCRShadow & 0xF0); // clear all bits to
                                                     // drive high and low
	WrPortI(PCDR,  &PCDRShadow,  (PCDRShadow  & 0xFA) | 0x05); // set bits
	WrPortI(PCDDR, &PCDDRShadow, (PCDDRShadow & 0xFA) | 0x05); // set inputs
                                                              // and outputs

   /////////////////////////////////////////////////////////////////////////
	// Configure Port D
   /////////////////////////////////////////////////////////////////////////
	WrPortI(PDCR,  &PDCRShadow,  0x00);	// clear all bits to pclk/2
	WrPortI(PDFR,  &PDFRShadow,  0x00);	// No special functions
	WrPortI(PDDCR, &PDDCRShadow, 0x00);	// clear all bits to drive high and low
	WrPortI(PDDR,  &PDDRShadow,  0xFF);	// set all bits high
	WrPortI(PDDDR, &PDDDRShadow, 0xFF);	// set all bits to output

   /////////////////////////////////////////////////////////////////////////
	// Configure Port E
   // Wireless driver will set up PE5 and PE6
   /////////////////////////////////////////////////////////////////////////
	WrPortI(PECR,  &PECRShadow,  PECRShadow & 0x60);	// clear all bits to pclk/2
	WrPortI(PEFR,  &PEFRShadow,  PEFRShadow & 0x60);	// No special functions
	WrPortI(PEDCR, &PEDCRShadow, PEDCRShadow & 0x60);	// clear all bits to drive high and low
	WrPortI(PEDR,  &PEDRShadow,  PEDRShadow | 0x9F);	// set all bits high
	WrPortI(PEDDR, &PEDDRShadow, PEDDRShadow | 0x9F);	// set all bits to output

	//---------------------------------------------------------------------
	// set global power save control self-timed chip select
	//---------------------------------------------------------------------
//	WrPortI(GPSCR, &GPSCRShadow, GPSCRShadow|0xe0);		//set to 109 nsec
}

/*** BeginHeader */
#endif
/*** EndHeader */