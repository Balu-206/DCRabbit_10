/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/* START LIBRARY DESCRIPTION *********************************************
RN_CFG_GENERIC.LIB

DESCRIPTION:
	This library contains user configurable definitions for RabbitNet
   Devices and generic controllers.

   The functions in this library are generally called from RNET.LIB,
   and are intended to provide an implementation usable by that library.
   These functions should not normally be called from the application.

   A generic controller is assumed to be able to use clocked serial ports
   B, C and/or D.  The chip-enable signal is assumed to be one of the
   parallel port E pins (PE pin).

     ***NOTE***
     This library uses the port E bit setting registers to control the PE
     pins.  This means that the application must **NOT** use the WrPortI
     or BitWrPortI functions on the PEDR register.  If desired to manipulate
     other PE pins, then the application should also use the appropriate bit
     setting registers (PEB0R, PEB1R etc.).  Using other port E pins as
     interrupts or automatic chip select strobes is OK, since PEDR is not
     written directly.

   Before including this library, you should define the following macros:

   One or more of the following... (Note: either define to the number given,
   or zero to disable).
     #define RN_GENERIC_SERB	0x01
     #define RN_GENERIC_SERC	0x02
     #define RN_GENERIC_SERD	0x04
   A bitwise OR of the above values may be passed as the first parameter
   to rn_init() in order to actually use that port.
   For each of the above which is defined (and non-zero), define a
   corresponding macro which specifies which port E pin is used as
   chip-select:
     #define RN_GENERIC_CE_B	n
     #define RN_GENERIC_CE_C	n
     #define RN_GENERIC_CE_D	n
   where n is a bit number from 0 to 7 inclusive.  Defaults to 5,6,7
   respectively, however this may not work on some boards, so it is best
   to explicitly define them.

SUPPORT LIBS:
	This configuration library may be used as a basis for other controllers
   using RabbitNet Devices.  Libraries should be #used in the following
   order:

		#use "rn_cfg_generic.lib"  1. This configuration library
		#use "rnet.lib"            2. RabbitNet library
		#use "rnet_xxx.lib"        3. RabbitNet device libraries, if required

REVISION HISTORY:
	2005-12-12	SJH	Initial creation.

END DESCRIPTION **********************************************************/

/*** Beginheader */
#ifndef __RN_CFG_GENERIC_LIB
#define __RN_CFG_GENERIC_LIB

#ifndef RN_GENERIC_SERB
	#define RN_GENERIC_SERB	0x00
#endif
#ifndef RN_GENERIC_SERC
	#define RN_GENERIC_SERC	0x00
#endif
#ifndef RN_GENERIC_SERD
	#define RN_GENERIC_SERD	0x00
#endif
#ifndef RN_GENERIC_CE_B
	#define RN_GENERIC_CE_B	5
#endif
#ifndef RN_GENERIC_CE_C
	#define RN_GENERIC_CE_C	6
#endif
#ifndef RN_GENERIC_CE_D
	#define RN_GENERIC_CE_D	7
#endif

#define REC_OP 			0x40		//starts a receive operation
#define TRANS_OP 			0x80		//starts a transmit operation
#define REC_TRANS_OP 	0xC0		//starts a transmit and receive operation
#define USE_ALT			0x10		//use alternate port for input, serial ports A or B only
#define DISABLE_REC		0x20		//disable receiver input
#define INTERNAL_CLOCK 	0x0C		//use internal clock, usually master side
#define EXTERNAL_CLOCK 	0x08		//use external clock, usually slave side

/// Status byte abort mask
/// Setting the following bits will only abort transmitting data
///	after the status byte is returned.  This does not affect
///   the status byte and still can be interpreted.
// set any bit combination to abort:
// bit 7 device busy (hard-coded into driver)
// bit 4 communication error
// bit 1 command rejected
// bit 0	watchdog timeout
///
#ifndef RNSTATUSABORT
#define RNSTATUSABORT 0x80     //hard-coded driver default to abort if device busy
#endif

#ifndef RN_MAX_DEV
#define RN_MAX_DEV 10	//max number of devices, not to exceed 72
#endif

#ifndef RN_MAX_DATA
#define RN_MAX_DATA 32	//max number of data bytes in any transaction, not to exceed 255
#endif

// Cannot override these...
#define RN_MAX_PORT 3	//max number of serial ports, not to exceed 4
#define RN_PORTS (RN_GENERIC_SERB|RN_GENERIC_SERC|RN_GENERIC_SERD)	//bit mask for all ports

#ifndef RN_SPI_BAUD
 // SPI "baud rate" (actual bit rate is 8 times this value)
#define RN_SPI_BAUD 115200L
#endif

/*** EndHeader */

/*** Beginheader rn_sp_info */
void rn_sp_info();

typedef struct
{
	char controltx;
	char controlrx;
	char controlreg;
	char statusreg;
	char datareg;
	long clockrate;
} _RNPORTINFO;

extern _RNPORTINFO rnportinfo[RN_MAX_PORT];

/*** EndHeader */

_RNPORTINFO rnportinfo[RN_MAX_PORT];

/* START FUNCTION DESCRIPTION ********************************************
rn_sp_info						<RN_CFG_GENERIC.LIB>

SYNTAX:		void rn_sp_info();

DESCRIPTION:	Provides rn_init() with necessary serial port control
					information for BL2500 series controllers.

RETURN VALUE:	None

END DESCRIPTION **********************************************************/
__nodebug
void rn_sp_info()
{
	rnportinfo[0].controltx = REC_TRANS_OP|INTERNAL_CLOCK;
	rnportinfo[0].controlrx = REC_TRANS_OP|INTERNAL_CLOCK;
	rnportinfo[0].controlreg = SBCR;
	rnportinfo[0].statusreg = SBSR;
	rnportinfo[0].datareg = SBDR;
	rnportinfo[0].clockrate = RN_SPI_BAUD;

	rnportinfo[1].controltx = REC_TRANS_OP|INTERNAL_CLOCK;
	rnportinfo[1].controlrx = REC_TRANS_OP|INTERNAL_CLOCK;
	rnportinfo[1].controlreg = SCCR;
	rnportinfo[1].statusreg = SCSR;
	rnportinfo[1].datareg = SCDR;
	rnportinfo[1].clockrate = RN_SPI_BAUD;

	rnportinfo[2].controltx = REC_TRANS_OP|INTERNAL_CLOCK;
	rnportinfo[2].controlrx = REC_TRANS_OP|INTERNAL_CLOCK;
	rnportinfo[2].controlreg = SDCR;
	rnportinfo[2].statusreg = SDSR;
	rnportinfo[2].datareg = SDDR;
	rnportinfo[2].clockrate = RN_SPI_BAUD;


}



/*** Beginheader rn_sp_enable, rn_sp_disable */

__root void rn_sp_enable(int portnum);
__root void rn_sp_disable(int portnum);

/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rn_sp_enable						<RN_CFG_GENERIC.LIB>

SYNTAX:		void rn_sp_enable(int portnum);

DESCRIPTION:	Function that enables or asserts
					RabbitNet port	chip select prior to	data transfer.

PARAMETER1:		portnum = 0 for SERB, 1 for SERC, 2 for SERD

RETURN VALUE:	None

END DESCRIPTION **********************************************************/
/* START FUNCTION DESCRIPTION ********************************************
rn_sp_disable						<RN_CFG_GENERIC.LIB>

SYNTAX:		void rn_sp_disable(int portnum);

DESCRIPTION:	Function that disables or deasserts
					RabbitNet port	chip select invalidating data transfer.

PARAMETER1:		portnum = 0 for SERB, 1 for SERC, 2 for SERD

RETURN VALUE:	None

END DESCRIPTION **********************************************************/

const word _rn_sp_cebits[] =
{
	PEB0R + RN_GENERIC_CE_B,
	PEB0R + RN_GENERIC_CE_C,
	PEB0R + RN_GENERIC_CE_D
};

#asm __root
rn_sp_enable::
	ld		de,_rn_sp_cebits
	ex		de,hl
	add	hl,de
	add	hl,de
	ld		hl,(hl)
	xor	a
	ioi ld (hl),a
	ret

rn_sp_disable::
	ld		de,_rn_sp_cebits
	ex		de,hl
	add	hl,de
	add	hl,de
	ld		hl,(hl)
	xor	a
	dec	a
	ioi ld (hl),a
	ret

#endasm


/*** Beginheader rn_sp_init */
void rn_sp_init(int port, long clkrate);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rn_sp_init						<RN_CFG_GENERIC.LIB>

SYNTAX:		void rn_sp_init(int portnum, long clkrate);

DESCRIPTION:	Configures and initializes an BL2500 series controller
					RabbitNet port	as a clocked serial port.
					This is called from rn_init().

PARAMETER1:		portnum = 0 for SERB, 1 for SERC, 2 for SERD
PARAMETER2:		baudrate, user defines macro RN_SPI_BAUD. If not defined,
					will default to 115200L which gives 1 megabit data transfer.

RETURN VALUE:	None

SEE ALSO:		rn_sp_close

END DESCRIPTION **********************************************************/
__nodebug
__root void rn_sp_init(int port, long clkrate)
{
	auto int tdivisor;

	tdivisor = (int)((freq_divider * 19200.0/(float)clkrate + 0.5) - 1L);
   switch (port) {
      case 0:
	#if RN_GENERIC_SERB
         WrPortI(SBCR, &SBCRShadow, 0x0C);   // Internal clock, no interrupts
         BitWrPortI(PBDDR, &PBDDRShadow, 1, 0); // PB0 is ser clockoutput
         BitWrPortI(PCFR, &PCFRShadow, 1, 4);// SERB output drive on PC4
         WrPortI(TAT5R, &TAT5RShadow, tdivisor);
	      BitWrPortI(PEFR, &PEFRShadow, 0, RN_GENERIC_CE_B); // Normal parallel output
	      BitWrPortI(PEDR, &PEDRShadow, 1, RN_GENERIC_CE_B); // Set inactive (high)
	      BitWrPortI(PEDDR, &PEDDRShadow, 1, RN_GENERIC_CE_B);  // Set as an output
   #endif
         break;
      case 1:
	#if RN_GENERIC_SERC
         WrPortI(SCCR, &SCCRShadow, 0x0C);   // Internal clock, no interrupts
			BitWrPortI ( PDFR, &PDFRShadow, 1, 2 );	// set PD2 as serial clock
			BitWrPortI ( PDDDR, &PDDDRShadow, 1, 2 );	// set PD2 as output
   		BitWrPortI ( PCFR, &PCFRShadow, 1, 2 ); // enable serial Port C UART output on PC2
		   WrPortI ( TAT6R, &TAT6RShadow, tdivisor);	// set the SPI bit rate
	      BitWrPortI(PEFR, &PEFRShadow, 0, RN_GENERIC_CE_C); // Normal parallel output
	      BitWrPortI(PEDR, &PEDRShadow, 1, RN_GENERIC_CE_C); // Set inactive (high)
	      BitWrPortI(PEDDR, &PEDDRShadow, 1, RN_GENERIC_CE_C);  // Set as an output

   #endif
         break;
      case 2:
	#if RN_GENERIC_SERD
       	WrPortI(SDCR, &SDCRShadow, 0x0C);	// Internal clock, Parallel Port C used for input, no interrupts
		  	BitWrPortI ( PCFR, &PCFRShadow, 1, 3 );	// set PC3 for alternate output as serial clock
         BitWrPortI ( PCDDR, &PCDDRShadow, 1, 3 );	// set PC3 as output
			BitWrPortI ( PCDCR, &PCDCRShadow, 0, 3); //set PC3 to drive High and Low
         WrPortI ( PCALR, &PCALRShadow, PCALRShadow | 0xC0); //set PC3 as alternate output 3
		  	BitWrPortI ( PCFR, &PCFRShadow, 1, 0 ); // enable serial Port D UART output on PC0
		  	WrPortI ( TAT7R, &TAT7RShadow, tdivisor );	// set the SPI bit rate

	      BitWrPortI(PEFR, &PEFRShadow, 0, RN_GENERIC_CE_D); // Normal parallel output
	      BitWrPortI(PEDR, &PEDRShadow, 1, RN_GENERIC_CE_D); // Set inactive (high)
	      BitWrPortI(PEDDR, &PEDDRShadow, 1, RN_GENERIC_CE_D);  // Set as an output
   #endif
         break;
   }
}

/*** Beginheader rn_sp_close */
void rn_sp_close(int port);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rn_sp_close						<RN_CFG_GENERIC.LIB>

SYNTAX:		void rn_sp_close(int port);

DESCRIPTION:	Deactivates BL2500 series controller RabbitNet port as
					a clocked serial port.
					This call is used rn_init().

PARAMETER1:		portnum = 0

RETURN VALUE:	None

SEE ALSO:		rn_sp_init

END DESCRIPTION **********************************************************/
__nodebug
void rn_sp_close(int port)
{
	// this is a no-op for generic
}

/*** BeginHeader */
#endif
/*** EndHeader */