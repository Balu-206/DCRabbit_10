/*** Beginheader */
#ifndef __RN_CFG_BL4S1XX_LIB
#define __RN_CFG_BL4S1XX_LIB

#if !BL4S100_SERIES
#error "RN_CFG_BL4S1xx.LIB only supports BL4S1xx series boards."
#endif
/*** endheader */


/* START LIBRARY DESCRIPTION *********************************************
RN_CFG_BL4S1xx.LIB
	Copyright (c) 2008 Digi International Inc., All Rights Reserved

	This software contains proprietary and confidential information of Digi
	International Inc.  By accepting transfer of this copy, Recipient agrees
	to retain this software in confidence, to prevent disclosure to others,
	and to make no use of this software other than that for which it was
	delivered.  This is a published copyrighted work of Digi International
	Inc.  Except as permitted by federal law, 17 USC 117, copying is strictly
	prohibited.

	Restricted Rights Legend

	Use, duplication, or disclosure by the Government is subject to
	restrictions set forth in sub-paragraph (c)(1)(ii) of The Rights in
	Technical Data and Computer Software clause at DFARS 252.227-7031 or
	subparagraphs (c)(1) and (2) of the Commercial Computer Software -
	Restricted Rights at 48 CFR 52.227-19, as applicable.

	Digi International Inc. 11001 Bren Road East, Minnetonka, MN 55343

DESCRIPTION:    This is a sample library only.

	This library contains user configurable definitions for RabbitNet
   Devices and BL4S1XX series controllers.

	Use with BL4S1XX series controllers and prototyping boards.
	Add or modify functions to suit your applications.

SUPPORT LIBS:
	This library is #used in BL4S1xx.LIB.

	This configuration library may be used as a basis for other controllers
   using RabbitNet Devices.  Libraries are #used in the following order
   and are #used at the end of this library.

		#use "rnet.lib"            // RabbitNet driver
		#use "rnet_dio.lib"        // RabbitNet DI/O card
		#use "rnet_ain.lib"        // RabbitNet Analog Input card
		#use "rnet_aout.lib"       // RabbitNet Analog Output card
		#use "rnet_relay.lib"      // RabbitNet Relay card
		#use "rnet_keyif.lib"      // RabbitNet Keypad/Display Interface
		#use "rnet_lcdif.lib"      // RabbitNet Keypad/Display Interface

REVISION HISTORY:
	02/27/08 bri	Ported from RCM39xx to BL4S1xx board family.
	08/31/07 bri	Ported from RCM33xx to RCM39xx board family.
	07/06/04 pel	Uncommented RN1600 libraries.
	10/08/03	pel	Initial creation.

END DESCRIPTION **********************************************************/


/********************************************************************
 ********************************************************************
 Do not make any changes to the following section. Scroll down to
 the Configuration Section to match your settings
********************************************************************
********************************************************************/

/*** Beginheader */
#define REC_OP				0x40	//starts a receive operation
#define TRANS_OP			0x80	//starts a transmit operation
#define REC_TRANS_OP		0xC0	//starts a transmit and receive operation
#define USE_ALT			0x10	//use alternate port for input,
										//serial ports A or B only
#define DISABLE_REC		0x20	//disable receiver input
#define INTERNAL_CLOCK	0x0C	//use internal clock, usually master side
#define EXTERNAL_CLOCK	0x08	//use external clock, usually slave side
/*** Endheader */

/********************************************************************
 ********************************************************************
	Configuration Section
	Make changes to the following to match your settings.
********************************************************************
********************************************************************/

/*** Beginheader  */
/// Status byte abort mask
/// Setting the following bits will only abort transmitting data
///	after the status byte is returned.  This does not affect
///   the status byte and still can be interpreted.
// set any bit combination to abort:
// bit 7 device busy (hard-coded into driver)
// bit 4 communication error
// bit 1 command rejected
// bit 0	watchdog timeout
///
#ifndef RNSTATUSABORT
#define RNSTATUSABORT 0x80   //hard-coded driver default to abort if device busy
#endif

#ifndef RN_MAX_DEV
#define RN_MAX_DEV 10	//max number of devices, not to exceed 72
#endif

#ifndef RN_MAX_DATA
#define RN_MAX_DATA 16	//max number of data bytes in any transaction,
#endif                  //not to exceed 255

#ifndef RN_MAX_PORT
#define RN_MAX_PORT 1	//max number of serial ports, not to exceed 4
#define RN_PORTS 0x01	//bit mask for all ports
#endif

#ifndef RN_SPI_BAUD
#define RN_SPI_BAUD 115200L //baudrate, 115200L gives 1 megabit data tranfer
#endif
/*** EndHeader */

/*** Beginheader rn_sp_info */
void rn_sp_info(void);

typedef struct {
	char controltx;
	char controlrx;
	char controlreg;
	char statusreg;
	char datareg;
	long clockrate;
} _RNPORTINFO;

extern _RNPORTINFO rnportinfo[RN_MAX_PORT];
/*** EndHeader */

_RNPORTINFO rnportinfo[RN_MAX_PORT];

/* START FUNCTION DESCRIPTION ********************************************
rn_sp_info                    								<RN_CFG_BL4S1xx.LIB>

SYNTAX:
   void rn_sp_info(void);

DESCRIPTION:
   Provides rn_init() with necessary serial port control information for
   BL4S1xx series controllers.

RETURN VALUE:
   None.
END DESCRIPTION *********************************************************/
__nodebug
void rn_sp_info(void)
{
	rnportinfo[0].controltx = REC_TRANS_OP|INTERNAL_CLOCK;
	rnportinfo[0].controlrx = REC_TRANS_OP|INTERNAL_CLOCK;
	rnportinfo[0].controlreg = SDCR;
	rnportinfo[0].statusreg = SDSR;
	rnportinfo[0].datareg = SDDR;
	rnportinfo[0].clockrate = RN_SPI_BAUD;
}

/*** Beginheader _rn_sp_fastenable */
__root void _rn_sp_fastenable(unsigned int portvalue);
/*** Endheader  */

/* START _FUNCTION DESCRIPTION ********************************************
_rn_sp_fastenable             <RN_CFG_BL4S1xx.LIB>

SYNTAX:
   void _rn_sp_fastenable(unsigned int portvalue);

PARAMETER1:
   Value to send to the I/O port pin.

RETURN VALUE:
   None.
END DESCRIPTION *********************************************************/
#asm __root __nodebug
_rn_sp_fastenable::
		ld		hl, (sp+2)			; get portvalue into HL
		ld		a, l
		or		h
		jr		z, .enablelow

.enablehigh:
		ld		de, PEDR
		ld		hl, PEDRShadow
		ipset	1
		set	2, (hl)				; active high chip select
ioi	ldd
		ipres
		ret

.enablelow:
		ld		de, PEDR
		ld		hl, PEDRShadow
		ipset	1
		res	2, (hl)				;active low chip select
ioi	ldd
		ipres
		ret
#endasm

/*** Beginheader _rn_sp_fastdisable */
__root void _rn_sp_fastdisable(unsigned int portvalue);
/*** Endheader  */

/* START _FUNCTION DESCRIPTION ********************************************
_rn_sp_fastdisable            <RN_CFG_BL4S1xx.LIB>

SYNTAX:
   void _rn_sp_fastdisable(unsigned int portvalue);

PARAMETER1:
   Value to send to the I/O port pin.

RETURN VALUE:
   None.
END DESCRIPTION *********************************************************/
#asm __root __nodebug
_rn_sp_fastdisable::
		ld		hl, (sp+2)			; get portvalue into HLaddress of reg
		ld		a, l
		cp		0
		jr		nz, .disablelow

.disablehigh:
		ld		de, PEDR
		ld		hl, PEDRShadow
		ipset	1
		set	2, (hl)				;inactive high chip select
ioi	ldd
		ipres
		ret

.disablelow:
		ld		de, PEDR
		ld		hl, PEDRShadow
		ipset	1
		res	2, (hl)				;inactive low chip select
ioi	ldd
		ipres
		ret
#endasm

/*** Beginheader rn_sp_enable, rn_sp_disable */
void rn_sp_enable(int portnum);
void rn_sp_disable(int portnum);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rn_sp_enable                  <RN_CFG_BL4S1xx.LIB>

SYNTAX:
   void rn_sp_enable(int portnum);

DESCRIPTION:
   Macro that enables or asserts BL4S1xx series controller
   RabbitNet port chip select prior to	data transfer.

PARAMETER1:
   portnum = 0

RETURN VALUE:
   None.
END DESCRIPTION *********************************************************/
__nodebug
void rn_sp_enable(int portnum)
{
#asm
		ld		a, (PEDRShadow)
		res	2, a
ioi	ld		(PEDR), a
		ld		(PEDRShadow), a
#endasm
}

/* START FUNCTION DESCRIPTION ********************************************
rn_sp_disable                 <RN_CFG_BL4S1xx.LIB>

SYNTAX:
   void rn_sp_disable(int portnum);

DESCRIPTION:
   Macro that disables or deasserts BL4S1xx series controller
   RabbitNet port chip select invalidating data transfer.

PARAMETER1:
portnum = 0

RETURN VALUE:
   None.
END DESCRIPTION *********************************************************/
__nodebug
void rn_sp_disable(int portnum)
{
#asm
		ld		a, (PEDRShadow)
		set	2, a
ioi	ld		(PEDR), a
		ld		(PEDRShadow), a
#endasm
}

/*** Beginheader rn_sp_init */
void rn_sp_init(int port, long clkrate);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rn_sp_init                    <RN_CFG_BL4S1xx.LIB>

SYNTAX:
   void rn_sp_init(int portnum, long byterate);

DESCRIPTION:
   Configures and initializes an BL4S1xx series controller RabbitNet port as
   a clocked serial port. This function is used by rn_init(). A run time
   exception will occur if the specified byte rate is too low.

PARAMETER1:
   portnum = 0

PARAMETER2:
   Byte rate, user defined macro RN_SPI_BAUD. If not defined, will default
   to 115200L.

RETURN VALUE:
   None.

SEE ALSO:
   rn_sp_close
END DESCRIPTION *********************************************************/
__nodebug
void rn_sp_init(int port, long byterate)
{
	auto int tdivisor;

	// (divisor+1) for 19200 baud is stored in BIOS variable "freq_divider"
	tdivisor = (int)((freq_divider * 19200.0 / (float) byterate + 0.5) - 1L);
	if (0 > tdivisor) {
		exception(-ERR_BADPARAMETER);
		exit(-ERR_BADPARAMETER);
	}
	BitWrPortI(PCFR, &PCFRShadow, 1, 0);
	WrPortI(SDDLR, NULL, (char) tdivisor);
	WrPortI(SDDHR, NULL, (char) (tdivisor >> 8) | 0x80);
	WrPortI(SDCR, &SDCRShadow, INTERNAL_CLOCK);
	WrPortI(SDER, &SDERShadow, 0x00);
	// set RNET_EN high to enable device
	_riosbc_set_pin(rsb_pin + BL_RNET_EN_INDEX, 1);
}

/*** Beginheader rn_sp_close */
void rn_sp_close(int port);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rn_sp_close                   <RN_CFG_BL4S1xx.LIB>

SYNTAX:
   void rn_sp_close(int port);

DESCRIPTION:
   Deactivates BL4S1xx series controller RabbitNet port as a clocked serial
   port. This function is used by rn_init().

PARAMETER1:
   portnum = 0

RETURN VALUE:
   None.

SEE ALSO:
   rn_sp_init
END DESCRIPTION *********************************************************/
__nodebug
void rn_sp_close(int port)
{
	rn_sp_disable(port);							// disable port select
	// reset RNET_EN low to disable device
	_riosbc_set_pin(rsb_pin + BL_RNET_EN_INDEX, 0);
	BitWrPortI(PCFR, &PCFRShadow, 0, 0);	// disable serial port D
	BitWrPortI(PCDR, &PCDRShadow, 1, 0);	// set disabled TXD high
}

/*** BeginHeader */
#use "rnet.lib"        // RabbitNet driver
#use "rnet_dio.lib"    // RabbitNet DI/O card
#use "rnet_ain.lib"    // RabbitNet Analog Input card
#use "rnet_aout.lib"   // RabbitNet Analog Output card
#use "rnet_relay.lib"  // RabbitNet Relay card
#use "rnet_keyif.lib"  // RabbitNet Keypad/Display Interface <<<uncomment to use
#use "rnet_lcdif.lib"  // RabbitNet Keypad/Display Interface <<<uncomment to use
/*** EndHeader */

/*** BeginHeader */
#endif
/*** EndHeader */