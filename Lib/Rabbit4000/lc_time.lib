/*
	lc_time.c

	Copyright (c) 2006-10 Digi International Inc., All Rights Reserved

	This software contains proprietary and confidential information of Digi
	International Inc.  By accepting transfer of this copy, Recipient agrees
	to retain this software in confidence, to prevent disclosure to others,
	and to make no use of this software other than that for which it was
	delivered.  This is a published copyrighted work of Digi International
	Inc.  Except as permitted by federal law, 17 USC 117, copying is strictly
	prohibited.

	Restricted Rights Legend

	Use, duplication, or disclosure by the Government is subject to
	restrictions set forth in sub-paragraph (c)(1)(ii) of The Rights in
	Technical Data and Computer Software clause at DFARS 252.227-7031 or
	subparagraphs (c)(1) and (2) of the Commercial Computer Software -
	Restricted Rights at 48 CFR 52.227-19, as applicable.

	Digi International Inc. 11001 Bren Road East, Minnetonka, MN 55343
*/
/*** BeginHeader */
#include <time.h>
#include <lc_time.h>

#ifdef LC_TIME_DEBUG
	#define _lc_time_debug	__debug
#else
	#define _lc_time_debug	__nodebug
#endif
/*** EndHeader */

/*** BeginHeader _lc_time_C */
/*** EndHeader */
/*
	DO NOT MODIFY THE _lc_time_C STRUCTURE
	These are time names for the C locale.  If you are trying to localize
	strftime() and related functions, change the members of _lc_time.
	Certain code must ALWAYS use the English names below (e.g., the web server's
	Date field), even if the locale changes.
	ALSO, this is currently a private structure and may change when Dynamic C
	adds actual support for locales.
*/
const _lc_time_t _lc_time_C = {
	"AM|PM",
	"Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec",
	"January|February|March|April|May|June|July|"\
		"August|September|October|November|December",
	"Sun|Mon|Tue|Wed|Thu|Fri|Sat",
	"Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday",
	"",					// no support for timezone names right now
	"%m/%d/%Y",
	"%H:%M:%S",
	"%m/%d/%Y %H:%M:%S"
};


/*** BeginHeader _lc_time */
/*** EndHeader */
_lc_time_t _lc_time = _lc_time_C;


/*** BeginHeader _strftime */
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
_strf_num                                                    <lc_time.lib>

SYNTAX:	void _strf_num( char far *dest, int num, int width, int pad)

DESCRIPTION:	Write a number to a character buffer with a fixed width.

PARAMETER 1:	Destination buffer to receive string.

PARAMETER 2:	Number to write to <dest>.  Values less than 0 are written as 0.

PARAMETER 3:	Exact number of characters to write to <dest>.  Must be at
					least 1.

PARAMETER 4:	Pad character to use (typically '0' or ' ').

RETURN VALUE:	None.

END DESCRIPTION **********************************************************/
_lc_time_debug
void _strf_num( char __far *dest, int num, int width, int pad)
{
	div_t d;

	if (width > 0)
	{
		d.quot = (num < 0) ? 0 : num;
		do
		{
			d = div( d.quot, 10);
			*--dest = '0' + d.rem;
		} while (--width && d.quot);	// loop until no more room, or we're padding

		while (width--)					// pad until there's no more room
		{
			*--dest = pad;
		}
	}
}

/* START _FUNCTION DESCRIPTION ********************************************
_strf_str                                                    <lc_time.lib>

SYNTAX:	char far *_strf_str( char far *dest, size_t maxsize,
															int index, const char far *list)
DESCRIPTION:	Helper function for _strftime(), used to look up a
					locale-specific string from a pipe-delimited (|) list.

PARAMETER 1:	Destination buffer to receive string.

PARAMETER 2:	Maximum number of characters to write to <dest>.

PARAMETER 3:	Indexed entry to search for in <list>.  Index 0 indicates the
					first entry in the list.

PARAMETER 4:	List of items to pull value from.  In the form:

						item 0|item 1|item 2|and more items follow

					The 0th item begins at the start of the string.  The 1st item
					begins after the first pipe delimiter.  Each item ends with
					either a null or the next pipe character.

RETURN VALUE:	Updated position (next character in buffer to write to).
					Note that the string written is NOT null terminated.

END DESCRIPTION **********************************************************/
_lc_time_debug
char __far *_strf_str( char __far *dest, size_t maxsize,
															int index, const char __far *list)
{
	int ch;

	if (index < 0 || maxsize == 0)
	{
		return dest;			// can't look up negative index, can't write 0 chars
	}

	// find the entry in the list
	while (index--)
	{
		do {
			ch = *list++;
			if (ch == '\0')
			{
				// ran out of entries, nothing to write
				return dest;
			}
		} while (ch != '|');
	}

	while (maxsize--)						// copy until buffer is full
	{
		ch = *list++;
		if (!ch || ch == '|')
		{
			break;							// hit end of field (null or separator)
		}
		*dest++ = ch;
	};

	return dest;
}

/* START _FUNCTION DESCRIPTION ********************************************
_week_of_year                                                <lc_time.lib>

SYNTAX:	int _week_of_year( int wstart, int wday, int yday)

DESCRIPTION:	Returns the "week of year" for a given date.  Pass in the
					day a week starts and the day of the week and day of the
					year for the current date.

PARAMETER 1:	The day a week starts -- typically Sunday (0) or Monday (1).

PARAMETER 2:	The day of the week for the given date (0=Sunday).

PARAMETER 3:	The day of the year for the given date (0=January 1).

RETURN VALUE:	The week number, ranging from 0 to 53 (53 is possible on a
					leap year starting on Saturday).

END DESCRIPTION **********************************************************/
_lc_time_debug
int _week_of_year( int wstart, int wday, int yday)
{
	// This algorithm copied from P.J. Plauger, The Standard C Library
	wday -= wstart;
	if (wday < 0)
	{
		wday += 7;
	}
	return (yday - wday + 12) / 7 - 1;
}
/* START _FUNCTION DESCRIPTION ********************************************
_strftime                                                       <lc_time.h>

SYNTAX:	size_t _strftime( char far *s, size_t maxsize, const char far *format,
					const struct tm far *timeptr, const _lc_time_t far *tnames)

DESCRIPTION:	Private function, identical to strftime() but with an additional
					parameter to specify the locale strings to use.  This function
					WILL change if/when Dynamic C provides actual locale support.

					For libraries (like HTTP.LIB) that always use English names,
					pass &_lc_time_C as the last parameter.  Otherwise, call
					strftime() directly to use the current locale.

					See function help for strftime() for description of parameters
					and format string.

RETURN VALUE:	Unlike strftime(), _strftime() returns -1 if the buffer is too
					small (necessary to differentiate between a full buffer and a
					call that didn't write any characters).

END DESCRIPTION **********************************************************/
_lc_time_debug
size_t _strftime( char __far *s, size_t maxsize, const char __far *format,
					const struct tm __far *timeptr, const _lc_time_t __far *tnames)
{
	struct tm t = *timeptr;
	char __far *end;				// character position after buffer we're writing to
	char __far *start;
	int ch;
	int pm, hour12, week;
	int wrote;

	// macros for adding a number or lookup string to output
	#define _STRF_NUM( n, w, p)	if ((s += w) < end) _strf_num( s, n, w, p)
	#define _STRF_STR( i, l)		s = _strf_str( s, (size_t) (end - s), i, l)

	pm = (hour12 = t.tm_hour) > 11;
	if (pm)
	{
		hour12 -= 12;
	}
	if (! hour12)
	{
		hour12 = 12;
	}

	end = maxsize + (start = s);
	while (s < end)
	{
		ch = *format++;
		if (! ch)			// end of format string
		{
			break;
		}
		if (ch != '%')		// normal character
		{
			*s++ = ch;
		}
		else					// format specifier
		{
			ch = *format++;
			switch (ch)
			{
				case '%':
					*s++ = ch;
					break;

				case 'a':	// locale's abbreviated weekday name.
					_STRF_STR( t.tm_wday, tnames->days_abr);
					break;

				case 'A':	// locale's full weekday name.
					_STRF_STR( t.tm_wday, tnames->days_full);
					break;

				case 'b':	// locale's abbreviated month name.
				case 'h':
					_STRF_STR( t.tm_mon - _TM_MON_JANUARY, tnames->months_abr);
					break;

				case 'B':	// locale's full month name.
					_STRF_STR( t.tm_mon - _TM_MON_JANUARY, tnames->months_full);
					break;

				case 'c':	// locale's appropriate date and time representation.
					// recursive call to _strftime using another format string
					wrote = _strftime( s, (size_t) (end - s),
												tnames->format_datetime, timeptr, tnames);
					if (wrote == -1)
					{
						return wrote;
					}
					s += wrote;
					break;

				case 'C':
					_STRF_NUM( t.tm_year < 100 ? 19 : 20, 2, '0');
					break;

				case 'd':	// decimal day of the month, leading zero (01-31).
					_STRF_NUM( t.tm_mday, 2, '0');
					break;

				case 'D':
					// recursive call to _strftime using another format string
					wrote = _strftime( s, (size_t) (end - s),
																"%m/%d/%y", timeptr, tnames);
					if (wrote == -1)
					{
						return wrote;
					}
					s += wrote;
					break;

				case 'e':	// decimal day of the month, leading space ( 1-31).
					_STRF_NUM( t.tm_mday, 2, ' ');
					break;

				case 'F':	// ISO 8601 date format
					// recursive call to _strftime using another format string
					wrote = _strftime( s, (size_t) (end - s),
																"%Y-%m-%d", timeptr, tnames);
					if (wrote == -1)
					{
						return wrote;
					}
					s += wrote;
					break;

				case 'H':	// hour (24-hour clock) as a decimal number (00-23).
					_STRF_NUM( t.tm_hour, 2, '0');
					break;

				case 'I':	// hour (12-hour clock) as a decimal number (01-12).
					_STRF_NUM( hour12, 2, '0');
					break;

				case 'm':	// month as a decimal number (01-12).
					_STRF_NUM( t.tm_mon + (1 - _TM_MON_JANUARY), 2, '0');
					break;

				case 'M':	// minute as a decimal number (00-59).
					_STRF_NUM( t.tm_min, 2, '0');
					break;

				case 'n':	// newline
					*s++ = '\n';
					break;

				case 'p':	// locale's equivalent of either AM or PM.
					_STRF_STR( pm, tnames->ampm);
					break;

				case 'R':
					// recursive call to _strftime using another format string
					wrote = _strftime( s, (size_t) (end - s),
																"%H:%M", timeptr, tnames);
					if (wrote == -1)
					{
						return wrote;
					}
					s += wrote;
					break;

				case 'S':	// second as a decimal number (00-60).
					_STRF_NUM( t.tm_sec, 2, '0');
					break;

				case 'T':	// ISO 8601 time format
					// recursive call to _strftime using another format string
					wrote = _strftime( s, (size_t) (end - s),
																"%H:%M:%S", timeptr, tnames);
					if (wrote == -1)
					{
						return wrote;
					}
					s += wrote;
					break;

				case 't':	// tab
					*s++ = '\t';
					break;

				case 'u':	// weekday as a decimal number (0-6), where Sunday is 0.
					*s++ = '0' + t.tm_wday;
					break;

				case 'w':	// weekday as a decimal number (1-7), where Monday is 1.
					*s++ = t.tm_wday ? ('0' + t.tm_wday) : '7';
					break;

				case 'x':	// locale's appropriate date representation.
					// recursive call to _strftime using another format string
					wrote = _strftime( s, (size_t) (end - s),
												tnames->format_date, timeptr, tnames);
					if (wrote == -1)
					{
						return wrote;
					}
					s += wrote;
					break;

				case 'X':	// locale's appropriate time representation.
					// recursive call to _strftime using another format string
					wrote = _strftime( s, (size_t) (end - s),
												tnames->format_time, timeptr, tnames);
					if (wrote == -1)
					{
						return wrote;
					}
					s += wrote;
					break;

				case 'y':	// year without century as a decimal number (00-99).
					// no need to do modulo 100 since _strf_num only prints 2 chars
					_STRF_NUM( t.tm_year, 2, '0');
					break;

				case 'Y':	// year with century as a decimal number.
					_STRF_NUM( 1900 + t.tm_year, 4, '0');
					break;

			#ifdef __ANSI_TIME__
				case 'j':	// day of the year as a decimal number (001-366).
					_STRF_NUM( t.tm_yday, 3, '0');
					break;

				case 'U':	// week number of the year as a decimal number (00-53).
								// (the first Sunday as the first day of week 1)
					week = _week_of_year( 0, t.tm_wday, t.tm_yday);
					_STRF_NUM( week, 2, '0');
					break;

				case 'W':	// week number of the year as a decimal number (00-53).
								// (the first Monday as the first day of week 1)
					week = _week_of_year( 1, t.tm_wday, t.tm_yday);
					_STRF_NUM( week, 2, '0');
					break;

				case 'Z':	// time zone name, or nothing if not determinable.
					_STRF_STR( t.tm_isdst > 0, tnames->tz);
					break;
			#endif

				default:
					// unsupported format char -- replace with '?'
					*s++ = '?';
			}
		}
	}

	if (s < end)
	{
		*s = '\0';
		return (size_t) (s - start);
	}
	else
	{
		return -1;
	}
}



