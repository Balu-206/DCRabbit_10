/*** BeginHeader *************************************************************/
//------------------------------------------------------------------------------
#define	FLASH_BUF_SIZE		0x00001000ul	// 4096-byte flash transfer buffer size
#define	FLASH_BUF_SIZE4K	0x01				// flash buffer size in 4K pages

#define DATAEND4K	(RAM_START+RAM_SIZE)		// end of RAM in 4K pages

// physical address in LDP format: [4 bits][16 bits] = 20-bit address
#define FLASH_BUF_0015		0 + ((TC_SYSBUF_BLOCK_START + TC_SYSBUF_BLOCK) & 0xffff)
#define FLASH_BUF_1619		0 + ((TC_SYSBUF_BLOCK_START + TC_SYSBUF_BLOCK) >> 16)	// Don't use directly, use flash_buf_1619 instead

#define MBXCR_A18_INVRT 0x10
#define MBXCR_A19_INVRT 0x20

// Rabbit 4000+ optionally inverts address MSBit (it's not limited to just A19).
// The bit, set, and res mnemonics don't accept expressions.
#if MSB_OFFSET == 0
	#define MSB_ID_MASK_BIT 2
#elif MSB_OFFSET == 1
	#define MSB_ID_MASK_BIT 3
#elif MSB_OFFSET == 2
	#define MSB_ID_MASK_BIT 4
#elif MSB_OFFSET == 3
	#define MSB_ID_MASK_BIT 5
#elif MSB_OFFSET == 4
	#define MSB_ID_MASK_BIT 6
#elif MSB_OFFSET == 5
	#define MSB_ID_MASK_BIT 7
#endif

// address in terms of XMEM window
#define FLASH_BUF_XPC		0 + ((TC_SYSBUF_BLOCK_START + TC_SYSBUF_BLOCK - 0xe000) >> 12) // Don't use directly, use flash_buf_xpc instead
#define FLASH_BUF_ADDR		0xE000

//------------------------------------------------------------------------------
//***** Memory Size Information ********************************************
//***** User Data Reserve Store Information ***********************************
#ifndef _SOS_USERDATA
   /*
      Size Of Store to reserve for general purpose (but when possible, battery-
      backable) user data, at a relatively fixed physical address as compared to
      xalloc'd memory. The default size may be overridden by adding e.g.
      _SOS_USERDATA=0x10000L into the Project Options' Defines box. The default
      size, zero, means no user data reserve memory store is required by the
      application. The size is rounded up to a multiple of 4K (0x1000) bytes
      for the actual allocation of this reserve memory org. The _BOS_USERDATA
      and _TOS_USERDATA macros are elsewhere defined as the bottom and top
      physical addresses of the user data reserve memory store, respectively.
   */
   #define _SOS_USERDATA   0x00000L
#endif
/*
   Number of 4K (0x1000) byte blocks reserved for the user data store. This is
   the macro used in memory org definitions.
*/
#ifndef USERDATA_NBLOCKS
	#define USERDATA_NBLOCKS   (0xFF&((_SOS_USERDATA+0xFFF)>>12))
#endif
#if USERDATA_NBLOCKS != (0xFF&((_SOS_USERDATA+0xFFF)>>12))
   #fatal "USERDATA_NBLOCKS must equal _SOS_USERDATA's 4 KB blocks integer value."
#endif

//******* Target communication configuration ********************************
#define TC_SYSBUF_SIZE      256  // The size of the internal target communication
                                 // system buffers. The TC_HEADER_RESERVE size is
                                 // included in this value, so adjust the size of
                                 // the buffer accordingly.

#define TC_SYSBUF_COUNT      15  // The number of internal target communication
                                 // system buffers. Each is of the size
                                 // TC_SYSBUF_SIZE, as defined above.

#define TC_WRITEBLOCK_SIZE  256  // The size of the buffer that WriteBlocks are
                                 // received into, and therefor the MTU of a
                                 // write request.

// The RAMSR is not supported
#if FLASH_COMPILE
   #define FLASHDRIVER_SIZE  0x400
#else
   #define FLASHDRIVER_SIZE  0x0
#endif

#define INTVEC_TABLE_SIZE 0x200
#if _RAB6K
	#define XINTVEC_TABLE_SIZE 0x200
#else
	#define XINTVEC_TABLE_SIZE 0x100
#endif

#define VECTOR_TABLE_SIZE (INTVEC_TABLE_SIZE + XINTVEC_TABLE_SIZE)

#define FLASHDRIVER_BASE  STACKORG-BBROOTDATA_SIZE-VECTOR_TABLE_SIZE-1

#if (_RAM_SIZE_==0x80) && !FAST_RAM_COMPILE
                                 // Number of 4k pages of RAM. _RAM_SIZE_
	#define RAM_SIZE 0x40         // is defined internally by Dynamic C
#else                            // during the coldboot stage, but can
	#define RAM_SIZE _RAM_SIZE_   // changed here. If _RAM_SIZE_ is 0x80 (512K)
#endif                           // we reserve the upper half for xalloc
                                 // and map top of DATA to the top of the
                                 // lower half of RAM. The xalloc initialization
                                 // code will recognize that the space is
                                 // available if RAM_SIZE < _RAM_SIZE_.

#define FLASH_SIZE _FLASH_SIZE_  // Number of 4k pages of flash. _FLASH_SIZE_
                                 // is defined internally by Dynamic C during
                                 // the coldboot stage by reading the flash ID
                                 // int from the flash on CS0, but can be changed
                                 // here.

#define DATAEND ((RAM_START+RAM_SIZE)*0x1000L-1L)
#if defined RAM2_START && defined RAM2_SIZE
	#define DATA2END ((RAM2_START+RAM2_SIZE)*0x1000L-1L)
#endif

/*** EndHeader ***************************************************************/