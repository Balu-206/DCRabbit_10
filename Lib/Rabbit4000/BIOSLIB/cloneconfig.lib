/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/* START LIBRARY DESCRIPTION *********************************************
CLONECONFIG.LIB

DESCRIPTION:
   Contains configuration macros used during cloning.  A user may override
   these macros if the default settings are not desired.

END DESCRIPTION **********************************************************/

/*** BeginHeader */

#ifndef ENABLE_CLONING
   #define ENABLE_CLONING 0  //by default cloning is disabled
#endif

#if ENABLE_CLONING == 1
	#if _BOARD_TYPE_ == RCM5750 || _BOARD_TYPE_ == RCM5650W
   	#error Cloning is not supported on this hardware.
      #error The Rabbit Field Utility (RFU) has been enhanced
      #error to handle loading firmware onto many devices at once.  Please use
      #fatal RFU.exe located in the utilities directory instead of cloning.
   #else
   	#warns Cloning is deprecated.
      #warns The Rabbit Field Utility (RFU) has been enhanced
      #warns to handle loading firmware onto many devices at once.  Please use
      #warns RFU.exe located in the utilities directory instead of cloning.
   #endif
#endif

// If 1, do Internet checksum for cloning.
// Setting this to 0 will save some code
// size and a little time. Uses RFC 1071,
// 1624 method.
#ifndef CL_CHECKSUM_ENABLED
   #define CL_CHECKSUM_ENABLED    1
#endif


// 0 Assumes crystal speed is different on master
//  and slave. Setting to 1 saves code space
//  for the crystal speed measurement and
//  autobauding. Autobauding works by setting
//  the slave and master to the highest baud
//  rate possible, and lowering the master's
//  baud rate until they match. This MUST be
//  set to 0 if the slave's crystal is or
//  might be slower than the master's. If this is
//  set to 1, make sure CL_DOUBLE_CLONE_CLOCK and
//  CLOCK_DOUBLED are set the same if copying
//  to like speed boards, since no autobauding
//  will take place.
#ifdef CL_ASSUME_SAME_CRYSTAL
   #if _SERIAL_BOOT_FLASH_ && CL_ASSUME_SAME_CRYSTAL == 0
      #warns "Serial boot flash boards always assume the same clock speed"
      #warns "on master and slave boards."
   #endif
#else
   #define CL_ASSUME_SAME_CRYSTAL 0
#endif


// Setting to 1 causes cloned boards to bypass
// the check for the cloning cable, thereby
// disabling cloning of clones
#ifndef STERILE_CLONES
   #define STERILE_CLONES         1
#endif


// Set to 0 to not run program on slave after cloning.
#ifndef CL_RUN_AFTER_COPYING
   #define CL_RUN_AFTER_COPYING   1
#endif


// Set to 1 to copy entire flash device.
//  Excludes system ID block unless
//  CL_INCLUDE_ID_BLOCKS is set to 1 also.
#ifndef CLONE_WHOLE_FLASH
   #define CLONE_WHOLE_FLASH      0
#endif


// Set to 1 to copy system ID and user block
// areas when cloning if CLONE_WHOLE_FLASH
// is also set to 1.
#ifndef CL_INCLUDE_ID_BLOCKS
   #define CL_INCLUDE_ID_BLOCKS   0
#endif


// Change this to 0 or 1 as needed if the slave
// does not or might not have the same clock
// doubler setting as the master.  By default
// the slave will use the same doubler setting
// as the master.
#ifdef CL_DOUBLE_CLONE_CLOCK
   #if _SERIAL_BOOT_FLASH_ && CL_DOUBLE_CLONE_CLOCK != CLOCK_DOUBLED
      #warns "Serial boot flash boards always assume the same doubler setting"
      #warns "on master and slave boards."
   #endif
#else
   #define CL_DOUBLE_CLONE_CLOCK CLOCK_DOUBLED
#endif


// If the slave is faster than, or might be
//  faster than the master, increase this to
//  the value needed to to achieve the fastest
//  common baud rate that works on both boards.
//  0 will always work when the slave crystal
//  speed is equal to the master crystal speed.
//  (This is the value that goes in the divisor
//  register, the actual divisor is this plus 1.)
//  The divisor register value is determined as
//  follows:
//  divisor reg. value = (crystal frequency in Hz)
//                        -----------------------  - 1
//                           (32 * baud rate)
//  For achievable baud rates, this should within
//  4% of an integral value.
//
//  Max baud rate = (crystal frequency in Hz) /32
//
//  If CL_DOUBLE_CLONE_CLOCK = 1, the crystal
//  frequency is the double the crystal frequency.
//
//  Use this macro also if mismatched crystal speeds
//  will prevent the master from achieving a common
//  baud rate with the slave if the slave's div. reg.
//  is 0. For example, set to 4 if the master is 12.8MHz
//  and the slave is 9.2MHz.
#ifndef INITIAL_SLV_BAUD_DIV
  #if _SERIAL_BOOT_FLASH_ == 1
    // Serial boot flash boards MUST trasmit slower due to
    // the resistor configuration on their programming ports
    #define INITIAL_SLV_BAUD_DIV 2
  #else
    #define INITIAL_SLV_BAUD_DIV 0
  #endif
#endif


// Set to 1 to force cloning master mode, so
// that the board always enters cloning mode
// on startup.  Setting this mode also forces
// sterile cloning mode, as only serile clones
// can run the User application code.
#ifndef CL_FORCE_MASTER_MODE
   #define CL_FORCE_MASTER_MODE   0
#endif


// Set to 1 if the board cannot reliably detect
// the presence or absence of a cloning cable,
// as when the programming port PB1 (CLKA) is
// either not connected or not pulled up. This
// macro is automatically defined for boards
// that have _DC_BRD_OPT0_ information in the
// ID block's macro table.
#ifndef CL_PB1_NOT_AVAILABLE
   #define CL_PB1_NOT_AVAILABLE   0
#endif


//This section catches errors with macro setup.
#if ENABLE_CLONING
   // Check if board can detect presence of cloning cable.
   //   Non-zero CL_PB1_NOT_AVAILABLE indicates that PB1 is either not available
   //   or is not pulled up at the programming header.
   #if CL_PB1_NOT_AVAILABLE
      // Board cannot detect presence of cloning cable.
      //   Check if cloning is configured to force the board to always go into
      //   clone master mode on startup.
      #if CL_FORCE_MASTER_MODE == 0
         // Cloning is misconfigured to detect presence of cloning cable.
         //   Reconfigure cloning setup so that cloning mode is always entered
         //   on startup and warn that the configuration has changed.
         #undef CL_FORCE_MASTER_MODE
         #define CL_FORCE_MASTER_MODE 1
         #warns "This board cannot detect the presence of a cloning cable."
      #endif
   #endif

   // Check if cloning master mode is forced.
   #if CL_FORCE_MASTER_MODE == 1
      // Cloning master mode is forced.
      #warns "When cloning is enabled, this board enters master"
      #warns " cloning mode on startup regardless of the presence or"
      #warns " absence of a cloning cable, except when in"
      #warns " programming/debugging mode (programming cable attached)."
      //   Check if board is configured to produce sterile clones.
      #if STERILE_CLONES == 0
         // Board is not configured to produce sterile clones.
         //   Only sterile clones can run the User application code when cloning
         //   master mode is forced, so reconfigure cloning setup to produce
         //   sterile clones and warn that the configuration has changed.
         #undef STERILE_CLONES
         #define STERILE_CLONES 1
         #warns "Since this board is configured to always enter master cloning"
         #warns " mode on startup, it must only produce sterile clones."
      #endif
   #endif

   #if RAM_COMPILE || SUPPRESS_FAST_RAM_COPY
      #fatal "Cannot enable cloning when compiling to RAM."
   #endif
#endif
/*** EndHeader ***************************************************************/