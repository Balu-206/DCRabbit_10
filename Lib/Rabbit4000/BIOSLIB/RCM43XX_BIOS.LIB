/*** BeginHeader */
#ifndef __RCM43XXBIOS_LIB__
#define __RCM43XXBIOS_LIB__

#if (!(RCM4300_SERIES))
#fatal "RCM43xxBIOS.LIB only supports RCM43xx series boards."
#endif

/*******************************************************************************
RCM43xxBIOS.LIB
   Copyright(c) Rabbit Semiconductor, Inc., August 2006.

DESCRIPTION:
               This library is specific to the RCM43xx series

					Automatically used with RCM43xx series controllers.


   The internal functions are:
		_rcm43_spi_init
		_shared_port_init
		_SPIgetSemaphore
		_SPIfreeSemaphore

   The API functions are:
     coreInit()

REVISION HISTORY:
04-Mar-2008 wts  Created from RCM43XX.LIB
27-Apr-2007 wts  Added brdInit (based on RCM42xx) w/ Semaphore processing
01-Aug-2006 blm  Created RCM43XX.LIB

END DESCRIPTION **********************************************************/

#define USE_CORE_INIT

#define DB_IP_SET3 ipset 3
#define DB_IP_RES  ipres

// Define this so the SD and other drivers know whether to use a semaphore
// for protection of the shared SPI port.
#define _SPI_SD_LINES_SHARED_

#define SPI_SF  &_spi_dev[0]
#define SPI_SD  &_spi_dev[1]
#ifdef ADC_ONBOARD
#define SPI_ADC &_spi_dev[2]
#endif

#define SPI_RXMASK           0x40  // Receive bit for SBCR
#define SPI_TXMASK           0x80  // Transmit bit for SBCR
#ifndef DEFSPIDIVISOR
  #define DEFSPIDIVISOR      0x00  // Default SPI divisor
#endif
#define SPI_DEF_CONTROL_VAL  0x0C  // Default Control bits for SBCR
#define SPI_DEF_ECONTROL_VAL 0x08  // Default Control bits for SBER

#define SPI_SF_DIVISOR  DEFSPIDIVISOR
#define SPI_SD_DIVISOR  DEFSPIDIVISOR
#define SPI_SF_ECONTROL_VAL SPI_DEF_ECONTROL_VAL
#define SPI_SD_ECONTROL_VAL SPI_DEF_ECONTROL_VAL
#ifdef ADC_ONBOARD
#define SPI_ADC_DIVISOR DEFSPIDIVISOR
#define SPI_ADC_ECONTROL_VAL 0
#define SPI_SHARED_DEVS  3
#else
#define SPI_SHARED_DEVS  2
#endif

#ifndef _SPI_MAXTIME
  #define _SPI_MAXTIME 5000UL  // In milliseconds
#endif

//*** Shared SPI pins and clock registers
#define SBF_DR         SBDR
#define _AR_OFFS  1
#define _SR_OFFS  3
#define _CR_OFFS  4
#define _ER_OFFS  5
#define SF_TATR       TAT5R

//*** Structure for tracking of shared devices on the SPI port ***
 struct _SPIDev{
   char ID;            // 0
   int  CSport;        // 1   (not currently used)
   char CSPinMask;     // 3   (not currently used)
   char *portShadow;   // 4   (not currently used)
   char SCLCKdiv;      // 6
   char SBERvalue;     // 7
 };

//*** Controlling structure for the SPI port semaphore ***
 struct _spiSemaphore{
   char owner;         // Owner ID
   char timerState;    // 1 = initialized, 0 = not, 2 = timeout occurred
   char lastDiv;       // last divisor
 };

   //*** SD HW Definitions
   // Card Detect for the RCM4300 uses an Ethernet pin and requires
   // no initialization
   #define SD_CD_PORT           NAPCR
   #define SD_CD_PORT_FR        0
   #define SD_CD_PORT_FRSHADOW  NULL
   #define SD_CD_PORT_DDR       0
   #define SD_CD_PORT_DDRSHADOW NULL
   #define SD_CD_PIN            1

   // No Write Protect input
   #define SD_WP_PORT           0
   #define SD_WP_PORT_FR        0
   #define SD_WP_PORT_FRSHADOW  NULL
   #define SD_WP_PORT_DDR       0
   #define SD_WP_PORT_DDRSHADOW NULL
   #define SD_WP_PIN            0

   // CS for the RCM4300 uses an Ethernet pin and requires
   // no initialization
   #define SD_CS_PORT           NAPCR
   #define SD_CS_PORT_DRSHADOW  &NAPCRShadow
   #define SD_CS_PORT_DDR       0
   #define SD_CS_PORT_FR        0
   #define SD_CS_PORT_FRSHADOW  NULL
   #define SD_CS_PORT_DDRSHADOW NULL
   #define SD_CS_PORT_DCR       0
   #define SD_CS_PORT_DCRSHADOW NULL
   #define SD_CS_PIN            4
   #define SD_CS_PORT_OD        0

   #define SD_TX_PORT_DR        PCDR
   #define SD_TX_PORT_DRSHADOW  &PCDRShadow
   #define SD_TX_PORT_FR        PCFR
   #define SD_TX_PORT_FRSHADOW  &PCFRShadow
   #define SD_TX_PORT_DDR       PCDDR
   #define SD_TX_PORT_DDRSHADOW &PCDDRShadow
   #define SD_TX_PORT_DCR       PCDCR
   #define SD_TX_PORT_DCRSHADOW &PCDCRShadow
   #define SD_TX_PIN            4
   #define SD_TX_PORT_OD        0

   #define SD_PWR_PORT_DR        NAPCR
   #define SD_PWR_PORT_DRSHADOW  &NAPCRShadow
   #define SD_PWR_PORT_FR        0
   #define SD_PWR_PORT_FRSHADOW  NULL
   #define SD_PWR_PORT_DDR       0
   #define SD_PWR_PORT_DDRSHADOW NULL
   #define SD_PWR_PORT_DCR       0
   #define SD_PWR_PORT_DCRSHADOW NULL
   #define SD_PWR_PIN            3
   #define SD_PWR_PORT_OD        0
   #define SD_PWR_PORT_ON        1

   #define SD_LED_PORT_DR        NAPCR
   #define SD_LED_PORT_DRSHADOW  &NAPCRShadow
   #define SD_LED_PORT_FR        0
   #define SD_LED_PORT_FRSHADOW  NULL
   #define SD_LED_PORT_DDR       0
   #define SD_LED_PORT_DDRSHADOW NULL
   #define SD_LED_PORT_DCR       0
   #define SD_LED_PORT_DCRSHADOW NULL
   #define SD_LED_PIN            2
   #define SD_LED_PORT_OD        0
   #define SD_LED_PORT_ON        1

   #define SD_RX_PORT_DR         PCDR
   #define SD_RX_PORT_FR         PCFR
   #define SD_RX_PORT_FRSHADOW   &PCFRShadow
   #define SD_RX_PORT_DDR        PCDDR
   #define SD_RX_PORT_DDRSHADOW  &PCDDRShadow
   #define SD_RX_PIN             5

   #define SD_CLK_PORT_DR        PBDR
   #define SD_CLK_PORT_FR        0
   #define SD_CLK_PORT_FRSHADOW  NULL
   #define SD_CLK_PORT_DDR       PBDDR
   #define SD_CLK_PORT_DDRSHADOW &PBDDRShadow
   #define SD_CLK_PORT_DCR       0
   #define SD_CLK_PORT_DCRSHADOW NULL
   #define SD_CLK_PIN            0
   #define SD_CLK_PORT_OD        0

   #define SD_SPI_TACRSHADOW &TACRShadow
   #define SD_SPI_SERPORT SBDR
   #define SD_SPI_TCREG TACR
   #define SD_SPI_TCRSHADOW &TACRShadow
   #define SD_SPI_TCRVALUE 0

   #define SD_SPI_SERSHADOW &SBERShadow
   #define SD_SPI_SERVALUE SD_SPI_CLOCK_MODE

   #define SD_SPI_SCRSHADOW &SBCRShadow
   #define SD_SPI_SCRVALUE SD_SPI_CONTROL_VALUE

   #define SD_SPI_DIVREG TAT5R
   #define SD_SPI_DIVREGSHADOW &TAT5RShadow
   #define SD_SPI_DIVISOR 0

   #define SD_ENABLECS(DI) BitWrPortI(DI->csport,DI->csportdrShadow,0,DI->cspin)
   #define SD_DISABLECS(DI) BitWrPortI(DI->csport,DI->csportdrShadow,1,DI->cspin)
   #define SD_ENABLEPOW(DI) BitWrPortI(DI->pwrport,DI->pwrportdrShadow,DI->pwron,DI->pwrpin)
   #define SD_DISABLEPOW(DI) BitWrPortI(DI->pwrport,DI->pwrportdrShadow,DI->pwron^1,DI->pwrpin)

   //SD serial port register offsets
   #define SD_AR_OFFSET 1
   #define SD_SR_OFFSET 3
   #define SD_CR_OFFSET 4
   #define SD_ER_OFFSET 5
   #define SD_SPI_CONTROL_VALUE 0x0c
   #define SD_SPI_TXMASK 0x80
   #define SD_SPI_RXMASK 0x40
   #define SD_SPI_CLOCK_MODE 0x08

  extern void* spi_Mutex; // Will be used as OS_EVENT*
  void* spi_Mutex;        //   Use void* here so it doesn't

/*** EndHeader */


/*** BeginHeader coreInit */
void coreInit();
/*** EndHeader */

/************************************************************************
coreInit						<RCM43XX_BIOS.LIB>

SYNTAX:			void coreInit (void);

DESCRIPTION:	This function initializes the shared SPI port system for
					the RCM43xx series core modules.

PARAMETER:    	None

RETURN VALUE:	None

END DESCRIPTION **********************************************************/

__nodebug
void coreInit()
{
   _shared_port_init();
}

/*** BeginHeader  _shared_port_init, _SPIgetSemaphore, _SPIfreeSemaphore */
 __root void _shared_port_init();
 __root int _SPIgetSemaphore(const struct _SPIDev *dev);
 __root int _SPIfreeSemaphore(const struct _SPIDev *dev);
 extern unsigned long _SPI_t0_;
 extern struct _SPIDev _spiActiveDev;
 extern const unsigned long _SPI_TIMEOUT;
 extern struct _spiSemaphore _SPI_semaphore;
/*** EndHeader */

unsigned long _SPI_t0_;
const unsigned long _SPI_TIMEOUT = (long)_SPI_MAXTIME;
struct _SPIDev _spiActiveDev;
struct _spiSemaphore _SPI_semaphore;

__nodebug
__root void _shared_port_init(){

   _rcm43_spi_init(DEFSPIDIVISOR, SPI_DEF_CONTROL_VAL, SPI_DEF_ECONTROL_VAL);

   // Initialize device struct
   memset(&_spiActiveDev, 0, sizeof(_spiActiveDev));

   // Initialize flash info
   _FlashInfo.writeMode = 2;
   _FlashInfo.sectorSize = _sfb_dev.pagesize;
	_FlashInfo.numSectors = _sfb_dev.npages;

}

/***************************************************************

 int _SPIgetSemaphore(const struct _SPIDev *dev);

This function grabs a semaphore to prevent  devices from
trying to use the shared SPI lines at the same time. The first
attempt to grab the semaphore by a device when the semaphore
is already in use by another device starts a timeout timer.
If the device specified by dev is already the owner, it will
return 0 for success.

Only a call to _SPIfreeSemaphore by the owning dev can free the
semaphore. When the semaphore is successfully grabbed, SBER is
written with the correct mode and TAT5R is written with the
correct baud divisor. If the divisor has changed, a small loop
allows the baud clock to run down.

Input:
   dev - one of  SPI_SD, SPI_SF, SPI_ADC

Return Values:
     0 - Success. Semaphore wasn't in use and the device
         specified by dev now owns it. (Or already owned)

     1 - Semaphore is already in use by the serial flash
     2 - Semaphore is already in use by the SD card
     3 - Semaphore is already in use by the ADC chip

		If more than _SPI_MAXTIME milliseconds elapsed since
      the last attempt to grab the semaphore by device
      specified in dev, a fatal run-time error -ETIME results.

****************************************************************/
const int structSize = sizeof(struct _SPIDev);
#ifndef _SPI_USE_UCOS_MUTEX
#asm
_SPIgetSemaphore::
#ifndef  SPI_NODEVSHARING
    DB_IP_SET3
    ld    a,(_SPI_semaphore)
    ld    b,a                 ; B = semaphore owner ID
    and   0xff
    ld    a,(hl)              ; HL = ptr to dev struct, A = device ID
    jr    nz,.spiGSdone       ; In use (maybe by cur. dev)
    ld    (_SPI_semaphore),a  ; Calling dev owns it now
    xor    a                  ; Reset timeout timer
    ld    (_SPI_semaphore+_spiSemaphore+timerState),a
    ld    bc,(structSize)     ; Make caller active
    ld    de,_spiActiveDev
    ldir                      ; Load structure
    DB_IP_RES

    ; In case these differ...
    ld    hl,_spiActiveDev+_SPIDev+SBERvalue
    ld    a,(hl)
ioi ld    (SBER),a

    ; If baud rate changed, run down clock
    ld    hl, _spiActiveDev+_SPIDev+SCLCKdiv
    ld    a,(hl)              ; A =  _spiActiveDev.SCLCKdiv
    ld    hl,_SPI_semaphore+_spiSemaphore+lastDiv
    cp    (hl)                ; Compare with last divisor
    ld    (hl),a
    jr    z,.spiGSdone1       ; Return success if no change
ioi ld    (TAT5R),a           ; Otherwise change divisor
    ld    b,16                ; and delay for baud run down
.spiBCdelay:
    djnz  .spiBCdelay
.spiGSdone1:
    ld    L,0
    ld    h,0                 ; Return 0 for success
    ret

.spiGSdone:
    cp    b
    jr    nz,.spiGSnotsame
    ld    b,0                   ; Caller already has semaphore
    DB_IP_RES
    jr    .spiGSdone2

.spiGSnotsame:
    ld    hl,_SPI_semaphore+_spiSemaphore+timerState  ; Get timer state
    bit   0,(hl)
    jr    z,.spiInitTimer

    //  MS_TIMER-t0 > _SF_TIMEOUT ?
    exx
    ld    jkhl,(MS_TIMER)
    ld    bcde,(_SPI_t0_)
    sub   jkhl,bcde
    ld    bcde,(_SPI_TIMEOUT)
    cp    jkhl,bcde
    exx
    jr    c,.spiNoSemTimeOut

    DB_IP_RES
c   exit(-ETIME);             // Timed out

.spiInitTimer:  			      ; Init timeout test
    inc   (hl)                ; _SPI_semaphore.timerstate = 1
    ld    jkhl,(MS_TIMER)
    ld    (_SPI_t0_),jkhl     ; t0 = MS_TIMER
.spiNoSemTimeOut:
    DB_IP_RES

.spiGSdone2:
    ld    L,b   ; B=0 if have sem. already or not busy
    ld    h,0   ;  else B = current owner ID
#else
    clr   hl
#endif
    ret
#endasm

#else // Using SPI uC/OS-II mutex
__nodebug
int _SPIgetSemaphore(const struct _SPIDev *dev){
    auto int i,rc;

    OS_ENTER_CRITICAL();
    // If calling device already owns, just return success
    if(_spiActiveDev.ID && dev->ID == _spiActiveDev.ID)
    {
       OS_EXIT_CRITICAL();
       return 0;
    }
    else {
	    // Wait for semaphore
   	 OSMutexPend((OS_EVENT*)spi_Mutex,(int)_SPI_TIMEOUT,(char*)&rc);
   	 memcpy(&_spiActiveDev, dev, structSize);
       OS_EXIT_CRITICAL();
	    if((char)rc != OS_NO_ERR){
   	    exception(ERR_SPI_MUTEX_ERROR);   // Mutex errors are fatal
      	 exit(ERR_SPI_MUTEX_ERROR);
	    }
	    WrPortI(SBER,&SBERShadow,_spiActiveDev.SBERvalue);
   	 WrPortI(TAT5R,&TAT5RShadow,_spiActiveDev.SCLCKdiv);
	    for(i=0;i<5;i++);  // Let baud clock run down
       return 0;
    }
}
#endif

/***************************************************************

 int _SPIfreeSemaphore(const struct _SPIDev *dev);

 Should be called by device specified by dev when the device
 no longer needs to use the SPI lines. Must be called by the
 owning device before the semaphore can grabbed by any device
 again.

****************************************************************/
#ifndef _SPI_USE_UCOS_MUTEX
#asm
_SPIfreeSemaphore::
#ifndef  SPI_NODEVSHARING
    DB_IP_SET3
    ld    a,(_SPI_semaphore)  ; A = ID
    cp    (hl)                ; Only owner can free it
    jr    nz,.spiFSdone
    xor   a
    ld    (_SPI_semaphore),a  ;  _SPI_semaphore.ID = 0
    ld    (_spiActiveDev),a   ;  _spiActiveDev.owner = 0
.spiFSdone:
    DB_IP_RES
    ld    h,0
    ld    L,a                 ; 0 for success or owner
#else
    clr   hl
#endif
    ret
#endasm

#else // Using uC/OS-II mutex
__nodebug
int _SPIfreeSemaphore(const struct _SPIDev *dev){
    auto rc;

    OS_ENTER_CRITICAL();
    // If calling device already owns, just return success
    if(_spiActiveDev.ID==0)
    {
       OS_EXIT_CRITICAL();
       return 0;
    }
    else {
	    // Signal semaphore free
       rc = OSMutexPost((OS_EVENT*)spi_Mutex);
	    _spiActiveDev.ID = 0;
       OS_EXIT_CRITICAL();
   	 if(rc != OS_NO_ERR){
      	 exception(ERR_SPI_MUTEX_ERROR);
	       exit(ERR_SPI_MUTEX_ERROR);
   	 }
   	 return 0;
    }
 }

#endif

/*** BeginHeader _spi_dev */
// Define shared SPI devices
const struct _SPIDev _spi_dev[SPI_SHARED_DEVS] = {
   {1, NAPCR, 0x20, &NAPCRShadow, SPI_SF_DIVISOR, SPI_SF_ECONTROL_VAL}, // Serial flash
   {2, NAPCR, 0x08, &NAPCRShadow, SPI_SD_DIVISOR, SPI_SD_ECONTROL_VAL}  // SD
#ifdef ADC_ONBOARD
   ,{3, GOCR,  0x01, &GOCRShadow, SPI_ADC_DIVISOR, SPI_ADC_ECONTROL_VAL} // ADC
#endif
};
/*** EndHeader */

/*** BeginHeader _rcm43_spi_init */
__root int _rcm43_spi_init(int divisor, int _CR, int _ER);
/*** EndHeader */


__nodebug
__root int _rcm43_spi_init(int divisor, int _CR, int _ER){
#asm
      // Deassert all shared SPI devices' CS pins
      ld    a,(NAPCRShadow)
      and   0xDF        ; Disable SF chip
      or    0x08        ; Disable SD card
ioi   ld    (NAPCR),a
      ld    (NAPCRShadow),a
      ld    a,(GOCRShadow)
      or    0x03
ioi   ld    (GOCR),a    ; Disable ADC chip
      ld    (GOCRShadow),a
      ld    a, L
ioi   ld    (TAT5R), a  ; SCLCK divisor
      ld    a,1
ioi   ld    (TACSR),a   ; Start clock
      xor   a
ioi   ld    (PDFR),a
      ld    a,(PCFRShadow)
      res   4,a
      or    0x10
ioi   ld    (PCFR),a    ; Setup TXB on PC5
      ld    (PCFRShadow),a
      ld    a,(PCDDRShadow)
      res   4,a
      or    0x10
      ld    (PCDDRShadow),a
ioi   ld    (PCDDR),a    ; Set TXB to output
      ld    a,(PBDDRShadow)
      or    0x01
      ld    (PBDDRShadow),a
ioi   ld    ( PBDDR),a  ; Set PB0 to output for SCLCK
      ld    hl,PBDR
ioi   res   0,(hl)
      ld    hl,PCDR
ioi   res   4,(hl)
      ld    HL,(SP+@SP+_CR)
      ld    a,L
ioi   ld    (SBCR),  a

      //**** Initialize clocked serial port
      ld    HL,(SP+@SP+_ER)
      ld    a,L
ioi   ld    (SBER),  a
ioi   ld    a,(SBSR)
ioi   ld    a,(SBDR)
#endasm
      _SPI_semaphore.owner = 0;    // Make SF first owner
      _SPI_semaphore.timerState = 0;
}

/*** BeginHeader _rcm43_InitUCOSMutex */
void _rcm43_InitUCOSMutex(int mutexPriority);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
_rcm43_InitUCOSMutex                <RCM43XX_BIOS.LIB>

SYNTAX:		 void _rcm43_InitUCOSMutex(int mutexPriority)

DESCRIPTION: The SPI API is not reentrant from multiple tasks. If
        you wish to use the SPI from multiple uC/COS tasks, you must
        do the following:

         1) #define _SPI_USE_UCOS_MUTEX

         2) call:

              _rcm43_InitUCOSMutex(mutexPriority);

            AFTER calling OSInit(), but BEFORE starting any tasks that
            use the SPI, i.e. ADC, SD, and read/write serial flash functions
            that can return an SPI-in-use return code. mutexPriority is a
            uC/OS-II task priority that MUST be higher than the priorities
            of all tasks that call such API functions.

       A single mutex will ensure that only one caller can use the SPI
       at a time. Mutex timeouts or other errors will cause a run-time
       error - ERR_SPI_MUTEX_ERROR.

       uC/OS-II may raise the priority of tasks using mutexes to
       prevent priority inversion.

       The default mutex time-out in milliseconds is given by

           SPI_MUTEX_TIMEOUT

       which defaults to 5 seconds

*************************************************************************/

#ifndef SPI_MUTEX_TIMEOUT     // For uC/OS-II
  #define SPI_MUTEX_TIMEOUT (OS_TICKS_PER_SEC*(_SPI_MAXTIME/1000))
#endif

__nodebug
void  _rcm43_InitUCOSMutex(int mutexPriority){
   auto char rc;

   spi_Mutex = OSMutexCreate(mutexPriority, &rc);

   if( (spi_Mutex==NULL) || (rc!= OS_NO_ERR) ){
      exception(ERR_SPI_MUTEX_ERROR);
      exit(ERR_SPI_MUTEX_ERROR);
   }
}

/*** BeginHeader */
#endif	// __RCM43XX_BIOS_LIB__
/*** EndHeader */


