/* START LIBRARY DESCRIPTION *********************************************
 FIMprog.LIB

 DESCRIPTION:
   This library provides an API for programming of the on chip FIM's
   of the Rabbit 6000 processor.

   NOTE: If using FAT based load / verify functions, you must
          #use FAT16.lib before you #use FIMprog.lib

 CONFIGURATION MACROS:
   The following macros may be defined (before #use of FIMprog.lib):

   #define FIM_IRQ_PRIORITY
      Sets the priority of the FIM interrupts on the Rabbit processor.
      This is a value from 1 to 3, with 1 being the lowest priority and
      3 being the highest.  Default if not defined is to use priority 1.

   #define FIM_DEBUG
      Define FIM_DEBUG to enable debugging for FIM programming functions


 REVISION HISTORY:

  Rev 1.0   	WTS   Initial release.
  2009/12/08	SJH   Added ability to program using #ximported Intel hex files.


 Copyright (c) 2008 Digi International Inc., All Rights Reserved

 This software contains proprietary and confidential information of Digi
 International Inc.  By accepting transfer of this copy, Recipient agrees
 to retain this software in confidence, to prevent disclosure to others,
 and to make no use of this software other than that for which it was
 delivered.  This is an published copyrighted work of Digi International
 Inc.  Except as permitted by federal law, 17 USC 117, copying is strictly
 prohibited.

 Restricted Rights Legend

 Use, duplication, or disclosure by the Government is subject to
 restrictions set forth in sub-paragraph (c)(1)(ii) of The Rights in
 Technical Data and Computer Software clause at DFARS 252.227-7031 or
 subparagraphs (c)(1) and (2) of the Commercial Computer Software -
 Restricted Rights at 48 CFR 52.227-19, as applicable.

 Digi International Inc. 11001 Bren Road East, Minnetonka, MN 55343

END DESCRIPTION *************************************************************/


/*** Beginheader */
#ifndef __FIMPROG_LIB
#define __FIMPROG_LIB

#if CPU_ID_MASK(_CPU_ID_) >= R6000

#ifdef FIM_DEBUG
#define _fim_nodebug __debug
#else
#define _fim_nodebug __nodebug
#endif


#ifndef MSCR
   #define MSCR 0x0434
#endif


// Defines FATfile pointers to VOID if FAT has not been 'used'
#ifndef __FAT16_LIB
#define FATfile void
#endif

                                    // FIM Base Address Definitions
#define FIM0_BASE         0x6000   // FIM Module A (PCC0) Base Address
#define FIM1_BASE         0x7000   // FIM Module B (PCC1) Base Address

                                   // FIM Register Address Definitions
#define FIM_RX_TX_DATA_FIFO 0x00   // FIM RX/TX Data FIFO offset
#define FIM_RX_FIFO_STATUS  0x01   // FIM RX FIFO Status offset
#define FIM_FIFO_STATUS     0x02   // FIM FIFO Status offset
#define FIM_GC_REG_0        0x03   // FIM General Control Reg. 0 (INT from FIM)
#define FIM_GC_REG_1        0x04   // FIM GC Register 1 (INT to FIM)
#define FIM_GC_REG_2        0x05   // FIM GC Register 2 (FIM HWA mode)
#define FIM_GC_REG_3        0x06   // FIM GC Reg. 3 (Code Access & INT Priority)
#define FIM_CTRL_BASE       0x07   // FIM Control Bytes Base Address
#define FIM_PORT_BASE       0x17   // FIM Port Expansion Bytes Base Address
#define FIM_HWA_GEN_CFG     0x27   // FIM HW Assist General Config offset
#define FIM_SIG_0_MODE_LOW  0x28   // FIM Signal 0 Mode low byte offset
#define FIM_SIG_0_MODE_HI   0x29   // FIM Signal 0 Mode high byte offset
#define FIM_SIG_1_MODE_LOW  0x2A   // FIM Signal 1 Mode low byte offset
#define FIM_SIG_1_MODE_HI   0x2B   // FIM Signal 1 Mode high byte offset
#define FIM_SIG_2_MODE_LOW  0x2C   // FIM Signal 2 Mode low byte offset
#define FIM_SIG_2_MODE_HI   0x2D   // FIM Signal 2 Mode high byte offset
#define FIM_SIG_3_MODE_LOW  0x2E   // FIM Signal 3 Mode low byte offset
#define FIM_SIG_3_MODE_HI   0x2F   // FIM Signal 3 Mode high byte offset
#define FIM_SIG_4_MODE_LOW  0x30   // FIM Signal 4 Mode low byte offset
#define FIM_SIG_4_MODE_HI   0x31   // FIM Signal 4 Mode high byte offset
#define FIM_SIG_5_MODE_LOW  0x32   // FIM Signal 5 Mode low byte offset
#define FIM_SIG_5_MODE_HI   0x33   // FIM Signal 5 Mode high byte offset
#define FIM_SIG_6_MODE_LOW  0x34   // FIM Signal 6 Mode low byte offset
#define FIM_SIG_6_MODE_HI   0x35   // FIM Signal 6 Mode high byte offset
#define FIM_SIG_7_MODE_LOW  0x36   // FIM Signal 7 Mode low byte offset
#define FIM_SIG_7_MODE_HI   0x37   // FIM Signal 7 Mode high byte offset
#define FIM_CTRL_0_MODE_LOW 0x38   // FIM Control 0 Mode low byte offset
#define FIM_CTRL_0_MODE_HI  0x39   // FIM Control 0 Mode high byte offset
#define FIM_CTRL_1_MODE_LOW 0x3A   // FIM Control 1 Mode low byte offset
#define FIM_CTRL_1_MODE_HI  0x3B   // FIM Control 1 Mode high byte offset
#define FIM_CTRL_2_MODE_LOW 0x3C   // FIM Control 2 Mode low byte offset
#define FIM_CTRL_2_MODE_HI  0x3D   // FIM Control 2 Mode high byte offset
#define FIM_CTRL_3_MODE_LOW 0x3E   // FIM Control 3 Mode low byte offset
#define FIM_CTRL_3_MODE_HI  0x3F   // FIM Control 3 Mode high byte offset
#define FIM_BUS_0_MODE_LOW  0x40   // FIM Bus 0 Mode low byte offset
#define FIM_BUS_0_MODE_HI   0x41   // FIM Bus 0 Mode high byte offset
#define FIM_BUS_1_MODE_LOW  0x42   // FIM Bus 1 Mode low byte offset
#define FIM_BUS_1_MODE_HI   0x43   // FIM Bus 1 Mode high byte offset
#define FIM_IO_CFG_0        0x0400 // FIM I/O Configuration 0 offset
#define FIM_IO_CFG_1        0x0401 // FIM I/O Configuration 1 offset
#define FIM_AUX_IO_CFG_0    0x0402 // FIM Auxiliary I/O Configuration 0 offset
#define FIM_AUX_IO_CFG_1    0x0403 // FIM Auxiliary I/O Configuration 1 offset
#define FIM_AUX_IO_CFG_2    0x0404 // FIM Auxiliary I/O Configuration 2 offset
#define FIM_AUX_IO_CFG_3    0x0405 // FIM Auxiliary I/O Configuration 3 offset
#define FIM_AUX_IO_CFG_4    0x0406 // FIM Auxiliary I/O Configuration 4 offset
#define FIM_AUX_IO_CFG_5    0x0407 // FIM Auxiliary I/O Configuration 5 offset
#define FIM_AUX_IO_CFG_6    0x0408 // FIM Auxiliary I/O Configuration 6 offset
#define FIM_AUX_IO_CFG_7    0x0409 // FIM Auxiliary I/O Configuration 7 offset
#define FIM_IRAM_LOW_BASE   0x0800 // FIM Instruction RAM low byte base offset
#define FIM_IRAM_HI_BASE    0x0C00 // FIM Instruction RAM hi byte base offset

                                     // FIM Bit Masks
#define FIM_GC_INT_ACK_MASK   0x80   // FIM General Control Int. Acknowlege
#define FIM_GC_INT_CODE_MASK  0x7F   // FIM General Control Interrupt Code
#define FIM_GC_PRG_MEM_MASK   0x80   // FIM General Control Program Memory bit
#define FIM_GC_INT_CFG_MASK   0x03   // FIM General Control Int. Configuration
#define FIM_GC_CLK_SEL_MASK   0x1C   // FIM General Control Clock Select
#define FIM_HWA_EN_MASK       0x03   // FIM Harware Assist Enable
#define FIM_HWA_IMODE_MASK    0xE0   // FIM Harware Assist Input Mode
#define FIM_HWA_CLK_EDGE_MASK 0x10   // FIM Harware Assist Clock Edge bit
#define FIM_HWA_CTRL_MASK     0x0C   // FIM Harware Assist Control
#define FIM_HWA_CLK_SEL_MASK  0x03   // FIM Harware Assist Clock Select
#define FIM_HWA_OMODE_MASK    0x03   // FIM Harware Assist Output Mode
#define FIM_RX_FIFO_FULL      0x08   // FIM RX FIFO Full flag
#define FIM_RX_FIFO_EMPTY     0x04   // FIM RX FIFO Empty flag
#define FIM_TX_FIFO_FULL      0x02   // FIM TX FIFO Full flag
#define FIM_TX_FIFO_EMPTY     0x01   // FIM TX FIFO Empty flag

#ifndef FIM_ACK_RETRY
#define FIM_ACK_RETRY         2000   // FIM Acknowledge timeout
                                     // (sets number of times to check)

//************** FIM REGISTER ACCESS MACROS ****************

#define fim0_start(X)  WrPortI(FIM0_BASE+FIM_GC_REG_3,NULL, \
                               FIM_GC_PRG_MEM_MASK+(X&FIM_GC_INT_CFG_MASK))
#define fim1_start(X)  WrPortI(FIM1_BASE+FIM_GC_REG_3,NULL, \
                               FIM_GC_PRG_MEM_MASK+(X&FIM_GC_INT_CFG_MASK))
#define fim0_stop      WrPortI(FIM0_BASE+FIM_GC_REG_3,NULL,0)
#define fim1_stop      WrPortI(FIM1_BASE+FIM_GC_REG_3,NULL,0)

#define fim0_read_byte(Y)    RdPortI(FIM0_BASE+Y)
#define fim1_read_byte(Y)    RdPortI(FIM1_BASE+Y)
#define fim0_read_word(Y)    RdPortI(FIM0_BASE+Y+1)<<8 + RdPortI(FIM0_BASE+Y)
#define fim1_read_word(Y)    RdPortI(FIM1_BASE+Y+1)<<8 + RdPortI(FIM1_BASE+Y)

#define fim0_write_byte(X,Y) WrPortI(FIM0_BASE+X,NULL,Y)
#define fim1_write_byte(X,Y) WrPortI(FIM1_BASE+X,NULL,Y)
#define fim0_write_word(X,Y) WrPortI(FIM0_BASE+X,NULL,Y); \
                             WrPortI(FIM0_BASE+Y+1,NULL,Z>>8)
#define fim1_write_word(X,Y) WrPortI(FIM1_BASE+X,NULL,Y); \
                             WrPortI(FIM1_BASE+Y+1,NULL,Z>>8)

#define fim0_read_control(X)    RdPortI(FIM0_BASE+FIM_CTRL_BASE+X)
#define fim1_read_control(X)    RdPortI(FIM1_BASE+FIM_CTRL_BASE+X)
#define fim0_write_control(X,Y) WrPortI(FIM0_BASE+FIM_CTRL_BASE+X,NULL,Y)
#define fim1_write_control(X,Y) WrPortI(FIM1_BASE+FIM_CTRL_BASE+X,NULL,Y)

#define fim0_read_port(X)       RdPortI(FIM0_BASE+FIM_PORT_BASE+X)
#define fim1_read_port(X)       RdPortI(FIM1_BASE+FIM_PORT_BASE+X)

#define fim0_set_PF(Y)  (WrPortI(FIM0_BASE+FIM_IO_CFG_0,NULL,(Y)&0xFF), \
                         WrPortI(FIM0_BASE+FIM_IO_CFG_1,NULL,(Y)>>8))
#define fim1_set_PG(Y)  (WrPortI(FIM1_BASE+FIM_IO_CFG_0,NULL,(Y)&0xFF), \
                         WrPortI(FIM1_BASE+FIM_IO_CFG_1,NULL,(Y)>>8))


#define fim_write_aux_cfg(X,Y)  WrPortI(FIM0_BASE+FIM_AUX_IO_CFG_0+X,NULL,Y)
#define fim_read_aux_cfg(X)     RdPortI(FIM0_BASE+FIM_AUX_IO_CFG_0+X)

#define fim_port_access(X,Y)    BitWrPortI(POCR,&POCRShadow,Y,X)

#endif
#endif
/*** Endheader */

/*** BeginHeader fim_get_ack */
int fim_get_ack(int fim_num);

/* START FUNCTION DESCRIPTION ********************************************
fim_get_ack                 <FIMprog.LIB>

SYNTAX: int fim_get_ack( int fim_num )

DESCRIPTION:  Waits for acknowledgement of FIM interrupt request with
              built in timeout mechanism.  When acknowlege is received
              from FIM, the IRQ line is cleared and the function will
              wait for the FIM to lower the acknowledge line.

              If the FIM takes too long in raising or lowering the
              acknowledge line, the routine will return an error but
              will always lower the IRQ request.

PARAMETER1:   FIM number (0 for FIM A, 1 for FIM B)

RETURN VALUE:    0        on Success
              -EINVAL     Invalid parameter (fim_num not 0 or 1)
              -ETIMEDOUT  FIM failed to correctly acknowledge the
                          interrupt request with timeout (FIM_ACK_RETRY)

END DESCRIPTION **********************************************************/

/*** EndHeader */

int fim_get_ack(int fim_num)
{
   int c;

   if (fim_num != 0 && fim_num != 1) {
      return -EINVAL;    // Return Invalid parameter error
   }
   fim_num = ((fim_num + 6) << 12) + FIM_GC_REG_0;

   for (c = FIM_ACK_RETRY + 1; --c; ) {
      if (RdPortI(fim_num) & 0x80) break;
   }
   WrPortI(fim_num + 1, NULL, 0);   // Clear IRQ to FIM unit
   if (c) {
	   for (c = FIM_ACK_RETRY + 1; --c; ) {
	      if (!(RdPortI(fim_num) & 0x80)) return 0;
	   }
   }
   return -ETIMEDOUT;
}


/*** BeginHeader fim_program_load */
int fim_program_load(int fim_num, __far int* code);

/* START FUNCTION DESCRIPTION ********************************************
fim_program_load                 <FIMprog.LIB>

SYNTAX: int fim_program_load(int fim_num, far int* code)

DESCRIPTION:  Loads and verifies the program pointed to by code into
              the appropriate FIM instruction memory.  Code block will
              be verified with embedded CRC check before being written
              to insure it has not been corrupted.

              Halts the specified FIM.

PARAMETER1:   FIM number (0 for FIM A, 1 for FIM B)
PARAMETER2:   Pointer to the beginning of the FIM program to load.

RETURN VALUE:    0     on Success
              -EINVAL  Invalid parameter (fim_num not 0 or 1, code = NULL)
              -EBADF   Bad FIM code, failed embedded CRC check
              -EFAULT  Written but did not verify correct

END DESCRIPTION **********************************************************/

/*** EndHeader */

_fim_nodebug int fim_program_load(int fim_num, __far int* code)
{
   int addr, fim_low, fim_hi;
   __far int *ptr, *end;
   word w;

   if (code == NULL || (fim_num != 0 && fim_num != 1)) {
      return -EINVAL;    // Return Invalid parameter error
   }

   // Stops FIM and allows access to FIM IRAM area
   fim_low = (fim_num ? FIM1_BASE : FIM0_BASE);
   WrPortI(fim_low+FIM_GC_REG_3,NULL,0);

   // Setup begining and end of code pointers
   ptr = code + 2;
   end = ptr + (*code >> 1);
   // Verify code block matches CRC check value
   if (*end != getfarcrc((__far char *)ptr, *code, 0xFFFF)) {
      return -EBADF;
   }

   // Setup low and high byte pointer to FIM instruction memory
   fim_hi = fim_low + FIM_IRAM_HI_BASE;
   fim_low += FIM_IRAM_LOW_BASE;

   // Write code to the FIM instruction memory and verify
   for (addr = 0; ptr < end; ptr++) {
      if (*ptr < 0) {
         addr = *ptr & 0x7FFF;
      }
      else {
         WrPortI(fim_low + addr, NULL, *ptr);
         WrPortI(fim_hi + addr, NULL, *(((__far char *)ptr)+1));
         if (RdPortI(fim_low + addr) != (*ptr & 0x00FF) ||
             RdPortI(fim_hi + addr) != (*ptr >> 8)) {
            return -EFAULT;
         }
         addr++;
      }
   }
}

/*** BeginHeader fim_prog_intel_hex */
int fim_prog_intel_hex(int fim_num, long xfile);
/* START FUNCTION DESCRIPTION ********************************************
fim_prog_intel_hex                 <FIMprog.LIB>

SYNTAX: int fim_prog_intel_hex(int fim_num, long xfile)

DESCRIPTION:  Loads and verifies the program pointed to by xfile into
              the appropriate FIM instruction memory.  xfile is assumed
              to be the symbol associated with a #ximport file, which
              should be in standard Intel hex format.  This format is
              generated by many assemblers.

              Halts the specified FIM.

PARAMETER1:   FIM number (0 for FIM A, 1 for FIM B)
PARAMETER2:   #ximport file symbol.  For data in RAM, this is a longword
              which, when interpreted as a linear (far) address, points to
              a longword which contains the length of the following data.

RETURN VALUE:    0     on Success
              -EINVAL  Invalid parameter (fim_num not 0 or 1, bad code format)
              -EBADF   Bad FIM code, failed Intel hex file CRC check
              -EFAULT  Written but did not verify correct

END DESCRIPTION **********************************************************/

/*** EndHeader */



_fim_nodebug int fim_prog_intel_hex(int fim_num, long xfile)
{
	char buf[68];
	char * b;
	char __far * f = (char __far *)xfile;
	long len = *(long __far *)f;
	char __far * end;
	int bytes, words;
	int r;
	word addr;
	int type;
	word chk;

   if (!xfile || (fim_num != 0 && fim_num != 1))
      return -EINVAL;    // Return Invalid parameter error

   // Stops FIM and allows access to FIM IRAM area
   WrPortI((fim_num ? FIM1_BASE : FIM0_BASE)+FIM_GC_REG_3,NULL,0);

	f += sizeof(long);
	end = f + len;

	while (f < end) {
		while (isspace(*f)) {
			++f;
			if (f >= end)
				return 0;
		}
		if (*f++ != ':')
			return -EBADF;
		bytes = hexstrtobyte(f);
		if (bytes < 0 || bytes > 64)
			return -EBADF;
		words = bytes >> 1;
		r = hexstr2bin(f + 2, buf, bytes+4);
		if (r)
			return -EBADF;
		f += 2*(5 + bytes);
		if (f >= end)
			return -EBADF;
		addr = ntohs(*(word *)buf);
		if (addr & 1)	// No odd alignments
			return -EBADF;
		addr >>= 1;		// Convert byte address to word address
		if (addr+words > 0x400)	// No more than 1k words
			return -EBADF;
		type = buf[2];
		for (chk = bytes, r = 0; r < bytes+4; chk += buf[r], ++r);
		if (chk & 0xFF)
			return -EBADF;

		if (type)
			// Ignore all except data records
			continue;
		b = buf + 3;

#if 0
      if (bytes & 1)
         return -EBADF;
      printf("Addr: %04X, len=%d\n", addr, bytes);
      for (r = 0; r < bytes; r += 2)
         printf(" %04X\n", *(word *)(b + r));
#endif

	   // Setup low and high byte pointer to FIM instruction memory
	   addr += fim_num ? (FIM1_BASE+FIM_IRAM_LOW_BASE) : (FIM0_BASE+FIM_IRAM_LOW_BASE);

	   // Write code to the FIM instruction memory and verify
	   for (r = 0; r < bytes; r += 2, b += 2, ++addr) {
         WrPortI(addr, NULL, *b);
         WrPortI(addr + (FIM_IRAM_HI_BASE-FIM_IRAM_LOW_BASE), NULL, b[1]);
         if (RdPortI(addr) != *b ||
             RdPortI(addr + (FIM_IRAM_HI_BASE-FIM_IRAM_LOW_BASE)) != b[1]) {
            return -EFAULT;
         }
	   }
	}
	return 0;
}


/*** BeginHeader fim_program_verify */
int fim_program_verify(int fim_num, __far int* code);

/* START FUNCTION DESCRIPTION ********************************************
fim_program_verify                 <FIMprog.LIB>

SYNTAX: int fim_program_verify(int fim_num, far int* code)

DESCRIPTION:  Verifies the program pointed to by code matches the
              appropriate FIM instruction memory.  Code block will be
              verified with embedded CRC check before verification to
              insure it has not been corrupted.

              Halts the specified FIM.

PARAMETER1:   FIM number (0 for FIM A, 1 for FIM B)
PARAMETER2:   Pointer to the beginning of the FIM program to verify.

RETURN VALUE:    0     on Success
              -EINVAL  Invalid parameter (fim_num not 0 or 1)
              -EBADF   Bad FIM code, failed embedded CRC check
              -EFAULT  Instruction memory did not match code block

END DESCRIPTION **********************************************************/

/*** EndHeader */

_fim_nodebug int fim_program_verify(int fim_num, __far int* code)
{
   int addr, inst, fim_low, fim_hi;
   __far int *ptr, *end;
   word w;

   if (code == NULL || (fim_num != 0 && fim_num != 1)) {
      return -EINVAL;    // Return Invalid parameter error
   }

   // Stops FIM and allows access to FIM IRAM area
   fim_low = (fim_num ? FIM1_BASE : FIM0_BASE);
   WrPortI(fim_low+FIM_GC_REG_3,NULL,0);

   // Setup begining and end of code pointers
   ptr = code + 2;
   end = ptr + (*code >> 1);
   // Verify code block matches CRC check value
   if (*end != getfarcrc((__far char *)ptr, *code, 0xFFFF)) {
      return -EBADF;
   }

   // Setup low and high byte pointer to FIM instruction memory
   fim_hi = fim_low + FIM_IRAM_HI_BASE;
   fim_low += FIM_IRAM_LOW_BASE;

   // Verify code with what's contained in FIM instruction memory
   for (addr = 0; ptr < end; ptr++) {
      if (*ptr < 0) {
         addr = *ptr & 0x7FFF;
      }
      else {
         inst = RdPortI(fim_low + addr);
         inst |= RdPortI(fim_hi + addr) << 8;
         if (inst != *ptr) {
            return -EFAULT;
         }
         addr++;
      }
   }
}


/*** BeginHeader fim_program_read */
int fim_program_read(int fim_num, __far int* code);

/* START FUNCTION DESCRIPTION ********************************************
fim_program_read                 <FIMprog.LIB>

SYNTAX: int fim_program_read(int fim_num, far int* code)

DESCRIPTION:  Reads the specified FIM instruction memory into the code
              block pointed to by code.  Preceeds the code block with
              a length value in words (1024) and follows code with an
              CRC check value.  The code block should have enough space
              to receive the 2054 bytes that will be written to it.
              Halts the specified FIM.

PARAMETER1:   FIM number (0 for FIM A, 1 for FIM B)
PARAMETER2:   Pointer to the beginning of the FIM storage area (Uses 2KB)

RETURN VALUE:    0     on Success
              -EINVAL  Invalid parameter (fim_num not 0 or 1)

END DESCRIPTION **********************************************************/

/*** EndHeader */

_fim_nodebug int fim_program_read(int fim_num, __far int* code)
{
   int addr, fim_low, fim_hi;
   __far int *ptr;

   if (code == NULL || (fim_num != 0 && fim_num != 1)) {
      return -EINVAL;    // Return Invalid parameter error
   }

   // Stops FIM and allows access to FIM IRAM area
   fim_low = (fim_num ? FIM1_BASE : FIM0_BASE);
   WrPortI(fim_low+FIM_GC_REG_3,NULL,0);

   // Write length of 1024 instructions (2048 bytes) to start of header
   *((__far long *)code) = 2048;

   // Set ptr to start of code
   ptr = code + 2;

   // Setup low and high byte pointer to FIM instruction memory
   fim_hi = fim_low + FIM_IRAM_HI_BASE;
   fim_low += FIM_IRAM_LOW_BASE;

   // Read code from FIM instruction memory
   for (addr = 0; addr < 1024; addr++, ptr++) {
      *ptr = RdPortI(fim_low + addr);
      *ptr |= RdPortI(fim_hi + addr) << 8;
   }
   // Compute CRC calculation and insert into header
   *ptr = getfarcrc((__far char *)(code + 2), 2048, 0xFFFF);
}


/*** BeginHeader fim_file_load */
int fim_file_load(int fim_num, FATfile *handle);

/* START FUNCTION DESCRIPTION ********************************************
fim_file_load                 <FIMprog.LIB>

SYNTAX: int fim_file_load(int fim_num, FATfile *handle)

DESCRIPTION:  Loads and verifies the program pointed to by handle into
              the appropriate FIM instruction memory.  Code file will
              be verified with embedded CRC check before being written
              to insure it has not been corrupted.

              Halts the specified FIM.

PARAMETER1:   FIM number (0 for FIM A, 1 for FIM B)
PARAMETER2:   File handle of the FAT file containing the FIM program to
              load.

RETURN VALUE:    0     on Success
              -EINVAL  Invalid parameter (fim_num not 0 or 1)
              -EBADF   Bad FIM code, failed embedded CRC check
              -EFAULT  Written but did not verify correct
                 OR	  File access errors returned from the FAT file
                       system.

END DESCRIPTION **********************************************************/

/*** EndHeader */

#ifndef __FAT16_LIB
 #fatal "You must #use FAT16.lib before the #use of FIMprog.lib"
#endif

_fim_nodebug int fim_file_load(int fim_num, FATfile *handle)
{
   char code[2054];
   int rc;

   if (handle == NULL || (fim_num != 0 && fim_num != 1)) {
      return -EINVAL;    // Return Invalid parameter error
   }

   rc = fat_Read(handle, code, sizeof(code));
   if (rc < 0) {
      return rc;
   }
   if (rc < 8) {
      return -EBADF;
   }
   return fim_program_load(fim_num, (__far int *)code);
}


/*** BeginHeader fim_file_verify */
int fim_file_verify(int fim_num, FATfile *handle);

/* START FUNCTION DESCRIPTION ********************************************
fim_file_verify                 <FIMprog.LIB>

SYNTAX: int fim_file_verify(int fim_num, FATfile *handle)

DESCRIPTION:  Verifies the program contained in the FAT file matches the
              appropriate FIM instruction memory.  Code will be verified
              with embedded CRC check before verification to insure it
              has not been corrupted.

              Halts the specified FIM.

PARAMETER1:   FIM number (0 for FIM A, 1 for FIM B)
PARAMETER2:   File handle of the FAT file containing the FIM program to
              load.

RETURN VALUE:    0     on Success
              -EINVAL  Invalid parameter (fim_num not 0 or 1)
              -EBADF   Bad FIM code, failed embedded CRC check
              -EFAULT  Written but did not verify correct
                 OR	  File access errors returned from the FAT file
                       system.

END DESCRIPTION **********************************************************/

/*** EndHeader */

#ifndef __FAT16_LIB
 #fatal "You must #use FAT16.lib before the #use of FIMprog.lib"
#endif

_fim_nodebug int fim_file_verify(int fim_num, FATfile *handle)
{
   char code[2054];
   int rc;

   if (handle == NULL || (fim_num != 0 && fim_num != 1)) {
      return -EINVAL;    // Return Invalid parameter error
   }

   rc = fat_Read(handle, code, sizeof(code));
   if (rc < 0) {
      return rc;
   }
   if (rc < 8) {
      return -EBADF;
   }
   return fim_program_verify(fim_num, (__far int *)code);
}


/*** BeginHeader */
#endif
/*** EndHeader */

