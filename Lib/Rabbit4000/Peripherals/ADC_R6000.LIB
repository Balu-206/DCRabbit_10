/*** BeginHeader */
#ifndef __ADC_R6000_LIB
#define __ADC_R6000_LIB
/*** EndHeader */

/* START LIBRARY DESCRIPTION *********************************************
ADC_R6000.LIB

DESCRIPTION:	Code for interfacing to Rabbit 6000 Multiplexed ADC.

	Currently, only the RCM6600W makes the ADC available on the edge
	connector.  ADC channels 0-3 are connected to edge pins PE0-PE3.
	Either analog or digital I/O is selected for any of these pins,
	since there is a multiplexer on the board which routes the edge
	pin to either the chip analog inputs or the chip digital I/Os
	(on parallel port E, as is always the case for other minicore
	boards).

	On the RCM6600W, the edge pins are in two groups which may be
	individually selected for analog or digital functionality.  PE0 and 1
	is one group, and PE2 and 3 form the other.

	PG1 (a chip signal which is not brought to the edge connector) is
	used to select the function for PE0/1, and PG2 selects for PE2/3.

	If PG1 is low (or high impedance) then PE0/1 are digital I/Os.  If
	PG1 is high, PE0/1 are analog inputs on ADC channels 0 and 1.
	If PG2 is low (or high impedance) then PE2/3 are digital I/Os.  If
	PG2 is high, PE2/3 are analog inputs on ADC channels 0 and 1.

	The use of the edge pins must be specified when calling
	anaInConfig() (cf.).


REVISION HISTORY:
	2009 Feb 05   wts	  Created library
	2011 May 27   SJH	  Updated for RCM6600W

END DESCRIPTION **********************************************************/

/*** BeginHeader */

#ifdef ADC8CHANNEL_DEBUG
   #define _analog_nodebug __debug
#else
   #define _analog_nodebug __nodebug
#endif

#use "idblock_api.lib"

// ADC defines
#if RCM6600W_SERIES
	#define MAXAIN   3        // Maximum Analog Input Channel number
#elif R6000TEST_SERIES
	#define MAXAIN   7        // Maximum Analog Input Channel number
#else
	#fatal "This board does not support Rabbit 6000 multiplexed analog"
#endif

#define ADCLR    0x0540   // ADC Data/Status LSB register
#define ADCMR    0x0541   // ADC Data/Status MSB register
#define ADCCSR   0x0543   // ADC Command/Status register
#define ADCCR    0x0544   // ADC Control register

#define ADC0LR   0x0550   // ADC Channel 0 LSB register
#define ADC0MR   0x0551   // ADC Channel 0 MSB register
#define ADC1LR   0x0552   // ADC Channel 1 LSB register
#define ADC1MR   0x0553   // ADC Channel 1 MSB register
#define ADC2LR   0x0554   // ADC Channel 2 LSB register
#define ADC2MR   0x0555   // ADC Channel 2 MSB register
#define ADC3LR   0x0556   // ADC Channel 3 LSB register
#define ADC3MR   0x0557   // ADC Channel 3 MSB register
#define ADC4LR   0x0558   // ADC Channel 4 LSB register
#define ADC4MR   0x0559   // ADC Channel 4 MSB register
#define ADC5LR   0x055A   // ADC Channel 5 LSB register
#define ADC5MR   0x055B   // ADC Channel 5 MSB register
#define ADC6LR   0x055C   // ADC Channel 6 LSB register
#define ADC6MR   0x055D   // ADC Channel 6 MSB register
#define ADC7LR   0x055E   // ADC Channel 7 LSB register
#define ADC7MR   0x055F   // ADC Channel 7 MSB register

// ADC Data/Status Register defines
#define ADC_DONE   0x01   // ADC Conversion Done mask
#define ADC_BUSY   0x02   // ADC Busy mask
#define ADC_DONE_BIT  0   // ADC Conversion Done bit position
#define ADC_BUSY_BIT  1   // ADC Busy bit position

// ADC Command/Status Register defines
#define ADC_START_BIT 0   // ADC Conversion Start bit position
#define ADC_START  0x01   // ADC Conversion Start bit

#define ADC_FLOAT  0x00   // ADC Floating Referrence
#define ADC_INT    0x04   // ADC Internal Referrence (0.1VDDA - 0.9VDDA)
#define ADC_EXT    0x08   // ADC External Referrence (XVRT - XVRB)
#define ADC_RAILS  0x0C   // ADC Internal Referrence (Rail to Rail)
#define ADC_REF_MASK  0x0C   // Bits used to select reference

#define ADC0SEL    0x00   // ADC Channel 0 select (Bits 4 - 6)
#define ADC1SEL    0x10   // ADC Channel 1 select (Bits 4 - 6)
#define ADC2SEL    0x20   // ADC Channel 2 select (Bits 4 - 6)
#define ADC3SEL    0x30   // ADC Channel 3 select (Bits 4 - 6)
#define ADC4SEL    0x40   // ADC Channel 4 select (Bits 4 - 6)
#define ADC5SEL    0x50   // ADC Channel 5 select (Bits 4 - 6)
#define ADC6SEL    0x60   // ADC Channel 6 select (Bits 4 - 6)
#define ADC7SEL    0x70   // ADC Channel 7 select (Bits 4 - 6)
#define ADC_SEL_MASK	0x70		// Bits used to select channel
#define ADC_SEL_SHIFT	4		// Shift amount for channel to get bitfield

#define ADC_CONT   0x80   // ADC Continuous Conversion Enable bit
#define ADC_NORMAL 0x00   // ADC Normal Mode


// ADC Control Register defines
#define ADC_POWER_BIT 2   // ADC Power Control bit position
#define ADC_IP1    0x01   // ADC Interrupt Priority 1
#define ADC_IP2    0x02   // ADC Interrupt Priority 2
#define ADC_IP3    0x03   // ADC Interrupt Priority 3
#define ADC_POWER  0x04   // ADC Power Enable bit
#define ADC_DIV2   0x00   // ADC Clock Divided by 2 (Bits 4 - 6)
#define ADC_DIV4   0x10   // ADC Clock Divided by 4
#define ADC_DIV8   0x20   // ADC Clock Divided by 8
#define ADC_DIV16  0x30   // ADC Clock Divided by 16
#define ADC_DIV32  0x40   // ADC Clock Divided by 32
#define ADC_DIV64  0x50   // ADC Clock Divided by 64
#define ADC_DIV128 0x60   // ADC Clock Divided by 128
#define ADC_DIV256 0x70   // ADC Clock Divided by 256
#define ADCCLK_D4  0x80   // ADC Clocks from Port D4 instead of Peripheral clock

#define ADTIMEOUT  -4096

// ADC/DAC when wifi is disabled
#define A0ILR 	0x0800  	// Analog Channel 0 I LSB Register
#define A0IMR 	0x0801 	// Analog Channel 0 I MSB Register
#define A0QLR 	0x0802 	// Analog Channel 0 Q LSB Register
#define A0QMR 	0x0803 	// Analog Channel 0 Q MSB Register
#define A0CR 	0x0804  	// Analog Channel 0 Control Register
#define A1ILR 	0x0810 	// Analog Channel 1 I LSB Register
#define A1IMR 	0x0811 	// Analog Channel 1 I MSB Register
#define A1QLR 	0x0812 	// Analog Channel 1 Q LSB Register
#define A1QMR 	0x0813 	// Analog Channel 1 Q MSB Register
#define A1CR 	0x0814  	// Analog Channel 1 Control Register
#define A2LR 	0x0820  	// Analog Channel 2 LSB Register
#define A2MR 	0x0821  	// Analog Channel 2 MSB Register
#define A2CR 	0x0824  	// Analog Channel 2 Control Register

/*** EndHeader */




/*** BeginHeader _adcCalib */
#define ADCHANNELS (MAXAIN+1)

#ifndef ZWORLD_RESERVED_SIZE
#define ZWORLD_RESERVED_SIZE 0x0400
#endif

#if ZWORLD_RESERVED_SIZE == 0
#undef ZWORLD_RESERVED_SIZE
#define ZWORLD_RESERVED_SIZE 0x0400
#endif

// offset into user block for calibration data
#define ADC_CALIB_ADDR		(4096 * GetIDBlockSize() - ZWORLD_RESERVED_SIZE)
extern float _adcCalib[ADCHANNELS][2];

/*** EndHeader */

// Array for ADC calibration constants
float _adcCalib[ADCHANNELS][2];


/*** BeginHeader anaInCalib */
int anaInCalib(int, int, float, int, float);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
anaInCalib						<BL20XX.LIB>

SYNTAX:			void anaInCalib(int channel, int value1, float volts1,
							int value2, float volts2)

DESCRIPTION:	Calibrates the response of the ADC channel desired as a
               linear function using the two conversion points provided.
               Gain and offset constants are calculated and placed into
               global table _adcInCalib.

PARAMETER1:		The ADC input channel 0 - 10.
PARAMETER2:		The first ADC value.
PARAMETER3:		The voltage/current corresponding to the first ADC value.
PARAMETER4:		The second ADC value.
PARAMETER5:		The voltage/current corresponding to the second ADC value.

RETURN VALUE:	0, if sucessful.
					-1, if not able to make calibration constants.

SEE ALSO:		anaIn, anaInVolts, brdInit

END DESCRIPTION **********************************************************/

_analog_nodebug
int anaInCalib(int channel, int value1, float volts1,
									 int value2, float volts2)
{
	auto float gain, offset;

	if( (volts1 == volts2) || (value1 == value2) ) return -1;

	offset = (volts2*value1 - volts1*value2)/(volts2-volts1);
	if (offset == value1)
		gain = volts2/(offset-value2);
	else
		gain = volts1/(offset-value1);

	_adcCalib[channel][0] = gain;
	_adcCalib[channel][1] = offset;

	return 0;
}

/*** BeginHeader  _adc_HandleIR */
__root __interrupt void _adc_HandleIR();
/*** EndHeader */
_analog_nodebug
__root __interrupt void _adc_HandleIR()
{
#asm
     push  af
     push  hl
ioi  ld	  a,(ADCLR)
     and   0xF0
     ld    l,a
ioi  ld    a,(ADCMR)
     ld    h,a
     rr    hl
     rr    hl
     rr    hl
     rr    hl
     ld 	  (ADCvalue), hl
     ld	  hl,0xFFFF
     ld	  (ADCconversion),hl
     pop   hl
     pop   af
#endasm
}


/*** BeginHeader anaInConfig, ADCCSRShadow, ADCCRShadow, __adcinitflag,
ADCvalue, ADCconversion, ADCinterrupt */
void anaInConfig(int divisor, int ext_clk, int ref, int isp, unsigned mode);

extern char ADCCSRShadow;
extern char ADCCRShadow;
extern int __adcinitflag;
extern int ADCvalue;
extern int ADCmode;
extern int ADCconversion;
extern int ADCinterrupt;

#define ADC_ON_DEMAND	0x0000
#define ADC_CONTINUOUS	0x0001

#define ADC_USE_PE01		0x0300
#define ADC_USE_PE23		0xC000

/*** EndHeader */

// ADC Command and Control Shadow Registers
char ADCCSRShadow;       // ADC Command/Status Shadow Register
char ADCCRShadow;        // ADC Control Shadow Register
int __adcinitflag;		 // ADC initilization flag
int ADCvalue;
int ADCmode;
int ADCconversion;
int ADCinterrupt;


/* START FUNCTION DESCRIPTION ********************************************
anaInConfig					<ADC_R6000.LIB >

SYNTAX:	void anaInConfig(int divisor, int ext_clk, int ref,
                             int isp, unsigned mode)

DESCRIPTION:	Use this function to configure the Rabbit 6000 ADC system.
               This function sets up the ADC clock, referrence and
               interrupt priority.  It also powers up the ADC system.
               Will exit with runtime error ERR_BADPARAMETER if invalid
               parameter is given.

PARAMETER1:  Clock Divisor: ADC_DIV2 thru ADC_DIV256.  The ADC conversion
				 clock must be 1-15MHz.  If the CPU peripheral clock is running
				 at 150MHz, then the divider should be 16 or more.
				 Assuming 16, then a conversion (which takes 15 clocks)
				 will be available every 1600ns, and thus the complete cycle
				 for all 8 hardware channels will be 12.8usec.

             NOTE: current products only route 4 analog inputs to
             the board edge connector, however in automatic conversion
             mode the chip cycles through all 8 hardware channels.

PARAMETER2:	 Clock Source: 0 for internal peripheral clock
                           non-zero for external clock on Port D.4

PARAMETER3:  Voltage Referrence:
               ADC_FLOAT for ADC Floating Referrence
               ADC_INT   for ADC Internal Referrence (0.1VDDA - 0.9VDDA)
               ADC_EXT   for ADC External Referrence (XVRT - XVRB)
               ADC_RAILS for ADC Internal Referrence (Rail to Rail)

PARAMETER4:  Interrupt Service Priority (0-3, 0 = No Interrupts)

PARAMETER5:	Operation mode: Values ORed together from the following
				selection:
	         1. Conversion strategy (mutually exclusive):
		         ADC_ON_DEMAND
	         		program selects, and waits for, conversion each time.
	         	ADC_CONTINUOUS
	         		automatic continuous cyclic conversion of all
	               channels.  If this is set, don't call
	               anaInStartConverion().  Just call anaIn() and the
	               most recent conversion result for that channel will
	               be returned.  This is probably the fastest and most
	               convenient mode for most applications.  Even faster,
	               just do a 16-bit I/O read from the appropriate
	               hardware register (ADCnLR, ADCnHR) and ignore the
	               4 LSBs of the result. E.g. to read channel 5,
	                #asm
	                ld   jkhl,0
	                ioi ld hl,(ADC5LR) ; reads all 16 bits
	                srl  4,jkhl      ; HL now has 12 bit *raw* reading
	               Of course, you can also call anaInVolts() to get a
	               scaled reading.
	         2. Board configuration (one or more):
	         	For the RCM6600W series...
					ADC_USE_PE01
						Select PE0 and PE1 (on edge connector) as analog
						channels 0 and 1 respectively.  This precludes use
						of PE0 and PE1 as digital I/Os.
					ADC_USE_PE23
						Select PE2 and PE3 (on edge connector) as analog
						channels 2 and 3 respectively.  This precludes use
						of PE0 and PE1 as digital I/Os.
					If not selected for analog input, the edge pins have
					their normal use as digital I/Os, and analog readings
					will be random.

SEE ALSO:	 anaInDriver, anaIn

END DESCRIPTION **********************************************************/

_analog_nodebug
void anaInConfig(int divisor, int ext_clk, int ref, int isp, unsigned mode)
{

	char test;

	#GLOBAL_INIT {__adcinitflag = FALSE;}

	// Check for invalid parameters
	if ((divisor & (~ADC_DIV256)) || (ref & (~ADC_REF_MASK)) || (isp & (~0x03)))
   {
_badparm:
		exception(ERR_BADPARAMETER);
		exit(ERR_BADPARAMETER);
	}

   // Set initialization flag once
	if (__adcinitflag==FALSE) {
   	__adcinitflag=TRUE;
	}

#if RCM6600W_SERIES
	// PG1,2 digital outputs (mux selector)
	WrPortI(PGDDR, &PGDDRShadow, PGDDRShadow | 0x06);
	WrPortI(PGFR, &PGFRShadow, PGFRShadow & ~0x06);

	if ((mode & ADC_USE_PE01) == ADC_USE_PE01)
		WrPortI(PGDR, &PGDRShadow, PGDRShadow | 0x02);
	else if (!(mode & ADC_USE_PE01))
		WrPortI(PGDR, &PGDRShadow, PGDRShadow & ~0x02);
	else
		goto _badparm;
	if ((mode & ADC_USE_PE23) == ADC_USE_PE23)
		WrPortI(PGDR, &PGDRShadow, PGDRShadow | 0x04);
	else if (!(mode & ADC_USE_PE23))
		WrPortI(PGDR, &PGDRShadow, PGDRShadow & ~0x04);
	else
		goto _badparm;
#endif

   ADCinterrupt = isp;
   ADCmode = mode & ADC_CONTINUOUS;

   if(ADCinterrupt)
   {
   	// Initialize ADC interrupt vector
   	SetVectIntern(0x160/0x10, _adc_HandleIR);
   }

   // Initialize shadow registers
   ADCCSRShadow = 0;
   ADCCRShadow  = 0;
   ADCinterrupt = isp;

	// Configure ADC with given parameters and power up the ADC system.
   WrPortI(ADCCSR, &ADCCSRShadow, ref | (ADCmode ? ADC_CONT : 0));
	WrPortI(ADCCR, &ADCCRShadow, divisor | isp | ADC_POWER |
                  (ext_clk ? ADCCLK_D4 : 0));

	return;
}


/*** BeginHeader anaInStartConverion */
__root void anaInStartConverion(int channel);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
anaInDriver					<ADC_R6000.LIB >

SYNTAX:			void anaInStartConverion(int channel)

DESCRIPTION:   This function will start a ADC conversion on the channel
					selected, which will be handle by the ADC interrupt when
               end of conversion occurs.  Any automatic (continuous)
               conversion is halted.

					This function is non-reentrant

PARAMETER1:		A channel number (0 - MAXAIN)

RETURN VALUE:	None.

SEE ALSO:		anaInConfig, anaIn, anaInVolts

END DESCRIPTION **********************************************************/

_analog_nodebug
__root void anaInStartConverion(int channel)
{

	#GLOBAL_INIT {__adcinitflag = FALSE;}

	if (__adcinitflag == FALSE) {
		exception(ERR_INITNOTCALLED);
		exit(ERR_INITNOTCALLED);
	}
   ADCconversion = FALSE;

   // Select Channel for conversion and start
   WrPortI(ADCCSR, &ADCCSRShadow, (ADCCSRShadow & ADC_REF_MASK) | ADC_START |
            (channel << ADC_SEL_SHIFT));

}



/*** BeginHeader anaInDriver */
__root int anaInDriver(int channel);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
anaInDriver					<ADC_R6000.LIB >

SYNTAX:			int anaInDriver(int channel)

DESCRIPTION:	Reads the voltage of an analog input channel from the
					Rabbit 6000 internal ADC.  This function assumes that
               the A/D power and ADC oscillator have been enabled.
               See anaInConfig() for setup and anaSleep and anaWake
               for individual power down and power up controls.

					This function is non-reentrant

PARAMETER1:		A channel number (0 - MAXAIN)

RETURN VALUE:	A value corresponding to the voltage on the analog input
					channel, which will be:

			  0 to 4095 	for valid 12-bit conversions

	 ADTIMEOUT (-4095)	conversion incomplete, busy bit timeout
   ADOVERFLOW (-4096)   overflow or out of range

SEE ALSO:		anaInConfig, anaIn, anaInVolts

END DESCRIPTION **********************************************************/

_analog_nodebug
__root int anaInDriver(int channel)
{
   auto int val;
   auto int adc_regL, adc_regH;

	#GLOBAL_INIT {__adcinitflag = FALSE;}

	if (__adcinitflag == FALSE) {
		exception(ERR_INITNOTCALLED);
		exit(ERR_INITNOTCALLED);
	}

   if(channel >=0 && channel <= MAXAIN)
   {
   	if(ADCmode == ADC_ON_DEMAND)
   	{
      	// Select Channel for conversion
   		WrPortI(ADCCSR, &ADCCSRShadow, (ADCCSRShadow & ADC_REF_MASK) | ADC_START |
            (channel << ADC_SEL_SHIFT));

   		adc_regL = ADCLR;
      	adc_regH = ADCMR;
   	}
   	else
   	{  // Used for Continuous Mode (for internal use only!)
      	adc_regL = ADC0LR + (2 * channel);
      	adc_regH = ADC0MR + (2 * channel);
   	}
   }

#asm _analog_nodebug
.start:
     ld    bc,0x0400
.conv_loop:
     ld	  hl,(sp+@sp+adc_regL)
ioi  ld	  a,(hl)
     bit   0,a
     jr    nz,.conv_done
     dwjnz .conv_loop
     ld    hl,ADTIMEOUT
     jr    .done
.conv_done:
     and   0xF0
     ld    b,a
     ld	  hl,(sp+@sp+adc_regH)
ioi  ld    a,(hl)
     ld    h,a
     ld	  l,b
     rr    hl
     rr    hl
     rr    hl
     rr    hl
.done:
     ld 	  (sp+@sp+val), hl
#endasm

  	return val;
}


/*** BeginHeader anaIn */
int anaIn (int channel);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
anaIn							<ADC_R6000.LIB>

SYNTAX:	  int anaIn(int channel);

DESCRIPTION:	Reads the value of an analog input channel from the
					Rabbit 6000 A/D converter.

					This function is non-reentrant.

PARAMETER1:		A channel number 0 to MAXAIN.



RETURN VALUE:	A value corresponding to the voltage on the analog input
					channel, which will be:

			  		0 to 4095 	for valid reading


SEE ALSO:		anaInConfig, anaInDriver

END DESCRIPTION **********************************************************/

_analog_nodebug
int anaIn(int channel)
{
	auto unsigned char adc_cmd;
	auto int rdata;
   auto int i;
	auto long baud;

	#GLOBAL_INIT {__adcinitflag = FALSE;}

	if	(__adcinitflag == FALSE) {
		exception(ERR_INITNOTCALLED);
		exit(ERR_INITNOTCALLED);
	}

	if (channel < 0 || channel > MAXAIN ) {
		exception(ERR_BADPARAMETER);
		exit(ERR_BADPARAMETER);
	}

	if (ADCCSRShadow & ADC_CONT) {
		// Continuous conversions in progress.  Read direct.
		#asm
		ld		iy,(sp+@sp+channel)
		add	iy,iy
		ld		de,ADC0LR
		add	iy,de
		ld		jkhl,0
		ioi ld hl,(iy)
		srl	4,jkhl
		ld		(sp+@sp+rdata),hl
		#endasm
		return rdata;
	}

   if(ADCinterrupt)
   {
   	return ADCvalue;
   }
	return anaInDriver(channel);
}

/*** BeginHeader anaInVolts */
float anaInVolts(int channel);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
anaInVolts						<ADC_R6000.LIB>

SYNTAX:			float anaInVolts(int channel)

DESCRIPTION:	Reads the state of an analog input channel and uses
					the previously set calibration constants to convert
					it to volts.

PARAMETER1:		The ADC input channel 0 - MAXAIN.

RETURN VALUE:	A voltage value corresponding to the voltage on the
					analog input channel.

SEE ALSO:		anaIn, anaInCalib, brdInit

END DESCRIPTION **********************************************************/

_analog_nodebug
float anaInVolts(int channel)
 {
	auto unsigned int value;

   if(ADCinterrupt)
   {
     	value = ADCvalue;
   }
   else
   {
		value = anaIn(channel);
   }
   return (_adcCalib[channel][0] * (_adcCalib[channel][1] - value));
}




/*** BeginHeader anaInEERd */
int anaInEERd(int channel);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
anaInEERd					<ADC_R6000.LIB>

SYNTAX:			int anaInEERd(int channel);

DESCRIPTION:	Reads the calibration constants, gain and offset, from
               simulated eeprom in flash, located at the top 1K of the
               reserved UserBlock memory area. This function is non-
               reentrant.

               See the user manual for the size of the UserBlock area.

PARAMETER1:		The ADC input channel.

RETURN VALUE:	 0, If successful.
					-1, invalid address or range.

SEE ALSO:		anaInEEWr, brdInit

END DESCRIPTION **********************************************************/
_analog_nodebug
int anaInEERd(int channel)
{
	auto int	status;
	auto unsigned int offset;

	//	Calculate the offset into the user block of where the calibration
	// constants are stored for a given A/D channel.
	offset = ADC_CALIB_ADDR + (((char*)&_adcCalib[channel][0] -
    			(char *)_adcCalib)*4);

	// read calibration constants from flash
	status = readUserBlock( _adcCalib[channel], offset,
									sizeof(_adcCalib[0][0])*2);
	return(status);
}

/*** BeginHeader anaInEEWr */
int anaInEEWr(int channel);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
anaInEEWr					<ADC_R6000.LIB>

SYNTAX:			int anaInEEWr(int channel);

DESCRIPTION:	Writes the calibration constants, gain and offset, to
               simulated eeprom in flash, located at the top 1K of the
               reserved UserBlock memory area. This function is non-
               reentrant.

               See the user manual for the size of the UserBlock area.

PARAMETER1:		The ADC input channel.

RETURN VALUE:	 0, successful write to simulated eeprom.
					-1, invalid address or range.


SEE ALSO:		anaInEERd,  brdInit

END DESCRIPTION **********************************************************/

_analog_nodebug
int anaInEEWr(int channel)
{
	auto int	status;
	auto unsigned int offset;

	// Calculate the offset into the user block of where the calibration
	// constants are stored for a given A/D channel.
	offset = ADC_CALIB_ADDR + (((char*)&_adcCalib[channel][0] -
   			(char *)_adcCalib)*4);

	// write calibration constants to flash
	status = writeUserBlock(offset, &_adcCalib[channel][0],
								   sizeof(_adcCalib[0][0])*2);
	return(status);
}




/*** BeginHeader */
#endif
/*** EndHeader */