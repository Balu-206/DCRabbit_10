/*************************************************************************
ExternIO.lib
Rabbit Semiconductor, 2006

External I/O API

This library was taken from R3000.LIB.

*************************************************************************/

/*** BeginHeader */
#ifndef __EXTIO_LIB__
#define __EXTIO_LIB__
/*** EndHeader */


/*** BeginHeader enableIObus */
__root void enableIObus();

extern char savePADRShadow;
extern char savePBDRShadow;
extern char saveSPCRShadow;

/*** EndHeader */

char savePADRShadow;
char savePBDRShadow;
char saveSPCRShadow;

/* START FUNCTION DESCRIPTION ********************************************
enableIObus						<EXTERNIO.LIB>

SYNTAX:			void enableIObus();

DESCRIPTION:	This function enables 8-bit external I/O bus operation.

					The external I/O bus must be enabled during any external
					I/O bus operation and disabled during normal bus operations
					with other other devices.

					Parallel Port A becomes I/O data bus and Parallel Port B
					bits 7-2 becomes I/O address bus.

					This function is non-reentrant.

					>> Revised 23-SEP-02
					Port A and B data shadow register values are NOT saved or
					restored in this function call.

					If the macro PORTA_AUX_IO has been previously defined, this
					function should not be called.

PARAMETER:    	None

RETURN VALUE:	None

SEE ALSO: 		disableIObus

END DESCRIPTION **********************************************************/

#asm __nodebug
enableIObus::
		ld		a, (SPCRShadow)		; get slave port control values
		and	0x0C						; check if already enabled
		cp		0x0C
		jr		eq, .done

		push	ip
		ipset	1							; disable normal interrupts to prevent race

		ld		a, (SPCRShadow)		; get slave port control values
		and	0x83						; disable external I/O bus
											; 6:5 = 00 (bits ignored, should be written 0)
											; 4:2 = 000 (port A is byte wide input)
   	or		a, 0x0C					; enable external I/O bus
   										; 4:2 = 011 (8-bit ext I/O, B[7:2] are address)
ioi	ld		(SPCR), a				; Port A is data bus and Port B bits 7-2 is
   										; address bus while bits 0 and 1 stay inputs
		ld		(SPCRShadow), a		; save slave port control values
		pop	ip

.done:
		ret
#endasm

/*** BeginHeader disableIObus */
__root void disableIObus();
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
disableIObus						<EXTERNIO.LIB>

SYNTAX:			void disableIObus();

DESCRIPTION:	This function disables external I/O bus and normal data
					bus operations resume.

					The external I/O bus must be disabled during normal bus
					operations with other other devices and must be enabled
					during any external I/O bus operation.

					This function is non-reentrant.

					>> Revised 23-SEP-02
					Port A and B data shadow register values are NOT saved or
					restored in this function call.

			 		Parallel Port A is set to a bytewide input and Parallel Port
			 		B data direction register (PBDDR) is set to an unknown state,
			 		which must be set by the user.

PARAMETER:    	None

RETURN VALUE:	None

SEE ALSO: 		enableIObus

END DESCRIPTION **********************************************************/

#asm __nodebug
disableIObus::
		; only modify SPCR if [4:2] are 011 or 111 (8-bit external I/O)
		ld		a, (SPCRShadow)		; get slave port control values
		and	0x0C						; check that it is currently enabled
		cp		0x0C						; matches both 011 and 111 (SPCR[4:2])
		jr		neq, .done

		push	ip
		ipset	1							; disable normal interrupts to prevent race

		ld		a, (SPCRShadow)		; get slave port control values
		and	0x83						; disable external I/O bus
											; 6:5 = 00 (bits ignored, should be written 0)
											; 4:2 = 000 (port A is byte wide input)
ioi	ld		(SPCR), a				; Port A is input and Port B is
   										;  unknown data direction
		ld		(SPCRShadow), a		; save slave port control values

		pop	ip
.done:
		ret
#endasm


/*** BeginHeader */
#endif
/*** EndHeader */