/*************************************************************************
PWM.lib
Rabbit Semiconductor, 2006

API functions for some of the Rabbit peripherals
Pulse Width Modulation:
	pwm_init
	pwm_set

This library was taken from R3000.lib and updated for the 4000.

*************************************************************************/

/*** BeginHeader */
#ifndef __PWM_LIB__
#define __PWM_LIB__
/*** EndHeader */

/*** BeginHeader pwm_init */
__nodebug unsigned long pwm_init(unsigned long frequency);

/*
pwm_init (below) uses the BIOS variable 'freq_divider' to determine how
fast the processor is running. freq_divider is equal to the value that
would be placed in a baud timer for a serial port for 19200 baud operation.
Since the baud clock is 16 counts per bit and there are 1024 counts in a
PWM cycle, a base frequency corresponding to a 0 value in the PWM prescale
timer(TA9) can be calculated:
19200*16/1024 = 300
*/

#ifndef PWM_FREQ_FACTOR
#define PWM_FREQ_FACTOR 300
#endif

/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
pwm_init                   <PWM.LIB>

SYNTAX:		   unsigned long pwm_init(unsigned long frequency);

DESCRIPTION:   Sets the base frequency for the PWM pulses and enables the
					PWM driver on all four channels. The base frequency is the
					frequency without pulse spreading.
					Pulse spreading(see pwm_set) will increase the frequency
					by a factor of 4.

PARAMETER1:		frequency(in Hz)

RETURN VALUE:	actual frequency set. This will be the closest possible
					match to the requested frequency.

END DESCRIPTION **********************************************************/

__nodebug unsigned long pwm_init(unsigned long frequency)
{
	auto long divisor;
	auto unsigned long base_frequency;

	base_frequency = (long)freq_divider * (long)PWM_FREQ_FACTOR;
	divisor = base_frequency/frequency - 1;
	if(divisor < 0)
	{
		divisor = 0;
	}
	else if(divisor > 255)
	{
		divisor = 255;
	}
	WrPortI(TAT9R, &TAT9RShadow, (char)divisor);
	if(divisor > 0)
	{
		return base_frequency/(divisor+1);
	}
	else
	{
		return base_frequency;
	}
}

/*** BeginHeader pwm_set */
__nodebug int pwm_set(int channel, int duty_cycle, int options);

// The following are the available option flags:
#define PWM_SPREAD     0x0001
#define PWM_OPENDRAIN  0x0002
// Output selection.
#define PWM_USEPORTC   0x0010
#define PWM_USEPORTD   0x0020
#define PWM_USEPORTE   0x0040
// Suppress PWM output on this channel.
#define PWM_OUTNORMAL  0 << 8 // (Default)
#define PWM_OUTEIGHTH  1 << 8 // Suppress 7/8ths
#define PWM_OUTQUARTER 2 << 8 // Suppress 3/4ths
#define PWM_OUTHALF    3 << 8 // Suppress 1/2
// Suppress PWM interrupts.
#define PWM_INTNORMAL  0 << 10 // (Default)
#define PWM_INTEIGHTH  1 << 10 // Suppress 7/8ths
#define PWM_INTQUARTER 2 << 10 // Suppress 3/4ths
#define PWM_INTHALF    3 << 10 // Suppress 1/2
// PWM Interrupt priority.
#define PWM_INTOFF     0 << 12 // (Default)
#define PWM_INTPRI1    1 << 12
#define PWM_INTPRI2    2 << 12
#define PWM_INTPRI3    3 << 12
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
pwm_set                   <PWM.LIB>

SYNTAX:		   int pwm_set(int channel, int duty_cycle, int options);

DESCRIPTION:   Sets a duty cycle for one of the PWM channels.
					The duty cycle can be a value from 0 to 1024, where
					0 is logic low the whole time, and 1024 is logic high
					the whole time. Option flags are used to enable
					features on an individual PWM channel.
					Bit masks for these are:
						PWM_SPREAD - sets pulse spreading. The duty cycle
							is spread over four seperate pulses to increase
							the pulse frequency.
						PWM_OPENDRAIN - sets the PWM output pin to be
							open-drain instead of a normal push-pull logic
							output.

               The following options require a Rabbit 3000A or higher.

                  PWM_OUTNORMAL, PWM_OUTEIGHTH, PWM_OUTQUARTER, PWM_OUTHALF -
                  	These flags are mutually exclusive and enable PWM
                     suppressed output.  PWM_OUTNORMAL designates normal output.
                  PWM_INTNORMAL, PWM_INTEIGHTH, PWM_INTQUARTER, PWM_INTHALF -
                  	These flags are mutually exclusive and enable PWM
                     suppressed interrupts.  PWM_INTNORMAL designates normal
                     interrupt frequency.
                  PWM_INTOFF, PWM_INTPRI1, PWM_INTPRI2, PWM_INTPRI3 -
                  	These flags designate the interrupt priority for _ALL_ the
                     PWM channels.  PWM_INTOFF disables the PWM interrupts.
                  	These flags are mutually exclusive.

					Note:
               ----
               If your board has a Rabbit 4000 microprocessor installed, the
               PWM outputs must be selected from parallel ports C, D and E.
               The options parameter now includes three new values:
               	PWM_USEPORTC - uses port C (pin 4-7 depending on channel)
                  	The alternate output register for port C will be setup
                     accordingly.
                  PWM_USEPORTD - uses port D (pin 4-7 depending on channel)
                  	The alternate output register for port D will be setup
                     accordingly.
                  PWM_USEPORTE - uses port E (pin 4-7 depending on channel)
                  	The alternate output register for port E will be setup
                     accordingly.

					If none of the above are set, the function returns an error code.

               Warning:
               -------
               PWM_USEPORTC combined with PWM channels 2 or 3 interfere with
               serial port A and program debugging.

PARAMETER1:		channel - PWM channel(0 to 3)
PARAMETER2:		duty_cycle -
						if PWM_SPREAD is not set, this is a value from 0 to 1024
                  if PWM_SPREAD is set, this is divided into 2 bits and 10 bits
                  	LSB: where n/4 = the 8 MSB
                     00   n/4+1 n/4   n/4   n/4
                     01   n/4+1 n/4   n/4+1 n/4
                     10   n/4+1 n/4+1 n/4+1 n/4
                     11   n/4+1 n/4+1 n/4+1 n/4+1
                     MSB: 8 bit value from 0 to 256

                  For example:
                  	With the spread off, a duty_cycle of 200 would produce a
                     pulse of 200 followed by a low of 824.
                     With spread on, if we wanted to divide this pulse up into
                     four pulses of 50, we would use 200.  The pwm_set function
                     subtracts 1 from duty_cycle to produce the expected value:
                        198: (49 << 2) | 2 = 50, 50, 50, 49
                     -> 199: (49 << 2) | 3 = 50, 50, 50, 50 <-
                     	200: (50 << 2) | 0 = 51, 50, 50, 50
                        201: (50 << 2) | 1 = 51, 50, 51, 50

PARAMETER3:		options - combination of optional flags(see above)

RETURN VALUE:	0 if ok
					-1 if an invalid channel number is used
					-2 if an invalid duty_cycle was requested
               -3 if no parallel port was selected (4000 only)

END DESCRIPTION **********************************************************/

__nodebug int pwm_set(int channel, int duty_cycle, int options)
{
	char bitmask, lsb_reg, msb_reg;
   char options_intPri, options_intSup, options_outSup;

	if(channel < 0 || channel > 3)
		return -1;
	if(duty_cycle < 0 || duty_cycle > 1024)
		return -2;

   bitmask = 0x10 << channel;
	switch(options & (PWM_USEPORTC | PWM_USEPORTD | PWM_USEPORTE)) {
   	case PWM_USEPORTC:
			WrPortI(PCDDR, &PCDDRShadow, PCDDRShadow | bitmask);
			WrPortI(PCAHR, &PCAHRShadow, (PCAHRShadow & ~(1 << (channel * 2))) |
         	(2 << (channel * 2)));
         WrPortI(PCFR,  &PCFRShadow, (duty_cycle == 0) ?
         	PCFRShadow & ~bitmask : PCFRShadow | bitmask);
         WrPortI(PCDR,  &PCDRShadow, (duty_cycle == 0) ?
         	PCDRShadow & ~bitmask : PCDRShadow);
         WrPortI(PCDCR, &PCDCRShadow, (options & PWM_OPENDRAIN) ?
         	PCDCRShadow | bitmask : PCDCRShadow & ~bitmask);
      break;
   	case PWM_USEPORTD:
			WrPortI(PDDDR, &PDDDRShadow, PDDDRShadow | bitmask);
			WrPortI(PDAHR, &PDAHRShadow, (PDAHRShadow & ~(1 << (channel * 2))) |
         	(2 << (channel * 2)));
         WrPortI(PDFR,  &PDFRShadow, (duty_cycle == 0) ?
         	PDFRShadow & ~bitmask : PDFRShadow | bitmask);
         WrPortI(PDDR,  &PDDRShadow, (duty_cycle == 0) ?
         	PDDRShadow & ~bitmask : PDDRShadow);
         WrPortI(PDDCR, &PDDCRShadow, (options & PWM_OPENDRAIN) ?
         	PDDCRShadow | bitmask : PDDCRShadow & ~bitmask);
      break;
   	case PWM_USEPORTE:
			WrPortI(PEDDR, &PEDDRShadow, PEDDRShadow | bitmask);
			WrPortI(PEAHR, &PEAHRShadow, (PEAHRShadow & ~(1 << (channel * 2))) |
         	(2 << (channel * 2)));
         WrPortI(PEFR,  &PEFRShadow, (duty_cycle == 0) ?
         	PEFRShadow & ~bitmask : PEFRShadow | bitmask);
         WrPortI(PEDR,  &PEDRShadow, (duty_cycle == 0) ?
         	PEDRShadow & ~bitmask : PEDRShadow);
         WrPortI(PEDCR, &PEDCRShadow, (options & PWM_OPENDRAIN) ?
         	PEDCRShadow | bitmask : PEDCRShadow & ~bitmask);
      break;
      default:
      	// no port selected.
         return -3;
   }

   if(duty_cycle)
   	duty_cycle--;  //counts are n+1
   lsb_reg = (char)(duty_cycle << 6); //shift for setting
   msb_reg = (char)(duty_cycle >> 2);
   lsb_reg |= (options & PWM_SPREAD) ? 1 : 0;

   options_outSup = (0x03 & (options >> 8)) << 4;
   options_intSup = (0x03 & (options >> 10)) << 1;
   options_intPri = (0x03 & (options >> 12)) << 1;

	if(options_intPri && channel != 0)
	  	WrPortI(PWL0R, &PWL0RShadow, PWL0RShadow | options_intPri);
	if(options_intSup && channel != 1)
	   WrPortI(PWL1R, &PWL1RShadow, PWL1RShadow | options_intSup);

	switch(channel) {
   	case 0:
	   	WrPortI(PWL0R, &PWL0RShadow, lsb_reg | options_outSup | options_intPri);
   		WrPortI(PWM0R, &PWM0RShadow, msb_reg);
      break;
      case 1:
	   	WrPortI(PWL1R, &PWL1RShadow, lsb_reg | options_outSup | options_intSup);
   		WrPortI(PWM1R, &PWM1RShadow, msb_reg);
      break;
      case 2:
	   	WrPortI(PWL2R, &PWL2RShadow, lsb_reg | options_outSup);
   		WrPortI(PWM2R, &PWM2RShadow, msb_reg);
      break;
      case 3:
	   	WrPortI(PWL3R, &PWL3RShadow, lsb_reg | options_outSup);
   		WrPortI(PWM3R, &PWM3RShadow, msb_reg);
      break;
      default:
      	// invalid channel number.. shouldn't get here.
      	return -1;
   }

	return 0;
}

/*** BeginHeader */
#endif
/*** EndHeader */