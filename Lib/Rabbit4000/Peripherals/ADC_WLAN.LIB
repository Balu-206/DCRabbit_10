/*** BeginHeader */
#ifndef __ADC_WLAN_LIB
#define __ADC_WLAN_LIB
/*** EndHeader */

/* START LIBRARY DESCRIPTION *********************************************
ADC_R6000.LIB

DESCRIPTION:	Code for interfacing to Rabbit 6000 Internal ADC.


REVISION HISTORY:
05-Feb-2009 wts	Created library

END DESCRIPTION **********************************************************/

/*** BeginHeader */

#ifdef ADC_WLAN_DEBUG
   #define _aio_nodebug __debug
#else
   #define _aio_nodebug __nodebug
#endif

#use "idblock_api.lib"

// ADC defines
#define MAXAIN   3        // Maximum Analog Input Channel number

// ADC Data/Status Register defines
#define AIO_DONE   0x01   // ADC Conversion Done mask
#define AIO_BUSY   0x02   // ADC Busy mask
#define AIO_DONE_BIT  0   // ADC Conversion Done bit position
#define AIO_BUSY_BIT  1   // ADC Busy bit position

// ADC Command/Status Register defines
#define AIO_START_BIT 0   // ADC Conversion Start bit position
#define AIO_START  0x01   // ADC Conversion Start bit
#define AIO_FLOAT  0x00   // ADC Floating Referrence (Bits 2 - 3)
#define AIO_INT    0x04   // ADC Internal Referrence (0.1VDDA - 0.9VDDA)
#define AIO_EXT    0x08   // ADC External Referrence (XVRT - XVRB)
#define AIO_RAILS  0x0C   // ADC Internal Referrence (Rail to Rail)
#define AIO0SEL    0x00   // ADC Channel 0 select (Bits 4 - 6)
#define AIO1SEL    0x10   // ADC Channel 1 select (Bits 4 - 6)
#define AIO2SEL    0x20   // ADC Channel 2 select (Bits 4 - 6)
#define AIO3SEL    0x30   // ADC Channel 3 select (Bits 4 - 6)
#define AIO4SEL    0x40   // ADC Channel 4 select (Bits 4 - 6)
#define AIO5SEL    0x50   // ADC Channel 5 select (Bits 4 - 6)
#define AIO6SEL    0x60   // ADC Channel 6 select (Bits 4 - 6)
#define AIO7SEL    0x70   // ADC Channel 7 select (Bits 4 - 6)
#define AIO_CONT   0x80   // ADC Continuous Conversion Enable bit
#define AIO_NORMAL 0x00   // ADC Normal Mode

#define AIO_FAST	 0
#define AIO_SLOW	 1


// ADC Control Register defines
#define AIO_POWER_BIT 2   // ADC Power Control bit position
#define AIO_POWER  0x04   // ADC Power Enable bit
#define AIO_DIV2   0x00   // ADC Clock Divided by 2 (Bits 4 - 6)
#define AIO_DIV4   0x10   // ADC Clock Divided by 4
#define AIO_DIV8   0x20   // ADC Clock Divided by 8
#define AIO_DIV16  0x30   // ADC Clock Divided by 16
#define AIO_DIV32  0x40   // ADC Clock Divided by 32
#define AIO_DIV64  0x50   // ADC Clock Divided by 64
#define AIO_DIV128 0x60   // ADC Clock Divided by 128
#define AIO_DIV256 0x70   // ADC Clock Divided by 256
#define AIOCLK_EXT 0x80   // ADC Clock from external port pin
#define AIOCLK_INT 0x00   // ADC uses Peripheral clock


#define ADTIMEOUT  -4096

// ADC/DAC when wifi is disabled
#define A0ILR 	0x0800  	// Analog Channel 0 I LSB Register
#define A0IMR 	0x0801 	// Analog Channel 0 I MSB Register
#define A0QLR 	0x0802 	// Analog Channel 0 Q LSB Register
#define A0QMR 	0x0803 	// Analog Channel 0 Q MSB Register
#define A0CR 	0x0804  	// Analog Channel 0 Control Register
#define A1ILR 	0x0810 	// Analog Channel 1 I LSB Register
#define A1IMR 	0x0811 	// Analog Channel 1 I MSB Register
#define A1QLR 	0x0812 	// Analog Channel 1 Q LSB Register
#define A1QMR 	0x0813 	// Analog Channel 1 Q MSB Register
#define A1CR 	0x0814  	// Analog Channel 1 Control Register
#define A2LR 	0x0820  	// Analog Channel 2 LSB Register
#define A2MR 	0x0821  	// Analog Channel 2 MSB Register
#define A2CR 	0x0824  	// Analog Channel 2 Control Register

#define AIO_CONVERSION_DELAY 30

#define AIO_DIV2   0x00   // ADC Clock Divided by 2 (Bits 4 - 6)
#define AIO_DIV4   0x10   // ADC Clock Divided by 4
#define AIO_DIV8   0x20   // ADC Clock Divided by 8
#define AIO_DIV16  0x30   // ADC Clock Divided by 16
#define AIO_DIV32  0x40   // ADC Clock Divided by 32
#define AIO_DIV64  0x50   // ADC Clock Divided by 64
#define AIO_DIV128 0x60   // ADC Clock Divided by 128
#define AIO_DIV256 0x70   // ADC Clock Divided by 256
#define AIOCLK_D4  0x80   // ADC Clocks from Port D4 instead of Peripheral clock
#define AIO_PDOWN	 0x00
#define AIO_SLEEP	 0x01
#define AIO_ACTIVE 0x03
#define AIO_COMPL  0x00
#define AIO_BINARY 0x04

#define MAXDACCOUNT	1023
#define MINDACCOUNT	0


/*** EndHeader */


/*** Beginheader __dacinitflag, __adcinitflag */

extern int __adcinitflag;
extern int __dacinitflag;
/*** endheader */

// ADC Command and Control Shadow Registers
int __adcinitflag;		 // ADC initilization flag
int __dacinitflag;


/*** BeginHeader aio_msDelay */
void aio_msDelay(unsigned int delay);
/*** EndHeader */
_aio_nodebug
void aio_msDelay(unsigned int delay)
{
	auto unsigned long done_time;

	done_time = MS_TIMER + delay;
   while( (long) (MS_TIMER - done_time) < 0 );
}



/*** BeginHeader _aioWaitUS, _aioInitTimer */
__root void _aioWaitUS (word usec);
void _aioInitTimer (void);
/*** EndHeader */

word _aio_timerLoops;	// Loops for 16 usec delay

//
// Delay for usec microseconds (up to about 65ms)
//
#asm __root
_aioWaitUS::
	ld		de,hl
	ld		bc,(_aio_timerLoops)
	mulu
	ex		jk,hl
	ld		hl,bc
	srl	4,jkhl
	ld		bcde,-1
.loop:
	add	jkhl,bcde
	jr		c,.loop		; will always carry until 0 -> -1.
	ret
#endasm

//
// Calibrate the spin loop in _wifi_waitUS()
//
_aio_nodebug
void _aioInitTimer (void)
{
	auto uint32 time;

	// Initial guess
	_aio_timerLoops = 32;

	// Time 65ms delay using hardware timer
	time = MS_TIMER;
	_aioWaitUS (65000u);
	time = MS_TIMER - time;

	// Calculate loops for 65ms delay:
	// (initial guess)*(expected time)/(actual time)
	// Round up, since want to err on longer side.
	if (time != 0)
		_aio_timerLoops = (word)(32uL*65/time) + 1;

#ifdef ADC_VERBOSE
	DPRINTF ("\ntime=%lu ms, loops=%u\n", time, _aio_timerLoops);

	time = MS_TIMER;
	_aio_waitUS (65000u);
	time = MS_TIMER - time;

	DPRINTF ("time=%ld ms (should be 65-68)\n", time);
#endif
}

/*** BeginHeader _aio_dacCalib,_aio_adcCalib */
#define ADCHANNELS 3
#define DACHANNELS 2

#ifndef ZWORLD_RESERVED_SIZE
#define ZWORLD_RESERVED_SIZE 0x0400
#endif

#if ZWORLD_RESERVED_SIZE == 0
#undef ZWORLD_RESERVED_SIZE
#define ZWORLD_RESERVED_SIZE 0x0400
#endif

// offset into user block for calibration data
// This LIB reserves Caldata area for the 8 channel R6000 ADC

#define AIO_RESERVE_ANALOG   	(4096 * GetIDBlockSize() - ZWORLD_RESERVED_SIZE)
#define AIO_ADC_CALIB_ADDR		(AIO_RESERVE_ANALOG + 256)
#define AIO_DAC_CALIB_ADDR   	(AIO_ADC_CALIB_ADDR + sizeof(_aio_adcCalib))

extern float _aio_dacCalib[DACHANNELS][2];	 // [0]=gain,[1]=offset
extern float _aio_adcCalib[ADCHANNELS][2];

/*** EndHeader */

// Array for ADC calibration constants
float _aio_adcCalib[ADCHANNELS][2];
// Array for DAC calibration constants
float _aio_dacCalib[DACHANNELS][2];	 // [0]=gain,[1]=offset


/*** BeginHeader aioInCalib */
int aioInCalib(int, int, float, int, float);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
aioInCalib						<BL20XX.LIB>

SYNTAX:			void aioInCalib(int channel, int value1, float volts1,
							int value2, float volts2)

DESCRIPTION:	Calibrates the response of the ADC channel desired as a
               linear function using the two conversion points provided.
               Gain and offset constants are calculated and placed into
               global table _adcInCalib.

PARAMETER1:		The ADC input channel 0 - 2.
PARAMETER2:		The first ADC value.
PARAMETER3:		The voltage/current corresponding to the first ADC value.
PARAMETER4:		The second ADC value.
PARAMETER5:		The voltage/current corresponding to the second ADC value.

RETURN VALUE:	0, if sucessful.
					-1, if not able to make calibration constants.

SEE ALSO:		aioIn, aioInVolts, brdInit

END DESCRIPTION **********************************************************/

_aio_nodebug
int aioInCalib(int channel, int value1, float volts1,
									 int value2, float volts2)
{
	auto float gain, offset;

	if( (volts1 == volts2) || (value1 == value2) ) return -1;

	offset = (volts2*value1 - volts1*value2)/(volts2-volts1);
	if (offset == value1)
		gain = volts2/(offset-value2);
	else
		gain = volts1/(offset-value1);

	_aio_adcCalib[channel][0] = gain;
	_aio_adcCalib[channel][1] = offset;

	return 0;
}


/*** BeginHeader aioInConfig */
void aioInConfig(int adc_type, int divisor, int ext_clk, int mode);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
aioInConfig					<ADC_R6000.LIB >

SYNTAX:  void aioInConfig(int adc_type, int divisor, int ext_clk, int mode)

DESCRIPTION:  Use this function to configure the Rabbit 6000 ADC's thats
				  are available when the wifi sub-system is disabled.

PARAMETER1:  `Select ADC Type to be configured:
					AIO_FAST - Configures Fast ADC, which has 2 channels.
               AIO_SLOW - Configures Slow ADC, which has only a single channel.

PARAMETER2:  Clock Divisor: AIO_DIV2 thru AIO_DIV256

PARAMETER3:	 Clock Source: 0 for internal peripheral clock
               non-zero for external clock as follows:

              AIOCLK_INT   Internal peripheral clock
              AIOCLK_EXT   External Clock, Fast ADC uses port D.4, Slow ADC
                           uses port D.6

PARAMETER4:   Mode of Operation:

  	            AIO_ACTIVE  For enabling ADC for active reading
               AIO_SLEEP	For putting the ADC in sleep mode
               AIO_PDOWN	For powering down the ADC

               Note: AIO_PDOWN is not an option for the slow ADC.

SEE ALSO:	 aioInDriver, aioIn

END DESCRIPTION **********************************************************/
_aio_nodebug
void aioInConfig(int adc_type, int divisor, int ext_clk, int mode)
{
	#GLOBAL_INIT {__adcinitflag = FALSE;}

   // Set initialization flag once
	if (__adcinitflag==FALSE) {
   	__adcinitflag=TRUE;
	}

   // Initialize microsecond timer
   _aioInitTimer();

   if( adc_type == AIO_FAST)
   {
      if(mode == AIO_ACTIVE)
      	mode = 0x03;
      else if(AIO_SLEEP)
      	mode = 0x01;
      else
       	mode = 0x00;
      //Configure ADC with given parameters and power up the ADC system.
		WrPortI(A0CR, NULL, divisor | mode |
   	               (ext_clk ? AIOCLK_EXT : 0));
   }
   else
   {
   	if(mode == AIO_ACTIVE)
      	mode = 0x01;
      else
         mode = 0x00;
      //Configure ADC with given parameters and power up the ADC system.
		WrPortI(A2CR, NULL, divisor | mode |
   	               (ext_clk ? AIOCLK_EXT : 0));

   }

	return;
}


/*** BeginHeader aioInDriver */
__root int aioInDriver(int channel);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
aioInDriver					<ADC_R6000.LIB >

SYNTAX:			int aioInDriver(int channel)

DESCRIPTION:	Reads the voltage of an aiolog input channel from the
					Rabbit 6000 internal ADC.  This function assumes that
               the A/D power and ADC oscillator have been enabled.
               See aioInConfig() for setup and aioSleep and aioWake
               for individual power down and power up controls.

					This function is non-reentrant

PARAMETER1:		A channel number (0 - 2)
					 - Channels 0 and 1 accesses the FAST ADC
                - Channel  2 accesses the Slow ADC

RETURN VALUE:	A value corresponding to the voltage on the aiolog input
					channel, which will be:

       			For valid conversions
               ---------------------
                - FAST ADC returns 0 - 1023
                - SLOW ADC returns 0 - 2047

               Error Conditions
               ----------------
               ADTIMEOUT (-4095)	conversion incomplete, busy bit timeout
   				ADOVERFLOW (-4096)   overflow or out of range

SEE ALSO:		aioInConfig, aioIn, aioInVolts

END DESCRIPTION **********************************************************/

_aio_nodebug
__root int aioInDriver(int channel)
{
   auto int val;
   auto int adc_regL, adc_regH;

	#GLOBAL_INIT {__adcinitflag = FALSE;}

	if (__adcinitflag == FALSE) {
		exception(ERR_INITNOTCALLED);
		exit(ERR_INITNOTCALLED);
	}
	if(channel >= 0 && channel <= 1)
	{
   	if(channel == 0)
      {
   		adc_regL = A0ILR;
   		adc_regH = A0IMR;
      }
      else
      {
      	adc_regL = A0QLR;
   		adc_regH = A0QMR;
      }
		#asm _aio_nodebug
     	ld	  hl,(sp+@sp+adc_regL)
		ioi  ld a,(hl)
     	and   0xC0
     	ld    b,a
     	ld	  hl,(sp+@sp+adc_regH)
		ioi  ld a,(hl)
     	ld    h,a
     	ld	  	l,b
     	rr    hl
     	rr    hl
     	rr    hl
     	rr    hl
     	rr    hl
      rr		hl
     	ld 	(sp+@sp+val), hl
		#endasm
	}
	else
	{
   	// Start the conversion on the selected channel
		WrPortI(A2CR, NULL, (RdPortI(A2CR) | 0x04));

  		adc_regL = A2LR;
   	adc_regH = A2MR;

		#asm _aio_nodebug
		.start:
     	ld    bc,0x0400
		.conv_loop:
		ioi  ld	  a,(A2CR)
     	bit   3,a
     	jr    nz,.conv_done
     	dwjnz .conv_loop
     	ld    hl,ADTIMEOUT
     	jr    .done

		.conv_done:
     	ld	  hl,(sp+@sp+adc_regL)
		ioi  ld	  a,(hl)
     	and   0xE0
    	ld    b,a
     	ld	  hl,(sp+@sp+adc_regH)
		ioi  ld a,(hl)
     	ld    h,a
     	ld	   l,b
     	rr    hl
     	rr    hl
     	rr    hl
     	rr    hl
     	rr    hl
		.done:
     	ld 	  (sp+@sp+val), hl
		#endasm
	}
  	return val;
}


/*** BeginHeader aioIn */
int aioIn (int channel);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
aioIn							<ADC_R6000.LIB>

SYNTAX:	  int aioIn(int channel);

DESCRIPTION:	Reads the value of an aiolog input channel from the
					Rabbit 6000 A/D converter.

					First time call of after shutdown of the A/D converter
					will take approximately ? second to ensure the device
               capacitor is fully charged.

					This function is non-reentrant.

PARAMETER1:		A channel number (0 - 2)
					 - Channels 0 and 1 accesses the FAST ADC
                - Channel  2 accesses the Slow ADC

RETURN VALUE:	A value corresponding to the voltage on the aiolog input
					channel, which will be:

       			For valid conversions
               ---------------------
                - FAST ADC returns 0 - 1023
                - SLOW ADC returns 0 - 2047

               Error Conditions
               ----------------
               ADTIMEOUT (-4095)	conversion incomplete, busy bit timeout
   				ADOVERFLOW (-4096)   overflow or out of range

SEE ALSO:		aioInConfig, aioInDriver

END DESCRIPTION **********************************************************/

_aio_nodebug
int aioIn(int channel)
{
	#GLOBAL_INIT {__adcinitflag = FALSE;}

	if	(__adcinitflag == FALSE) {
		exception(ERR_INITNOTCALLED);
		exit(ERR_INITNOTCALLED);
	}
	if (channel < 0 || channel > MAXAIN ) {
		exception(ERR_BADPARAMETER);
		exit(ERR_BADPARAMETER);
	}
	return aioInDriver(channel);
}

/*** BeginHeader aioInVolts */
float aioInVolts(int channel);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
aioInVolts						<ADC_R6000.LIB>

SYNTAX:			float aioInVolts(int channel)

DESCRIPTION:	Reads the state of an aiolog input channel and uses
					the previously set calibration constants to convert
					it to volts.

PARAMETER1:    A channel number (0 - 2)
					 - Channels 0 and 1 accesses the FAST ADC
                - Channel  2 accesses the Slow ADC

RETURN VALUE:	A voltage value corresponding to the voltage on the
					aiolog input channel.

SEE ALSO:		aioIn, aioInCalib, brdInit

END DESCRIPTION **********************************************************/

_aio_nodebug
float aioInVolts(int channel)
 {
	auto unsigned int value;

	value = aioIn(channel);
   return (_aio_adcCalib[channel][0] * (_aio_adcCalib[channel][1] - value));
}


/*** BeginHeader aioOutConfig */
void aioOutConfig(int divisor, int ext_clk, int encoding, int mode);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
aioInConfig					<ADC_R6000.LIB >

SYNTAX:	void aioOutConfig(int divisor, int ext_clk, int encoding, int mode)

DESCRIPTION:	Use this function to configure the Rabbit 6000 ADC system.
               This function sets up the ADC clock, referrence and
               interrupt priority.  It also powers up the ADC system.
               Will exit with runtime error ERR_BADPARAMETER if invalid
               parameter is given.

PARAMETER1:  Clock Divisor: ADC_DIV2 thru ADC_DIV256

PARAMETER2:	 Clock Source: 0 for internal peripheral clock
                           non-zero for external clock on Port D.4

PARAMETER3:

PARAMETER4:

SEE ALSO:	 aioInDriver, aioIn

END DESCRIPTION **********************************************************/
_aio_nodebug
void aioOutConfig(int divisor, int ext_clk, int encoding, int mode)
{
	#GLOBAL_INIT {__dacinitflag = FALSE;}

   // Set initialization flag once
	if (__dacinitflag==FALSE) {
   	__dacinitflag=TRUE;
	}

   // Initialize microsecond timer
   _aioInitTimer();

	// Configure DAC with given parameters.
	WrPortI(A1CR, NULL, divisor | mode | encoding |
                  (ext_clk ? AIOCLK_D4 : 0));
	return;
}


/*** BeginHeader aioOutCalib */
int aioOutCalib(int channel, int value1, float volts1,
                             int value2, float volts2);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
aioOutCalib						<ADC_R6000.LIB>

SYNTAX:			int aioOutCalib(int channel, int value1, float volts1,
						             				  int value2, float volts2);

DESCRIPTION:	Calibrates the response of the DAC channel desired as a
               linear function using the two conversion points provided.
               Gain and offset constants are calculated and placed into
               global table _dacCalib.

PARAMETER1:		The DAC output channel 0 or 1.

PARAMETER2:		The first DAC value.

PARAMETER3:		The voltage (volts), corresponding to the first DAC value.
PARAMETER4:		The second DAC value.

PARAMETER5:		The voltage (volts), corresponding to the second DAC value.

RETURN VALUE:	0, if sucessful.
					-1, if not able to make calibration constants.

SEE ALSO:		aioOut, aioOutVolts, brdInit

END DESCRIPTION **********************************************************/

_aio_nodebug
int aioOutCalib(int channel, int value1, float volts1,
									  int value2, float volts2)
{
	auto float gain, offset;

	if( (volts1 == volts2) || (value1 == value2) ) return -1;

	offset = (volts2*value1 - volts1*value2)/(volts2-volts1);
	if (offset == value1)
		gain = volts2/(offset-value2);
	else
		gain = volts1/(offset-value1);

	_aio_dacCalib[channel][0] = gain;
	_aio_dacCalib[channel][1] = offset;

	return 0;
}

/*** BeginHeader aioOut */
int aioOut(int channel, unsigned int rawcount);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
aioOut						<ADC_R6000.LIB>

SYNTAX:			int aioOut(unsigned int channel, unsigned int rawcount)

DESCRIPTION:	Sets the voltage on a given aiolog output channel. This
               function is non-reentrant.

PARAMETER1:		The DAC output channel to write (0 - 3).
PARAMETER2:		A data value corresponding to the desired voltage on the
               aiolog output channel (0-4095).

RETURN VALUE:	0 if successful
					-1 if rawcount parameter is greater than 4095

SEE ALSO:		aioOutDriver, aioOutVolts, aioOutCalib

END DESCRIPTION **********************************************************/

_aio_nodebug
int aioOut(int channel, unsigned int rawcount)
{
	if (rawcount > MAXDACCOUNT)
	{
		return -1;
	}
   if(channel == 0)
   {
   	WrPortI(A1ILR, NULL, (char)(rawcount << 6));
      WrPortI(A1IMR, NULL, (char)(rawcount >> 2));
   }
   else
   {
   	WrPortI(A1QLR, NULL, (char)(rawcount << 6));
      WrPortI(A1QMR, NULL, (char)(rawcount >> 2));
   }
}

/*** BeginHeader aioOutVolts */
void aioOutVolts(int channel, float voltage);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
aioOutVolts						<ADC_R6000.LIB>

SYNTAX:			void aioOutVolts(int channel, float voltage)

DESCRIPTION:	Sets the voltage of an aiolog output channel by using the
					previously set calibration constants to calculate the
					correct data values.

PARAMETER1:		The DAC output channel 0 or 1.

PARAMETER2:		The voltage desired on the output channel.

RETURN VALUE:	None

SEE ALSO:		aioOut, aioOutCalib, brdInit

END DESCRIPTION **********************************************************/

_aio_nodebug
void aioOutVolts(int channel, float voltage)
{
	auto int rawdata;

	rawdata=(int)(_aio_dacCalib[channel][1]-(voltage / _aio_dacCalib[channel][0]));
	if(rawdata > MAXDACCOUNT || rawdata < MINDACCOUNT)
	{
		rawdata = (rawdata > MAXDACCOUNT) ? MAXDACCOUNT : 0;
	}
	aioOut(channel, rawdata);
}



/*** BeginHeader aioInEERd */
int aioInEERd(int channel);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
aioInEERd					<ADC_R6000.LIB>

SYNTAX:			int aioInEERd(int channel);

DESCRIPTION:	Reads the calibration constants, gain and offset, from
               simulated eeprom in flash, located at the top 1K of the
               reserved UserBlock memory area. This function is non-
               reentrant.

               See the user manual for the size of the UserBlock area.

PARAMETER1:		The ADC input channel.

RETURN VALUE:	 0, If successful.
					-1, invalid address or range.

SEE ALSO:		aioInEEWr, brdInit

END DESCRIPTION **********************************************************/
_aio_nodebug
int aioInEERd(int channel)
{
	auto int	status;
	auto unsigned int offset;

	//	Calculate the offset into the user block of where the calibration
	// constants are stored for a given A/D channel.
	offset = AIO_ADC_CALIB_ADDR + (((char*)&_aio_adcCalib[channel][0] -
    			(char *)_aio_adcCalib)*4);

	// read calibration constants from flash
	status = readUserBlock( _aio_adcCalib[channel], offset,
									sizeof(_aio_adcCalib[0][0])*2);
	return(status);
}

/*** BeginHeader aioInEEWr */
int aioInEEWr(int channel);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
aioInEEWr					<ADC_R6000.LIB>

SYNTAX:			int aioInEEWr(int channel);

DESCRIPTION:	Writes the calibration constants, gain and offset, to
               simulated eeprom in flash, located at the top 1K of the
               reserved UserBlock memory area. This function is non-
               reentrant.

               See the user manual for the size of the UserBlock area.

PARAMETER1:		The ADC input channel.

RETURN VALUE:	 0, successful write to simulated eeprom.
					-1, invalid address or range.


SEE ALSO:		aioInEERd,  brdInit

END DESCRIPTION **********************************************************/

_aio_nodebug
int aioInEEWr(int channel)
{
	auto int	status;
	auto unsigned int offset;

	// Calculate the offset into the user block of where the calibration
	// constants are stored for a given A/D channel.
	offset = AIO_ADC_CALIB_ADDR + (((char*)&_aio_adcCalib[channel][0] -
   			(char *)_aio_adcCalib)*4);

	// write calibration constants to flash
	status = writeUserBlock(offset, &_aio_adcCalib[channel][0],
								   sizeof(_aio_adcCalib[0][0])*2);
	return(status);
}

/*** BeginHeader aioOutEERd */
int aioOutEERd(int channel);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
aioOutEERd					<ADC_R6000.LIB>

SYNTAX:			int aioOutEERd(int channel);

DESCRIPTION:	Reads the calibration constants, gain and offset, from
               simulated eeprom in flash, located at the top 1K of the
               reserved UserBlock memory area. This function is non-
               reentrant.

               See the user manual for the size of the UserBlock area.

PARAMETER1:		The DAC output channel.

RETURN VALUE:	 0, If successful.
					-1, invalid address or range.

SEE ALSO:		aioOutEEWr, brdInit

END DESCRIPTION **********************************************************/

_aio_nodebug
int aioOutEERd(int channel)
{
	auto int	status;
	auto unsigned int offset;

	// Calculate the offset into the user block of where the calibration
	// constants are stored for a given DAC channel.
	offset = AIO_DAC_CALIB_ADDR + (((char*)&_aio_dacCalib[channel][0] -
   			(char*)_aio_dacCalib)*4);

	// read calibration constants from flash
	status = readUserBlock( _aio_dacCalib[channel], offset,
									sizeof(_aio_dacCalib[0][0])*2);
	return(status);
}


/*** BeginHeader aioOutEEWr */
int aioOutEEWr(int channel);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
aioOutEEWr					<ADC_R6000.LIB>
SYNTAX:			int aioOutEEWr(int channel);

DESCRIPTION:	Writes the calibration constants, gain and offset,  from
               simulated eeprom in flash, located at the top 1K of the
               reserved UserBlock memory area. This function is non-
               reentrant.

               See the user manual for the size of the UserBlock area.

PARAMETER1:		The D/A output channel (0 - 3) for which the calibration
               constants will be written.

RETURN VALUE:	 0, successful write to simulated eeprom.
					-1, invalid address or range.

SEE ALSO:		aioOutEERd, aioOutCalib, brdInit

END DESCRIPTION **********************************************************/

_aio_nodebug
int aioOutEEWr(int channel)
{
	auto int	status;
	auto unsigned int offset;

	// Calculate the offset into the user block of where the calibration
	// constants are stored for a given DAC channel.
	offset = AIO_DAC_CALIB_ADDR + (((char*)&_aio_dacCalib[channel][0] -
   			(char*)_aio_dacCalib)*4);

	// write calibration constants to flash
	status = writeUserBlock(offset, &_aio_dacCalib[channel][0],
	                        sizeof(_aio_dacCalib[0][0])*2);
	return(status);
}



/*** BeginHeader */
#endif
/*** EndHeader */