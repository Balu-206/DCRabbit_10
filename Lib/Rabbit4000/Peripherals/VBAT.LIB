/*** Beginheader */
#ifndef __VBAT_LIB
#define __VBAT_LIB
/*** Endheader */

/* START LIBRARY DESCRIPTION *********************************************
VBAT.LIB
Rabbit Semiconductor, 2006

DESCRIPTION:      This library is a set of API to write to and read from
                  the VBAT RAM used for Tamper Detection.  Tamper Detect
                  consists of any attempt to enter bootstrap mode, either
                  by changing the state of the SMODE pins or enabling
                  bootstrap in the SPCR while the SMODE pins are non-zero
                  (selecting a bootstrap mode). Reset does not affect the
                  battery-backed RAM unless the SMODE pins are non-zero
                  when exiting the reset state.

END DESCRIPTION **********************************************************/

/*** Beginheader root2vram */
int root2vram(const void *src, int start, int length);
/*** Endheader */

/* START FUNCTION DESCRIPTION ********************************************
root2vram						<VBAT.LIB>

syntax:				int root2vram(const void *src, int start, int length)

PARAMETER1:			The address to the data in root to be copied to vbat ram.

PARAMETER2:			The start location within the VBAT RAM (0-31).

PARAMETER3:			The length of data to write to VBAT RAM.  The length should
						be greater than 0.  length + start should not exceed 32.

DESCRIPTION:		This function copies data to the VBAT RAM. Tamper Detection
						on the Rabbit 4000 erases the VBAT RAM with any attempt to
						enter bootstrap mode.

SEE ALSO:			vram2root
END DESCRIPTION **********************************************************/

__nodebug int root2vram(const void *src, int start, int length)
{
	int ret_val = 0;
   #asm
   ld		hl, (sp+@sp+start)
   ex		de, hl               ; de = start
   ld		hl, (sp+@sp+length)
   ld		bc, hl					; bc = length (for ldir)
   add	jkhl, bcde				; hl = start + length
   cp		hl, 32
   jr		gt, .too_long			; if (start + length >= 32) jump

   ld		hl, VRAM00
   or		a
   add	hl, de					; hl = VRAM00 + start
   ex		de, hl
   ld		hl, (sp+@sp+src)
   ioi	ldir
   jr		.done
.too_long:
   ld		hl,-1
   ld		(sp+@sp+ret_val),hl
.done:
   #endasm

   return ret_val;
}

/*** Beginheader vram2root */
int vram2root(void *dest, int start, int length);
/*** Endheader */

/* START FUNCTION DESCRIPTION ********************************************
vram2root						<VBAT.LIB>

syntax:				int vram2root(void *dest, int start, int length)

PARAMETER1:			The address to which the data in the VBAT RAM will be copied.

PARAMETER2:			The start location within the VBAT RAM (0-31).

PARAMETER3:			The length of data to read from VBAT RAM.  The length should
						be greater than 0.  length + start should not exceed 32.

DESCRIPTION:		This function copies data from the VBAT RAM. Tamper Detection
						on the Rabbit 4000 erases the VBAT RAM with any attempt to
						enter bootstrap mode.

SEE ALSO:			root2vram
END DESCRIPTION **********************************************************/

__nodebug int vram2root(void *dest, int start, int length)
{
	int ret_val = 0;
   #asm
   ld		hl, (sp+@sp+start)
   ex		de, hl					; de = start
   ld		hl, (sp+@sp+length)
   ld		bc, hl					; bc = length (for lsir)
   add	jkhl, bcde				; hl = start + length

   cp		hl, 32
   jr		gt, .too_long			; if (start + length >= 32) jump

   ld		hl, VRAM00
   or		a
   add	hl, de					; hl = VRAM00 + start
   ex		de, hl
   ld		hl, (sp+@sp+dest)
   ex		de, hl
   ioi	lsir
	jr		.done
.too_long:
   ld		hl,-1
   ld		(sp+@sp+ret_val),hl
.done:
   #endasm

   return ret_val;
}

/*** Beginheader */
#endif
/*** Endheader */