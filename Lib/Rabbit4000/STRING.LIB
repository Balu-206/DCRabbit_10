/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*** BeginHeader  ********************************************/
#ifndef __STRING_LIB
#define __STRING_LIB

// NOTE: See warning in the library description comment block
// before using these macros.
#ifdef USE_FAR_LIB_API
#ifndef USE_FAR_STRING_LIB
#define USE_FAR_STRING_LIB
#endif
#endif
/*** EndHeader ***********************************************/

/* START LIBRARY DESCRIPTION *********************************************
STRING.LIB

DESCRIPTION:
	String operations.

	Define USE_FAR_STRING_LIB to set the default for all string and memory
	functions in this library from near to far.

	To use the near or far versions explicitly, call _n_strfunc or
	_f_strfunc where strfunc is the name of the function.

	For Example:

	_f_strtol(...)		// same as strtol with USE_FAR_STRING_LIB
	_n_strtol(...)		// same as strtol without USE_FAR_STRING_LIB

   WARNING: Defining USE_FAR_LIB_API or USE_FAR_STRING_LIB will
   will result in type conversion warnings if the code being
   compiled was originally written with all non-far (near) pointers.
   The code with warnings will compile, *but will not run correctly*.

   Example code:
   char * ptr; // Note that this is a "near" pointer
   int size;
   ptr = "string";
	size = strlen(ptr); // Warning if the USE_FAR_* macros are defined

   Typical warning caused by incompatible code when USE_FAR_LIB_API
   is defined:
   "Type mismatch: incompatible types far char * and char * used in expression."

   If you define one or both of these macros and you see warnings similar
   to the one above, then the code being compiled is not compatible
   with the "far" API. To fix the problem, try one of the following:
   1) Remove the macro definition to return to the default API (near).
      Explicitly call "far" API functions by adding the "_f_" prefix to the
      default function name (i.e. _f_strtol)
   2) Add the "_n_" prefix to affected string API functions (e.g. _n_strcat)
      to explicitly call the "near" versions of those functions.
   3) Update the code generating the warnings to use far pointers.


SUPPORT LIB'S:
END DESCRIPTION **********************************************************/

/*** BeginHeader copy_func, copyr_func */
__nodebug __root copy_func(void);
__nodebug __root copyr_func(void);
/*** EndHeader */

#asm __nodebug __root
copy_func::
	push af
.repeat1:
	ld a, (px)
   ld (py), a
   ld px, px + 1
   ld py, py + 1
   dwjnz .repeat1
	pop af
	ret

copyr_func::
	push af
.repeat2:
	ld a, (px)
   ld (py), a
   ld px, px - 1
   ld py, py - 1
   dwjnz .repeat2
	pop af
	ret
#endasm

/*** BeginHeader */
// move strtoX and atoX functions into stdlib.h/stdlib.c (ANSI C90)
#include <stdlib.h>

// moved isX into ctype.h/ctype.c (ANSI C90)
#include <ctype.h>

// strX and memX functions in string.h/string.c (ANSI C90)
#include <string.h>

// str[n]casecmp in strings.h (BSD/Unix)
#include <strings.h>
/*** EndHeader */

/*** BeginHeader _hexits_lower */
extern const char _hexits_lower[];
/*** EndHeader */
const char _hexits_lower[] = "0123456789abcdef";

/*** BeginHeader _hexits_upper */
extern const char _hexits_upper[];
/*** EndHeader */
const char _hexits_upper[] = "0123456789ABCDEF";


/*** BeginHeader hexstr2nybble */
__xmem int hexstr2nybble (const char __far *p);
/*** EndHeader */
/* START FUNCTION DESCRIPTION ********************************************
hexstr2nybble                                                <STRING.LIB>

SYNTAX:  int hexstr2nybble (const char far *p);

KEYWORDS: convert

DESCRIPTION: Converts one hex character (0-9A-Fa-f) to a value of 0..15.

RETURN VALUE: The byte (0-15) represented by the hex character or -1 on
              error (invalid character, string less than 1 byte).

EXAMPLES:     hexstr2nybble("F") returns 15
              hexstr2nybble("") returns -1 (error because < 1 character)
              hexstr2nybble("x") returns -1 (not a hex digit)

END DESCRIPTION **********************************************************/
__nodebug
__xmem int hexstr2nybble (const char __far *p)
{
#asm
	; PX already loaded with 'p' parameter
	ld		a,(px)
	clr	hl
	dec	hl		; assume -1 return code
	sub	a,'0'
	jr		c,.retn
	cp		10
	jr		c,.ok
	sub	a,7 	; If it was 'A', it is now 10
	jr		c,.retn
	cp		16
	jr		c,.ok
	sub	a,32	; If it was 'a', it is now 10
	jr		c,.retn
	cp		16
	jr		nc,.retn
.ok:			; A has value
	clr	hl
	ld		L,a
.retn:
	; HL has return value
#endasm
}



/*** BeginHeader hexstrtobyte */
__xmem int hexstrtobyte (const char __far *p);
/*** EndHeader */
/* START FUNCTION DESCRIPTION ********************************************
hexstrtobyte                                                  <STRING.LIB>

SYNTAX:  int hexstrtobyte (const char far *p);

KEYWORDS: convert

DESCRIPTION: Converts two hex characters (0-9A-Fa-f) to a byte.

RETURN VALUE: The byte (0-255) represented by the two hex characters or -1 on
              error (invalid character, string less than 2 bytes).

EXAMPLES:     hexstrtobyte("FF") returns 255
              hexstrtobyte("0") returns -1 (error because < 2 characters)
              hexstrtobyte("ABCDEF") returns 0xAB (ignores additional chars)

END DESCRIPTION **********************************************************/
__nodebug
__xmem int hexstrtobyte (const char __far *p)
{
#asm
	; PX already loaded with 'p' parameter
	ld		a,(px+1)
	clr	hl
	dec	hl		; assume -1 return code
	sub	a,'0'
	jr		c,.retn
	ld		b,a
	cp		10
	jr		c,.nextdig
	sub	a,7 	; If it was 'A', it is now 10
	jr		c,.retn
	ld		b,a
	cp		16
	jr		c,.nextdig
	sub	a,32	; If it was 'a', it is now 10
	jr		c,.retn
	ld		b,a
	cp		16
	jr		nc,.retn
.nextdig:		; here, B has value of 2nd digit (LSB).  Now do MSB.
	ld		a,(px)
	sub	a,'0'
	jr		c,.retn
	cp		10
	jr		c,.ok
	sub	a,7 	; If it was 'A', it is now 10
	jr		c,.retn
	cp		16
	jr		c,.ok
	sub	a,32	; If it was 'a', it is now 10
	jr		c,.retn
	cp		16
	jr		nc,.retn
.ok:			; B has LSB and A has MSB, but now need to shift A
	bool	hl	; Set H to zero and clear carry flag
	rla
	rla
	rla
	rla
	or		a,b
	ld		L,a
.retn:
	; HL has return value
#endasm
}


/*** BeginHeader hexstr2bin */
word hexstr2bin (const char __far *p, char __far * bin, word bin_len);
/*** EndHeader */
/* START FUNCTION DESCRIPTION ********************************************
hexstr2bin                                                  <STRING.LIB>

SYNTAX:  word hexstr2bin (const char far *p, char far * bin, word bin_len);

KEYWORDS: convert

DESCRIPTION: Converts exactly bin_len*2 hex characters (0-9A-Fa-f) into
             an equivalent binary string of length bin_len.

             Characters in 'p' beyond bin_len*2 are ignored, but all
             characters from p[0] through to p[bin_len*2 - 1] must
             be valid hex characters '0'..'9' and 'A'..'F' or 'a'..'f'.

             If there are fewer characters in 'p' than expected, then
             a null bytes will be added to 'bin' at the point
             where the hex string ends, up to the end of bin.  Thus,

                r = hexstr2bin("12AB", buf, 4);

             will return r = 3 and buf set to the 4 bytes 0x12 0xAB 0x00 0x00.
             In contrast,

                r = hexstr2bin("12ABCD", buf, 3);

             will return r = 0 and buf = 0x12 0xAB 0xCD.

             Note: numhexstr2bin() does a similar job, except with reversal
             of byte order.

PARAMETER1:	 p: far pointer to ascii string to convert
PARAMETER2:	 bin: far pointer to binary buffer to be filled with result
					-- it is OK for p and bin to point to the same location.
					otherwise, they should not overlap at all.
PARAMETER3:	 bin_len: length of 'bin' and, by implication, half the length
             of p.  Must be 0 through 65534 inclusive.

RETURN VALUE: Zero if there were no errors.
              Non-zero if there were invalid characters in p.  The actual
              return value is one past the offset of the first invalid
              result byte in 'bin'.

SEE ALSO:  hexstrtobyte, numhexstr2bin
END DESCRIPTION **********************************************************/
__nodebug
word hexstr2bin (const char __far *p, char __far * bin, word bin_len)
{
	auto word L;
	auto int b;

	for (L = 0; L < bin_len; ++L) {
		b = hexstrtobyte(p);
		if (b < 0) {
			_f_memset(bin, 0, bin_len - L);
			return L + 1;
		}
		p += 2;
		*bin = (char)b;
		++bin;
	}
	return 0;
}


/*** BeginHeader numhexstr2bin */
word numhexstr2bin (const char __far *p, char __far * bin, word bin_len);
/*** EndHeader */
/* START FUNCTION DESCRIPTION ********************************************
numhexstr2bin                                                  <STRING.LIB>

SYNTAX:  word numhexstr2bin (const char far *p, char far * bin, word bin_len);

KEYWORDS: convert

DESCRIPTION: Converts up to bin_len*2 hex characters (0-9A-Fa-f) into
             an equivalent binary string of length bin_len.

             First, chars at p are scanned until a non-hexadecimal char
             is encountered.  Then, running backwards from that point,
             successive hex chars are parsed into binary and loaded into
             bin, until bin_len bytes have been stored in bin, or the
             hex chars in p are exhausted.

             This has the effect of parsing numeric values expressed in
             hexadecimal, into binary values.  The string value is written
             MSB first, and the binary value is stored LSB first.  If there
             are too many digits in p (more than bin_len*2), then the
             digits on the left will be ignored, and only the LSBs will
             be converted.

             Note: hexstr2bin() does a similar job, except with no reversal
             of byte order, and requires an exactly matching number of
             characters.

PARAMETER1:	 p: far pointer to ascii string to convert
PARAMETER2:	 bin: far pointer to binary buffer to be filled with result.
             If necessary, this result will be padded with zeros.
PARAMETER3:	 bin_len: length of 'bin'.

RETURN VALUE: Number of characters from p which were processed.
SEE ALSO:  hexstrtobyte, hexstr2bin
END DESCRIPTION **********************************************************/
__nodebug
word numhexstr2bin (const char __far *p, char __far * bin, word bin_len)
{
	auto const char __far * q;
	auto word plen;
	auto word retval;

	// Scan to end
	for (q = p; isxdigit(*q); ++q);
	retval = plen = (word)(q - p);	// Length of valid input string
	// Fill in by pairs of digits
	while (plen >= 2 && bin_len) {
		q -= 2;
		*bin++ = hexstrtobyte(q);	// Error not possible, because of scan above
		plen -= 2;
		--bin_len;
	}
	// If bin_len is still non-zero, then plen will be 0 or 1.
	if (plen && bin_len) {
		// There was an odd remaining char which will fit
		*bin++ = hexstr2nybble(q-1);
		--bin_len;
	}
	// Finally, pad any remaining space in bin with zeros
	if (bin_len)
		_f_memset(bin, 0, bin_len);
	return retval;
}


/*** BeginHeader strcasecmp */
#define strcasecmp( s1, s2)		strcmpi( s1, s2)
/*** EndHeader */
/* START FUNCTION DESCRIPTION ********************************************
strcasecmp                                                     <strings.h>

SYNTAX:	int strcasecmp(const char far * str1, const char far * str2)

					strcasecmp() is an alternate name for strcmpi()

END DESCRIPTION **********************************************************/
int (strcasecmp)(const char __far * str1, const char __far * str2)
{
	return strcmpi( str1, str2);
}


/*** Beginheader strcmpi */
int strcmpi(const char __far * str1, const char __far * str2);
// Do not use the following listed deprecated function name macros, which
// will be removed from a future Dynamic C release. Instead of using the
// listed _f_ or _n_ prefixed function name macros, call the "ordinary,
// unadorned" functions directly.
#define _f_strcmpi	strcmpi
#define _n_strcmpi	strcmpi
// End of this list of deprecated function name macros.
/*** Endheader */
/* START FUNCTION DESCRIPTION ********************************************
strcmpi                       <STRING.LIB>

SYNTAX:	int strcmpi(const char far * str1, const char far * str2)

DESCRIPTION:    Performs case-insensitive unsigned character by character
                comparison of two null terminated strings.

PARAMETER1:     Pointer to string 1.
PARAMETER2:     Pointer to string 2.

RETURN VALUE:	< 0 if str1 is less than str2
                   char in str1 is less than corresponding char in str2
                   str1 is shorter than but otherwise identical to str2
               = 0 if str1 is equal to str2
                   str1 is identical to str2
               > 0 if str1 is greater than str2
                   char in str2 is greater than corresponding char in str2
                   str2 is shorter than but otherwise identical to str1

KEYWORDS: string, compare
END DESCRIPTION **********************************************************/
#asm __xmem
strcmpi::				;		px = str1
	ld		py, (sp+7)	;		py = str2
.loop:
	ld		a, (py)
	cp		'a'
	jr		c, .nextchar
	cp		'z'+1
	jr		nc, .nextchar
	sub	'a'-'A'
.nextchar:
	ld		L, a
	ld		a, (px)
	cp		'a'
	jr		c, .noconvert
	cp		'z'+1
	jr		nc, .noconvert
	sub	'a'-'A'
.noconvert:
	cp		L
	jr		c, .done
	jr		nz, .done
	or		a
	jr		z, .done
	ld		px, px+1
	ld		py, py+1
	jr		.loop
.done:
	ld		h, 0
	ld		l, a		;load a sign extended into hl
	jr		nc, .over
	dec	h
.over:
	lret
#endasm


/*** BeginHeader strncasecmp */
#define strncasecmp( s1, s2, n)		strncmpi( s1, s2, n)
/*** EndHeader */
/* START FUNCTION DESCRIPTION ********************************************
strncasecmp                                                    <strings.h>

SYNTAX:	int strncasecmp( const char far * str1, const char far * str2,
																						unsigned n)

					strncasecmp() is an alternate name for strncmpi()

END DESCRIPTION **********************************************************/
int (strncasecmp)(const char __far * str1, const char __far * str2, unsigned n)
{
	return strncmpi( str1, str2, n);
}


/*** Beginheader strncmpi */
int strncmpi(const char __far * str1, const char __far * str2, unsigned n);
// Do not use the following listed deprecated function name macros, which
// will be removed from a future Dynamic C release. Instead of using the
// listed _f_ or _n_ prefixed function name macros, call the "ordinary,
// unadorned" functions directly.
#define _f_strncmpi	strncmpi
#define _n_strncmpi	strncmpi
// End of this list of deprecated function name macros.
/*** Endheader */
/* START FUNCTION DESCRIPTION ********************************************
strncmpi                     <STRING.LIB>

SYNTAX: int strncmpi(const char far * str1, const char far * str2, unsigned n)

DESCRIPTION:    Performs case-insensitive unsigned character by character
                comparison of two strings of length "n"

PARAMETER1:     Pointer to string 1.
PARAMETER2:     Pointer to string 2.
PARAMETER3:     Maximum number of bytes to compare
                if zero, both strings are considered equal

RETURN VALUE:	< 0 if str1 is less than str2
                   char in str1 is less than corresponding char in str2
               = 0 if str1 is equal to str2
                   str1 is identical to str2
               > 0 if str1 is greater than str2
                   char in str2 is greater than corresponding char in str2

KEYWORDS: string, compare
END DESCRIPTION **********************************************************/

__nodebug
int strncmpi(const char __far *str1, const char __far *str2, unsigned n)
{
#asm
	ld		py, (sp+@sp+str2)
	ld		hl, (sp+@sp+n)
	ex		bc, hl
	test	bc
	jr		z, .countdone
.loop:
	ld		a, (py)
	cp		'a'
	jr		c, .nextchar
	cp		'z'+1
	jr		nc, .nextchar
	sub	'a'-'A'
.nextchar:
	ld		L, a
	ld		a, (px)
	cp		'a'
	jr		c, .noconvert
	cp		'z'+1
	jr		nc, .noconvert
	sub	'a'-'A'
.noconvert:
	cp		L
	jr		c, .done
	jr		nz, .done
	or		a
	jr		z, .done
	ld		px, px+1
	ld		py, py+1
	dwjnz	.loop
.countdone:
	clr	hl
	jr		.over
.done:
	ld		h, 0
	ld		l, a		;load a sign extended into hl
	jr		nc, .over
	dec	h
.over:
#endasm
}


/*** BeginHeader  ********************************************/
#endif
/*** EndHeader ***********************************************/