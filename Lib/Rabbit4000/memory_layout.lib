/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/* START LIBRARY DESCRIPTION *********************************************
MEMORY_LAYOUT.LIB

DESCRIPTION:
   Defines the memory layout of a board as seen by the compiler.

END DESCRIPTION **********************************************************/

/*** BeginHeader */

// Check for origin keywords defined as macros.  If so, throw a fatal error.

#ifdef in
   #error "'in' is used as a keyword in #orgdef directives, and"
   #fatal "   must not be defined as a macro in the Project Options."
#endif
#ifdef below
   #error "'below' is used as a keyword in #orgdef directives, and"
   #fatal "   must not be defined as a macro in the Project Options."
#endif
#ifdef above
   #error "'above' is used as a keyword in #orgdef directives, and"
   #fatal "   must not be defined as a macro in the Project Options."
#endif
#ifdef phy
   #error "'phy' is used as a keyword in #orgdef directives, and"
   #fatal "   must not be defined as a macro in the Project Options."
#endif
#ifdef start
   #error "'start' is used as a keyword in #orgdef directives, and"
   #fatal "   must not be defined as a macro in the Project Options."
#endif
#ifdef end
   #error "'end' is used as a keyword in #orgdef directives, and"
   #fatal "   must not be defined as a macro in the Project Options."
#endif
#ifdef log
   #error "'log' is used as a keyword in #orgdef directives, and"
   #fatal "   must not be defined as a macro in the Project Options."
#endif
#ifdef size
   #error "'size' is used as a keyword in #orgdef directives, and"
   #fatal "   must not be defined as a macro in the Project Options."
#endif
#ifdef to
   #error "'to' is used as a keyword in #orgdef directives, and"
   #fatal "   must not be defined as a macro in the Project Options."
#endif
#ifdef physical
   #error "'physical' is used as a keyword in #orgmac directives, and"
   #fatal "   must not be defined as a macro in the Project Options."
#endif
#ifdef logical
   #error "'logical' is used as a keyword in #orgmac directives, and"
   #fatal "   must not be defined as a macro in the Project Options."
#endif
#ifdef segment
   #error "'segment' is used as a keyword in #orgmac directives, and"
   #fatal "   must not be defined as a macro in the Project Options."
#endif
#ifdef boundary
   #error "'boundary' is used as a keyword in #orgmac directives, and"
   #fatal "   must not be defined as a macro in the Project Options."
#endif
#ifdef fragments
   #error "'fragments' is used as a keyword in #orgmac directives, and"
   #fatal "   must not be defined as a macro in the Project Options."
#endif
#ifdef apply
   #error "'apply' is used as a keyword in #orgact directives, and"
   #fatal "   must not be defined as a macro in the Project Options."
#endif
#ifdef resume
   #error "'resume' is used as a keyword in #orgact directives, and"
   #fatal "   must not be defined as a macro in the Project Options."
#endif
#ifdef wcodorg
   #error "'wcodorg' is used as a keyword in origin directives, and"
   #fatal "   must not be defined as a macro in the Project Options."
#endif
#ifdef resvorg
   #error "'resvorg' is used as a keyword in origin directives, and"
   #fatal "   must not be defined as a macro in the Project Options."
#endif
#ifdef flashorg
   #error "'flashorg' is used as a keyword in origin directives, and"
   #fatal "   must not be defined as a macro in the Project Options."
#endif
#ifdef bbramorg
   #error "'bbramorg' is used as a keyword in origin directives, and"
   #fatal "   must not be defined as a macro in the Project Options."
#endif
#ifdef fastramorg
   #error "'fastramorg' is used as a keyword in origin directives, and"
   #fatal "   must not be defined as a macro in the Project Options."
#endif
#ifdef xconorg
   #error "'xconorg' is used as a keyword in origin directives, and"
   #fatal "   must not be defined as a macro in the Project Options."
#endif
#ifdef xcodorg
   #error "'xcodorg' is used as a keyword in origin directives, and"
   #fatal "   must not be defined as a macro in the Project Options."
#endif
#ifdef xvarorg
   #error "'xvarorg' is used as a keyword in origin directives, and"
   #fatal "   must not be defined as a macro in the Project Options."
#endif
#ifdef xmemorg
   #error "'xmemorg' is used as a keyword in origin directives, and"
   #fatal "   must not be defined as a macro in the Project Options."
#endif
#ifdef stackorg
   #error "'stackorg' is used as a keyword in origin directives, and"
   #fatal "   must not be defined as a macro in the Project Options."
#endif
#ifdef rconorg
   #error "'rconorg' is used as a keyword in origin directives, and"
   #fatal "   must not be defined as a macro in the Project Options."
#endif
#ifdef rcodorg
   #error "'rcodorg' is used as a keyword in origin directives, and"
   #fatal "   must not be defined as a macro in the Project Options."
#endif
#ifdef rvarorg
   #error "'rvarorg' is used as a keyword in origin directives, and"
   #fatal "   must not be defined as a macro in the Project Options."
#endif
#ifdef bbvarorg
   #error "'bbvarorg' is used as a keyword in origin directives, and"
   #fatal "   must not be defined as a macro in the Project Options."
#endif

/*** EndHeader */
/*** BeginHeader */

#orgstart

#if defined ORG_PLACE_USERDATA_IN_RAMx
   /*
      Custom definition of ORG_PLACE_USERDATA_IN_RAMx allows an application to
      relocate the optional user data memory org into a specified RAM device.
      To specify the user data memory org's RAM device, add:
         ORG_PLACE_USERDATA_IN_RAMx = RAMx
      into Dynamic C's Project Options' Defines tab, where integer RAMx is one
      of 1, 2, or 3, as appropriate to the application's Rabbit board type and
      compile mode.
      If the user specifies an in-range but non-existent RAMx device then a
      rather cryptic error message will result. For example, specifying that the
      user data buffer should be relocated into RAM2 when compiling to an
      RCM4000 results in the following error message:
         "userdata_buff: This reference has no corresponding definition."
   */
 #if FLASH_COMPILE \
     && (1 > ORG_PLACE_USERDATA_IN_RAMx || 2 < ORG_PLACE_USERDATA_IN_RAMx)
   #fatal "FLASH_COMPILE mode currently supports only" \
               " ORG_PLACE_USERDATA_IN_RAMx integer values in the range [1,2]."
 #elif RAM_COMPILE \
       && (1 > ORG_PLACE_USERDATA_IN_RAMx || 2 < ORG_PLACE_USERDATA_IN_RAMx)
   #fatal "RAM_COMPILE mode currently supports only" \
               " ORG_PLACE_USERDATA_IN_RAMx integer values in the range [1,2]."
 #elif FAST_RAM_COMPILE \
       && (1 > ORG_PLACE_USERDATA_IN_RAMx || 3 < ORG_PLACE_USERDATA_IN_RAMx)
   #fatal "FAST_RAM_COMPILE mode currently supports only" \
               " ORG_PLACE_USERDATA_IN_RAMx integer values in the range [1,3]."
 #endif
#else
 #if FLASH_COMPILE
   // FLASH_COMPILE mode's default ORG_PLACE_USERDATA_IN_RAMx value is 1.
   #define ORG_PLACE_USERDATA_IN_RAMx 1
 #elif RAM_COMPILE
   // RAM_COMPILE mode's default ORG_PLACE_USERDATA_IN_RAMx value is 1.
   #define ORG_PLACE_USERDATA_IN_RAMx 1
 #elif FAST_RAM_COMPILE
   // FAST_RAM_COMPILE mode's default ORG_PLACE_USERDATA_IN_RAMx value is 2.
   #define ORG_PLACE_USERDATA_IN_RAMx 2
 #endif
#endif

/*
   Define need or no need for a "no lcall" reserved memory org:
      When the physical memory map is larger than 1 MByte (i.e. when the
      quadrant size is larger than 256 KBytes) Rabbit 4000+ CPUs' lcall and
      lret instructions can't be used to reach or to return from "wrap around"
      physical addresses in the range 0x000000 through 0x00DFFF. Accessing such
      wrap around physical addresses would require the lcall and lret
      instructions to maintain 0xXXX LXPC information, but they only use and
      retain 0xXX XPC information, thus forcing a 0x0XX LXPC value.
*/
#if (0xE0 & (MECR_VALUE)) != 0x00 && (0xE0 & (MECR_VALUE)) != 0xE0
   // Rabbit's quadrant size is > 256 KB and its physical memory map > 1 MB,
   //  so the "no_lcall" org is needed
   #define _ORG_NO_LCALL_IS_NEEDED_
#endif	// (0xE0 & (MECR_VALUE)) != 0x00 && (0xE0 & (MECR_VALUE)) != 0xE0

// _FLASH_SIZE_ and _RAM_SIZE_ are defined as the number of 4KB (0x1000)
// blocks, so define actual size (in bytes) for origin definitions.
#define ORG_FLASH_SIZE (_FLASH_SIZE_ * 0x1000UL)

#define ORG_RAM_SIZE (_RAM_SIZE_ * 0x1000UL)
#define ORG_RAM_START (RAM_START * 0x1000UL)

#if RCM5600W_SERIES
   /*
      In order to simulate separate battery-backable and fast RAMs, the RCM5600W
      splits its main RAM into two logical devices.  For future compatibility,
      the part of main RAM designated as battery-backable must be at least 32k,
      and it should not be larger.  Internal RAM is used to compensate for the
      amount of main RAM lost to the battery-backable partition.
   */
   #if (FAT_NBLOCKS*0x1000UL + USERDATA_NBLOCKS*0x1000UL + BBROOTDATA_SIZE) < 0x8000
      #define ORG_BBRAM_SIZE 0x8000 //32k
   #else
      #define ORG_BBRAM_SIZE (FAT_NBLOCKS*0x1000UL + USERDATA_NBLOCKS*0x1000UL + BBROOTDATA_SIZE)
   #endif
#else
	#define ORG_BBRAM_SIZE 0
#endif

#if FAST_RAM_COMPILE
   /*
   ** The program is compiled to parallel or serial flash, but is copied to RAM
   ** and executes in RAM.
   */
   // Define the physical address (offset in program flash) of the bottom of the
   //  reserved ID+User blocks area, in case a protective reserve org is needed.
   #define BOTTOM_OF_IDUSER_RESV  (ORG_FLASH_SIZE - MAX_USERBLOCK_SIZE)
   // Define ORG_USER_BLOCK_SIZE as appropriate to protect the program flash's
   //  reserved ID+User blocks area.
   //
   // When a program is stored in (parallel or serial) primary flash but copied
   //  to run in the primary RAM, the size of a reserved memory org that is
   //  required to protect the ID+User blocks area may range from zero up to the
   //  value of MAX_USERBLOCK_SIZE, or even larger in the unlikely case that the
   //  primary RAM is larger than the primary flash.
   //
   // There are two possible cases for flash size:
   //
   // 1) After reserving space for the ID+User blocks, there's enough room to
   //    store the largest possible firmware image that can fit in RAM.
   //    |   (flash available for program storage)     | MAX_USERBLOCK_SIZE |
   //    |                    ORG_FLASH_SIZE           V                    |
   //    |    ORG_RAM_SIZE - ORG_BBRAM_SIZE    |
   //    |         (max program size)          |
   //
   // 2) After reserving space for the ID+User blocks, there's not enough room
   //    to store the largest possible firmware image that can fit in RAM.
   //    Therefore, reserve space (ORG_USER_BLOCK_SIZE) to limit the maximum
   //    application firmware size.
   //    |   (flash available for program storage) |   MAX_USERBLOCK_SIZE   |
   //    |                    ORG_FLASH_SIZE       V                        |
   //    |         ORG_RAM_SIZE - ORG_BBRAM_SIZE                       |
   //    |         (max program size)              |ORG_USER_BLOCK_SIZE|
   #if (ORG_RAM_SIZE - ORG_BBRAM_SIZE) <= BOTTOM_OF_IDUSER_RESV
      // No ID+User blocks protection reserve org is needed because the program
      //  flash is at least as large as the primary RAM (possibly less the size
      //  of the RCM56xxW-specific simulated separate battery-backable RAM).
      #define ORG_USER_BLOCK_SIZE 0UL
   #else
      // An ID+User blocks protection reserve org is needed because the program
      //  flash is smaller than the primary RAM (possibly less the size of the
      //  RCM56xxW-specific simulated separate battery-backable RAM).
      // The protected size is the difference between the (possibly reduced)
      //  size of the primary RAM and the bottom of the ID+User blocks area.
      #define ORG_USER_BLOCK_SIZE (ORG_RAM_SIZE - ORG_BBRAM_SIZE \
                                   - BOTTOM_OF_IDUSER_RESV)
   #endif
   // Defaults for the amount of space allocated to xmem code. XMEMCODE_SIZE may
   //  be overridden as necessary in Dynamic C's Project options' Defines tab.
   #ifndef XMEMCODE_SIZE
      #if __SEPARATE_INST_DATA__
         #if _RAM_SIZE_ >= 0x80
            #define XMEMCODE_SIZE (ORG_RAM_SIZE - 0x30000)
         #else
            #define XMEMCODE_SIZE (ORG_RAM_SIZE / 2)
         #endif
      #else
         #if _RAM_SIZE_ >= 0x80
            #define XMEMCODE_SIZE (ORG_RAM_SIZE - 0x20000)
         #else
            #define XMEMCODE_SIZE (ORG_RAM_SIZE / 2)
         #endif
      #endif
   #endif
#elif RAM_COMPILE
   /*
   ** The program is compiled to RAM and executes in RAM.
   */
   // Defaults for the amount of space allocated to xmem code. XMEMCODE_SIZE may
   //  be overridden as necessary in Dynamic C's Project options' Defines tab.
   #if _RAM_SIZE_ <= 0x20
      #define XMEMCODE_SIZE       (ORG_RAM_SIZE / 2)
   #else
      #define XMEMCODE_SIZE       (((_RAM_SIZE_ / 2) + 0x10) * 0x1000)
   #endif
#endif

// Only the following size is valid, since we use the RAM segment to do it.
#define RUN_IN_RAM_SIZE 0x200


#if FLASH_COMPILE
   // In flash mode, the flash is always mapped at address 0x0
   #define ORG_FLASH_START (0x0)
   #orgdef flashorg flash above phy ORG_FLASH_START size ORG_FLASH_SIZE
   #orgdef resvorg user_block in flash below end size MAX_USERBLOCK_SIZE

 #if (_BBRAMS_LOCATION) & (_BBRAM1_LOCATION)
   #orgdef bbramorg ram above phy ORG_RAM_START size ORG_RAM_SIZE
 #else
   #orgdef xmemorg ram above phy ORG_RAM_START size ORG_RAM_SIZE
 #endif

   #orgdef xcodorg xmemcode in flash above start to user_block

 #if __SEPARATE_INST_DATA__
    #orgdef rcodorg rootcode in xmemcode above start log 0 size ROOTCODE_SIZE - WATCHCODESIZE
    #orgdef rconorg rootconst in xmemcode above phy 0x10000UL log 0 size ROOTCONSTANTS_SIZE
    #orgdef xvarorg xmemdata3 in ram above start size ROOTCONSTANTS_SIZE
    #orgdef rvarorg rootdata in ram above xmemdata3 log ROOTCONSTANTS_SIZE size ROOTDATA_SIZE
 #else
    #orgdef rcodorg rootcode in xmemcode above start log 0 size ROOTCODE_SIZE
    #orgdef rvarorg rootdata in ram above start log ROOTCODE_SIZE size ROOTDATA_SIZE
 #endif

 #ifdef _ORG_NO_LCALL_IS_NEEDED_
   #orgdef resvorg no_lcall in xmemcode above rootcode to phy 0xE000
 #endif	// _ORG_NO_LCALL_IS_NEEDED_

   #orgdef xvarorg xmemdata in ram above rootdata to end
   #orgdef resvorg tc_buff in xmemdata below end size TC_SYSBUF_BLOCK
   #orgdef resvorg fat_buff in xmemdata below tc_buff size FAT_NBLOCKS*0x1000UL

 #if 1 == ORG_PLACE_USERDATA_IN_RAMx
   #orgdef resvorg userdata_buff in xmemdata below fat_buff size USERDATA_NBLOCKS*0x1000UL
 #endif

 #if defined RAM2_SIZE && defined RAM2_START
  #if (_BBRAMS_LOCATION) & (_BBRAM2_LOCATION)
   #orgdef bbramorg ram2 above phy RAM2_START*0x1000UL size RAM2_SIZE*0x1000UL
  #else
   #orgdef xmemorg ram2 above phy RAM2_START*0x1000UL size RAM2_SIZE*0x1000UL
  #endif
   #orgdef resvorg ram_mirror above ram to ram2
   #orgdef xvarorg xmemdata2 in ram2 above start to end
  #if 2 == ORG_PLACE_USERDATA_IN_RAMx
   #orgdef resvorg userdata_buff in xmemdata2 below end size USERDATA_NBLOCKS*0x1000UL
  #endif
 #endif

#elif RAM_COMPILE

   #if (_BBRAMS_LOCATION) & (_BBRAM1_LOCATION)
      #orgdef bbramorg ram above phy ORG_RAM_START size ORG_RAM_SIZE
   #else
      #orgdef xmemorg ram above phy ORG_RAM_START size ORG_RAM_SIZE
   #endif
   #orgdef xmemorg xmem in ram above start to end
 #if __SEPARATE_INST_DATA__
   #orgdef xcodorg xmemcode in xmem above start size XMEMCODE_SIZE
   #orgdef rcodorg rootcode in xmemcode above start log 0 size ROOTCODE_SIZE - WATCHCODESIZE

  #ifdef _ORG_NO_LCALL_IS_NEEDED_
   #orgdef resvorg no_lcall in xmemcode above rootcode to phy 0xE000
  #endif	// _ORG_NO_LCALL_IS_NEEDED_

   #orgdef rconorg rootconst in xmemcode above phy 0x10000 log 0 size ROOTCONSTANTS_SIZE
   #orgdef rvarorg rootdata in xmemcode above rootconst size ROOTDATA_SIZE
 #else
   #orgdef rcodorg rootcode in xmem above start log 0 size ROOTCODE_SIZE
   #orgdef rvarorg rootdata in xmem above rootcode log ROOTCODE_SIZE size ROOTDATA_SIZE

  #ifdef _ORG_NO_LCALL_IS_NEEDED_
   #orgdef resvorg no_lcall in xmem above rootdata to phy 0xE000
   #orgdef xcodorg xmemcode in xmem above no_lcall size XMEMCODE_SIZE
  #else
   #orgdef xcodorg xmemcode in xmem above rootdata size XMEMCODE_SIZE
  #endif	// _ORG_NO_LCALL_IS_NEEDED_
 #endif

   #orgdef xvarorg xmemdata in xmem above xmemcode to end
   #orgdef resvorg tc_buff in xmemdata below end size TC_SYSBUF_BLOCK
   #orgdef resvorg fat_buff in xmemdata below tc_buff size FAT_NBLOCKS*0x1000UL

 #if 1 == ORG_PLACE_USERDATA_IN_RAMx
   #orgdef resvorg userdata_buff in xmemdata below fat_buff size USERDATA_NBLOCKS*0x1000UL
 #endif

 #if defined RAM2_SIZE && defined RAM2_START
  #if (_BBRAMS_LOCATION) & (_BBRAM2_LOCATION)
   #orgdef bbramorg ram2 above phy RAM2_START*0x1000UL size RAM2_SIZE*0x1000UL
  #else
   #orgdef xmemorg ram2 above phy RAM2_START*0x1000UL size RAM2_SIZE*0x1000UL
  #endif
   #orgdef resvorg ram_mirror above ram to ram2
   #orgdef xvarorg xmemdata2 in ram2 above start to end
  #if 2 == ORG_PLACE_USERDATA_IN_RAMx
   #orgdef resvorg userdata_buff in xmemdata2 below end size USERDATA_NBLOCKS*0x1000UL
  #endif
 #endif

 #if !_SERIAL_BOOT_FLASH_
   // For parallel boot flash boards, in RAM_COMPILE mode the flash is mapped
   //  into the MB3 quadrant.
   // The entire quadrant is reserved to protect the system ID and User blocks.
   #orgdef resvorg flash above phy (_QUADRANT_SIZE * 3ul) size _QUADRANT_SIZE
 #endif

#elif RCM5600W_SERIES		// special orgtable; always FAST_RAM_COMPILE
   #orgdef fastramorg main_ram above phy 0 size (ORG_RAM_SIZE - ORG_BBRAM_SIZE)
   #orgdef xmemorg xmem in main_ram above start to end
   #orgmac TOP_OF_XMEM_ORG = xmem boundary physical end

 #if __SEPARATE_INST_DATA__
   #define BBVAR_START ROOTCODE_SIZE
   #orgmac BOTTOM_OF_XMEMCODE_ORG = xmem boundary physical start
  #if TOP_OF_XMEM_ORG < (BOTTOM_OF_XMEMCODE_ORG + XMEMCODE_SIZE)
   #warns "XMEMCODE_SIZE redefined to fit in parent xmem org."
   #undef XMEMCODE_SIZE
   #define XMEMCODE_SIZE (TOP_OF_XMEM_ORG - BOTTOM_OF_XMEMCODE_ORG)
  #endif
  #if BOTTOM_OF_IDUSER_RESV < (BOTTOM_OF_XMEMCODE_ORG + XMEMCODE_SIZE)
   #warns "XMEMCODE_SIZE redefined to prevent ID+User blocks area conflict."
   #undef XMEMCODE_SIZE
   #define XMEMCODE_SIZE (BOTTOM_OF_IDUSER_RESV - BOTTOM_OF_XMEMCODE_ORG)
  #endif
   #orgdef xcodorg xmemcode in xmem above start size XMEMCODE_SIZE
   #orgdef rcodorg rootcode in xmemcode above start log 0 size ROOTCODE_SIZE - WATCHCODESIZE
   #orgdef rconorg rootconst in xmemcode above phy 0x10000UL log 0 size ROOTCONSTANTS_SIZE
   #orgdef rvarorg rootdata in xmemcode above rootconst size ROOTDATA_SIZE
  #ifdef _ORG_NO_LCALL_IS_NEEDED_
   #orgdef resvorg no_lcall in xmemcode above rootcode to phy 0xE000 //covers RAMSEG, DATASEG and STACKSEG
  #endif	// _ORG_NO_LCALL_IS_NEEDED_
 #else		// SID OFF
   #define BBVAR_START (ROOTCODE_SIZE + ROOTDATA_SIZE)
   #orgdef rcodorg rootcode in xmem above start log 0 size ROOTCODE_SIZE
   #orgdef rvarorg rootdata in xmem above rootcode size ROOTDATA_SIZE
  #ifdef _ORG_NO_LCALL_IS_NEEDED_
   #orgdef resvorg no_lcall in xmem above rootdata to phy 0xE000
   #orgmac BOTTOM_OF_XMEMCODE_ORG = no_lcall boundary physical end
   #if TOP_OF_XMEM_ORG < (BOTTOM_OF_XMEMCODE_ORG + XMEMCODE_SIZE)
      #warns "XMEMCODE_SIZE redefined to fit in parent xmem org."
      #undef XMEMCODE_SIZE
      #define XMEMCODE_SIZE (TOP_OF_XMEM_ORG - BOTTOM_OF_XMEMCODE_ORG)
   #endif
   #if BOTTOM_OF_IDUSER_RESV < (BOTTOM_OF_XMEMCODE_ORG + XMEMCODE_SIZE)
      #warns "XMEMCODE_SIZE redefined to prevent ID+User blocks area conflict."
      #undef XMEMCODE_SIZE
      #define XMEMCODE_SIZE (BOTTOM_OF_IDUSER_RESV - BOTTOM_OF_XMEMCODE_ORG)
   #endif
   #orgdef xcodorg xmemcode in xmem above no_lcall size XMEMCODE_SIZE
  #else
   #orgmac BOTTOM_OF_XMEMCODE_ORG = rootdata boundary physical end
   #if TOP_OF_XMEM_ORG < (BOTTOM_OF_XMEMCODE_ORG + XMEMCODE_SIZE)
      #warns "XMEMCODE_SIZE redefined to fit in parent xmem org."
      #undef XMEMCODE_SIZE
      #define XMEMCODE_SIZE (TOP_OF_XMEM_ORG - BOTTOM_OF_XMEMCODE_ORG)
   #endif
   #if BOTTOM_OF_IDUSER_RESV < (BOTTOM_OF_XMEMCODE_ORG + XMEMCODE_SIZE)
      #warns "XMEMCODE_SIZE redefined to prevent ID+User blocks area conflict."
      #undef XMEMCODE_SIZE
      #define XMEMCODE_SIZE (BOTTOM_OF_IDUSER_RESV - BOTTOM_OF_XMEMCODE_ORG)
   #endif
   #orgdef xcodorg xmemcode in xmem above rootdata size XMEMCODE_SIZE
  #endif	// _ORG_NO_LCALL_IS_NEEDED_
 #endif

   #orgdef xvarorg xmemdata in xmem above xmemcode to end

 #if (_BBRAMS_LOCATION) & (_BBRAM2_LOCATION)
   // Actually in battery-backable RAM1, but treated as RAM2 for compatibility.
   #orgdef bbramorg bb_ram below phy ORG_RAM_SIZE size ORG_BBRAM_SIZE
 #else
   #orgdef xmemorg bb_ram below phy ORG_RAM_SIZE size ORG_BBRAM_SIZE
 #endif

   #orgdef xmemorg bb_xmem in bb_ram above start to end
   #orgdef bbvarorg bbrootdata in bb_xmem above start log BBVAR_START size BBROOTDATA_SIZE
   #orgdef xvarorg bbxmemdata in bb_xmem above bbrootdata to end
   #orgdef resvorg fat_buff in bbxmemdata below end size FAT_NBLOCKS*0x1000UL

 #if 2 == ORG_PLACE_USERDATA_IN_RAMx
   // Actually in battery-backable RAM1, but treated as RAM2 for compatibility.
   #orgdef resvorg userdata_buff in bbxmemdata below fat_buff size USERDATA_NBLOCKS*0x1000UL
 #endif

   #orgdef fastramorg internal_ram above phy RAM2_START*0x1000UL size RAM2_SIZE*0x1000UL
   #orgdef xmemorg internal_xmem in internal_ram above start to end
   #orgdef xvarorg xmemdata2 in internal_xmem above start to end
   #orgdef resvorg tc_buff in xmemdata2 below end size TC_SYSBUF_BLOCK

 #if 1 == ORG_PLACE_USERDATA_IN_RAMx
   // Actually in fast RAM2, but treated as RAM1 for compatibility.
   #orgdef resvorg userdata_buff in xmemdata2 below tc_buff size USERDATA_NBLOCKS*0x1000UL
 #endif

#elif FAST_RAM_COMPILE
   // typical memory map: RAM1 (code and possibly data), optional RAM3 (data),
   //  optional battery-backable RAM2 (bb data)
   // RAM1 is *always* (assumed to be) a fast SRAM
   #orgdef fastramorg ram1 above phy ORG_RAM_START size ORG_RAM_SIZE
   #orgdef xmemorg xmem in ram1 above start to end
   #orgmac TOP_OF_XMEM_ORG = xmem boundary physical end

 #if __SEPARATE_INST_DATA__
   #orgmac BOTTOM_OF_XMEMCODE_ORG = xmem boundary physical start
  #if TOP_OF_XMEM_ORG < (BOTTOM_OF_XMEMCODE_ORG + XMEMCODE_SIZE)
   #warns "XMEMCODE_SIZE redefined to fit in parent xmem org."
   #undef XMEMCODE_SIZE
   #define XMEMCODE_SIZE (TOP_OF_XMEM_ORG - BOTTOM_OF_XMEMCODE_ORG)
  #endif
  #if BOTTOM_OF_IDUSER_RESV < (BOTTOM_OF_XMEMCODE_ORG + XMEMCODE_SIZE)
   #warns "XMEMCODE_SIZE redefined to prevent ID+User blocks area conflict."
   #undef XMEMCODE_SIZE
   #define XMEMCODE_SIZE (BOTTOM_OF_IDUSER_RESV - BOTTOM_OF_XMEMCODE_ORG)
  #endif
   #orgdef xcodorg xmemcode in xmem above start size XMEMCODE_SIZE

   // No support for root code follows explains the missing 4k
   #orgdef rcodorg rootcode in xmemcode above start log 0 size ROOTCODE_SIZE - WATCHCODESIZE

  #ifdef _ORG_NO_LCALL_IS_NEEDED_
   #orgdef resvorg no_lcall in xmemcode above rootcode to phy 0xE000
  #endif	// _ORG_NO_LCALL_IS_NEEDED_

   #orgdef rconorg rootconst in xmemcode above phy 0x10000UL log 0 size ROOTCONSTANTS_SIZE
   #orgdef rvarorg rootdata in xmemcode above rootconst size ROOTDATA_SIZE
 #else		// SID OFF
   #orgdef rcodorg rootcode in xmem above start log 0 size ROOTCODE_SIZE
   #orgdef rvarorg rootdata in xmem above rootcode size ROOTDATA_SIZE
  #ifdef _ORG_NO_LCALL_IS_NEEDED_
   #orgdef resvorg no_lcall in xmem above rootdata to phy 0xE000
   #orgmac BOTTOM_OF_XMEMCODE_ORG = no_lcall boundary physical end
   #if TOP_OF_XMEM_ORG < (BOTTOM_OF_XMEMCODE_ORG + XMEMCODE_SIZE)
      #warns "XMEMCODE_SIZE redefined to fit in parent xmem org."
      #undef XMEMCODE_SIZE
      #define XMEMCODE_SIZE (TOP_OF_XMEM_ORG - BOTTOM_OF_XMEMCODE_ORG)
   #endif
   #if BOTTOM_OF_IDUSER_RESV < (BOTTOM_OF_XMEMCODE_ORG + XMEMCODE_SIZE)
      #warns "XMEMCODE_SIZE redefined to prevent ID+User blocks area conflict."
      #undef XMEMCODE_SIZE
      #define XMEMCODE_SIZE (BOTTOM_OF_IDUSER_RESV - BOTTOM_OF_XMEMCODE_ORG)
   #endif
   #orgdef xcodorg xmemcode in xmem above no_lcall size XMEMCODE_SIZE
  #else
   #orgmac BOTTOM_OF_XMEMCODE_ORG = rootdata boundary physical end
   #if TOP_OF_XMEM_ORG < (BOTTOM_OF_XMEMCODE_ORG + XMEMCODE_SIZE)
      #warns "XMEMCODE_SIZE redefined to fit in parent xmem org."
      #undef XMEMCODE_SIZE
      #define XMEMCODE_SIZE (TOP_OF_XMEM_ORG - BOTTOM_OF_XMEMCODE_ORG)
   #endif
   #if BOTTOM_OF_IDUSER_RESV < (BOTTOM_OF_XMEMCODE_ORG + XMEMCODE_SIZE)
      #warns "XMEMCODE_SIZE redefined to prevent ID+User blocks area conflict."
      #undef XMEMCODE_SIZE
      #define XMEMCODE_SIZE (BOTTOM_OF_IDUSER_RESV - BOTTOM_OF_XMEMCODE_ORG)
   #endif
   #orgdef xcodorg xmemcode in xmem above rootdata size XMEMCODE_SIZE
  #endif	// _ORG_NO_LCALL_IS_NEEDED_
 #endif

   #orgdef xvarorg xmemdata2 in xmem above xmemcode to end
   #orgdef resvorg tc_buff in xmemdata2 below end size TC_SYSBUF_BLOCK

 #if 1 == ORG_PLACE_USERDATA_IN_RAMx
   #orgdef resvorg userdata_buff in xmemdata2 below tc_buff size USERDATA_NBLOCKS*0x1000UL
 #endif

 #ifdef RAM3_START
   // RAM3 is an additional SRAM, support both BB and fast
  #if (_BBRAMS_LOCATION) & (_BBRAM3_LOCATION)
   // RAM3 is battery-backable
   #orgdef bbramorg ram3 above phy RAM3_START*0x1000UL size RAM3_SIZE*0x1000UL
  #else
   // RAM3 is *not* battery-backable
   #orgdef xmemorg ram3 above phy RAM3_START*0x1000UL size RAM3_SIZE*0x1000UL
  #endif
   #orgdef xvarorg xmem3 in ram3 above start to end
  #if 3 == ORG_PLACE_USERDATA_IN_RAMx
   #orgdef resvorg userdata_buff in xmem3 below end size USERDATA_NBLOCKS*0x1000UL
  #endif
 #endif

 #if defined RAM2_START && defined RAM2_SIZE
  #if __SEPARATE_INST_DATA__ && RAM2_SIZE <= 0x10
   /*
      Separate I&D is enabled and this is a small (64 BKyte or less) SRAM. This
      SRAM has at least one "ghost" image even in Rabbit's minimum size
      quadrant.
      We take advantage of this ghosting by starting the ram2 org at an offset
      to match the logical bbrootdata org offset. Doing this provides the
      maximum size contiguous remainder above the bbrootdata org.
      Note that this offset for a small SRAM applies whether it is marked as
      battery-backable or not. In the non-battery-backable case, obviously,
      bbrootdata is a misnomer. Also note that no Rabbit board produced by Digi
      has a non-battery-backable RAM2 - although some boards have dual fast
      SRAMs that are mapped contiguously into physical memory and treated
      logically as a single fast SRAM.
   */
   #define _ORG_RAM2_PHYSICAL_ADDRESS \
                            RAM2_START*0x1000UL+ROOTCONSTANTS_SIZE+ROOTDATA_SIZE
  #else
   // Otherwise, we just start the ram2 org at the quadrant boundary.
   #define _ORG_RAM2_PHYSICAL_ADDRESS RAM2_START*0x1000UL
  #endif
  #if (_BBRAMS_LOCATION) & (_BBRAM2_LOCATION)
   // RAM2 is battery-backable
   #orgdef bbramorg ram2 above phy _ORG_RAM2_PHYSICAL_ADDRESS size RAM2_SIZE*0x1000UL
  #else
   // RAM2 is *not* battery-backable
   #warns "RAM2 is not marked battery-backable; if RAM2 is not BB then " \
                              "neither is root bbram. (Check _BBRAMS_LOCATION.)"
   #orgdef xmemorg ram2 above phy _ORG_RAM2_PHYSICAL_ADDRESS size RAM2_SIZE*0x1000UL
  #endif
   #undef _ORG_RAM2_PHYSICAL_ADDRESS
   #orgdef xvarorg xmemdata in ram2 above start to end
   #orgdef resvorg fat_buff in xmemdata below end size FAT_NBLOCKS*0x1000UL
  #if 2 == ORG_PLACE_USERDATA_IN_RAMx
   #orgdef resvorg userdata_buff in xmemdata below fat_buff size USERDATA_NBLOCKS*0x1000UL
  #endif
  #if RAM2_SIZE < 0x10
   // Rabbit 6000's internal battery-backable RAM is only 32K, and is *not* used
   //  when cold-booting the board.
   #if __SEPARATE_INST_DATA__
      #orgdef bbvarorg bbrootdata in xmemdata above phy 0x0 log (ROOTCONSTANTS_SIZE + ROOTDATA_SIZE) size BBROOTDATA_SIZE
   #else
      #orgdef bbvarorg bbrootdata in xmemdata above phy 0x0 log (ROOTCODE_SIZE + ROOTDATA_SIZE) size BBROOTDATA_SIZE
   #endif
  #else
   // This must be an external RAM, which *may* be used when cold-booting the
   //  board, so move the (assumed) BB root vars out of the first 32K.
   #if __SEPARATE_INST_DATA__
      #orgdef bbvarorg bbrootdata in xmemdata above phy (ROOTCONSTANTS_SIZE + ROOTDATA_SIZE) log (ROOTCONSTANTS_SIZE + ROOTDATA_SIZE) size BBROOTDATA_SIZE
   #else
      #orgdef bbvarorg bbrootdata in xmemdata above phy 0x8000 log (ROOTCODE_SIZE + ROOTDATA_SIZE) size BBROOTDATA_SIZE
   #endif
  #endif
  #ifndef RAM3_START
   // if there is a RAM2 but no RAM3, space for RAM3 is a mirror of RAM1
   #orgdef resvorg ram1_mirror above ram1 to ram2
  #endif
 #else
   // atypical fast RAM board, only RAM1 exists so put all remaining orgs there
   #orgdef resvorg fat_buff in xmemdata2 below end size FAT_NBLOCKS*0x1000UL
   #orgdef resvorg userdata_buff in xmemdata2 below fat_buff size USERDATA_NBLOCKS*0x1000UL
 #endif

 #if !_SERIAL_BOOT_FLASH_
   // For parallel boot flash boards, in FAST_RAM_COMPILE mode the flash is
   //  mapped into the MB3 quadrant.
   // The entire quadrant is reserved to protect the system ID and User blocks.
   #orgdef resvorg flash above phy (_QUADRANT_SIZE * 3ul) size _QUADRANT_SIZE
 #endif

#endif

// Orgs for watchcode and interrupt vector tables are identical on all boards
#orgdef wcodorg watcode in rootdata below end size WATCHCODESIZE

// The interrupt vector tables need to be aligned to 256 byte boundaries
// because the iir and eir registers are 8 bit.
#orgdef resvorg intvec in watcode above start size INTVEC_TABLE_SIZE
#orgdef resvorg xintvec in watcode above intvec size XINTVEC_TABLE_SIZE

// The debug kernel should use this origin for special variables
#orgdef rvarorg run_in_ram in watcode below end size RUN_IN_RAM_SIZE


#ifdef SA_TEST
   #use ORGTEST
#endif

#orgend

// Macro definitions

#orgmac INTVEC_BASE =  intvec logical start
#orgmac XINTVEC_BASE = xintvec logical start

#orgmac ROOTDATA_SEGMENT_VAL =   rootdata boundary segment start
#orgmac ROOTDATA_LOGICAL_START = rootdata boundary logical start
#orgmac ROOTDATA_LOGICAL_END =   rootdata boundary logical end
// the following _TOS_ROOTDATA.* macros are deprecated
#orgmac _TOS_ROOTDATA_1 =        rootdata boundary physical end
#define _TOS_ROOTDATA            (_TOS_ROOTDATA_1 - 1)

#if defined BBROOTDATA_SIZE && BBROOTDATA_SIZE > 0
   #orgmac BBROOTDATA_SEGMENT_VAL =   bbrootdata boundary segment start
   #orgmac BBROOTDATA_LOGICAL_START = bbrootdata boundary logical start
   #orgmac BBROOTDATA_LOGICAL_END =   bbrootdata boundary logical end
   // the following _TOS_BBROOTDATA.* macros are deprecated
   #orgmac _TOS_BBROOTDATA_1 =        bbrootdata boundary physical end
   #define _TOS_BBROOTDATA            (_TOS_BBROOTDATA_1 - 1)
#endif

#orgmac WATCHCODE_LOGICAL_START = watcode boundary logical start
// the following _.OS_WATCH_MEM.* macros are deprecated
#orgmac _BOS_WATCH_MEM =          watcode boundary physical start
#orgmac _TOS_WATCH_MEM_1 =        watcode boundary physical end
#define _TOS_WATCH_MEM            (_TOS_WATCH_MEM_1 - 1)
#define _SOS_WATCH_MEM            (_TOS_WATCH_MEM_1 - _BOS_WATCH_MEM)

#if FAT_NBLOCKS > 0
   #orgmac _BOS_FATDATA =   fat_buff boundary physical start
   #orgmac _TOS_FATDATA_1 = fat_buff boundary physical end
   #define _TOS_FATDATA     (_TOS_FATDATA_1 - 1)
#endif

#if USERDATA_NBLOCKS > 0
   #orgmac _BOS_USERDATA =   userdata_buff boundary physical start
   #orgmac _TOS_USERDATA_1 = userdata_buff boundary physical end
   #define _TOS_USERDATA     (_TOS_USERDATA_1 - 1)
#endif

#orgact rootcode apply
#orgact rootdata apply
#orgact xmemcode apply

// Dev Note:
//    The "xmemcode" org *must* be the name of the highest physical addressed
//    code org. Then, a .BIN file will never be larger than the following size:
#orgmac _MAX_ORG_BINSIZE = xmemcode boundary physical end
/*** EndHeader */